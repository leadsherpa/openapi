{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "x-endpoint-cost": "light",
    "title": "Telnyx API",
    "description": "SIP trunking, SMS, MMS, Call Control and Telephony Data Services.",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "email": "support@telnyx.com"
    }
  },
  "servers": [
    {
      "url": "https://api.telnyx.com/v2",
      "description": "Version 2.0.0 of the Telnyx API"
    },
    {
      "url": "https://api.telnyx.com/10dlc",
      "description": "Telnyx 10DLC API"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Access Tokens",
      "description": "Access Tokens creation"
    },
    {
      "name": "Addresses",
      "description": "Address operations"
    },
    {
      "name": "Authentication Providers",
      "description": "Authentication Provider operations"
    },
    {
      "name": "Billing",
      "description": "Billing operations"
    },
    {
      "name": "Billing Groups",
      "description": "Billing groups operations"
    },
    {
      "name": "Bulk Credentials",
      "description": "Bulk operations over Credentials"
    },
    {
      "name": "Call Commands",
      "description": "Call Control command operations"
    },
    {
      "name": "Call Control Applications",
      "description": "Call Control applications operations"
    },
    {
      "name": "Call Information",
      "description": "Call information"
    },
    {
      "name": "Conference Commands",
      "description": "Conference command operations"
    },
    {
      "name": "Connections",
      "description": "Connections operations"
    },
    {
      "name": "Credential Connections",
      "description": "Credential connection operations"
    },
    {
      "name": "Credentials",
      "description": "Credentials operations"
    },
    {
      "name": "Debugging",
      "description": "Call Control debugging"
    },
    {
      "name": "Detail Records",
      "description": "Detail Records operations"
    },
    {
      "name": "Documents",
      "description": "Documents"
    },
    {
      "name": "FQDN Connections",
      "description": "FQDN connection operations"
    },
    {
      "name": "FQDNs",
      "description": "FQDN operations"
    },
    {
      "name": "IP Connections",
      "description": "IP connection operations"
    },
    {
      "name": "IPs",
      "description": "IP operations"
    },
    {
      "name": "Inbound Channels",
      "description": "Inbound channels operations"
    },
    {
      "name": "MDR Search (Beta)",
      "description": "Search messaging detail records"
    },
    {
      "name": "Managed Accounts",
      "description": "Managed Accounts operations"
    },
    {
      "name": "Media Storage API",
      "description": "Media Storage operations"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "Messaging Hosted Number",
      "description": "Manage your messaging hosted numbers"
    },
    {
      "name": "Messaging Profiles",
      "description": "Messaging profiles"
    },
    {
      "name": "Messaging URL Domains",
      "description": "Messaging URL Domains"
    },
    {
      "name": "Mobile Operator Networks",
      "description": "Mobile operator networks operations"
    },
    {
      "name": "Notifications",
      "description": "Notification settings operations"
    },
    {
      "name": "Number Background Jobs",
      "description": "Background jobs performed over a batch of phone numbers"
    },
    {
      "name": "Number Configurations",
      "description": "Configure your phone numbers"
    },
    {
      "name": "Number Lookup",
      "description": "Look up phone number data"
    },
    {
      "name": "Number Order Documents",
      "description": "Number order documents"
    },
    {
      "name": "Number Order Regulatory Requirements",
      "description": "Number order regulatory requirements"
    },
    {
      "name": "Number Orders",
      "description": "Number orders"
    },
    {
      "name": "Number Portout",
      "description": "Number portout operations"
    },
    {
      "name": "Number Reservations",
      "description": "Number reservations"
    },
    {
      "name": "Number Search",
      "description": "Number search"
    },
    {
      "name": "OTA updates",
      "description": "OTA updates operations"
    },
    {
      "name": "Outbound Voice Profiles",
      "description": "Outbound voice profiles operations"
    },
    {
      "name": "Phone Number Porting",
      "description": "Determining portability of phone numbers"
    },
    {
      "name": "Porting Order",
      "description": "Porting Order operation"
    },
    {
      "name": "Private Wireless Gateways",
      "description": "Private Wireless Gateways operations"
    },
    {
      "name": "Programmable Fax Applications",
      "description": "Fax Applications operations"
    },
    {
      "name": "Programmable Fax Commands",
      "description": "Programmable fax command operations"
    },
    {
      "name": "Queue Commands",
      "description": "Queue commands operations"
    },
    {
      "name": "Recordings Commands",
      "description": "Recordings commands operations"
    },
    {
      "name": "Reporting",
      "description": "Wireless reporting operations"
    },
    {
      "name": "Requirement Types",
      "description": "Types of requirements for international numbers and porting orders"
    },
    {
      "name": "Requirements",
      "description": "Requirements for international numbers and porting orders"
    },
    {
      "name": "Room Participants",
      "description": "Rooms Participants operations."
    },
    {
      "name": "Room Sessions",
      "description": "Rooms Sessions operations."
    },
    {
      "name": "Rooms",
      "description": "Rooms operations."
    },
    {
      "name": "Rooms Client Tokens",
      "description": "Rooms Client Tokens operations."
    },
    {
      "name": "SIM Card Group Actions",
      "description": "SIM Card Group actions operations"
    },
    {
      "name": "SIM Card Groups",
      "description": "SIM Card Groups operations"
    },
    {
      "name": "SIM Card Orders",
      "description": "SIM Card Orders operations"
    },
    {
      "name": "SIM Cards",
      "description": "SIM Cards operations"
    },
    {
      "name": "Short Codes",
      "description": "Short codes"
    },
    {
      "name": "TeXML Applications",
      "description": "TeXML Applications operations"
    },
    {
      "name": "Verify",
      "description": "Two factor authentication API"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks operations"
    },
    {
      "name": "WhatsApp Contacts",
      "description": "WhatsApp contacts"
    },
    {
      "name": "WhatsApp Media",
      "description": "WhatsApp media files"
    },
    {
      "name": "WhatsApp Messages",
      "description": "WhatsApp messages"
    },
    {
      "name": "WhatsApp Users",
      "description": "WhatsApp user info"
    },
    {
      "name": "Wireless",
      "description": "Wireless operations"
    }
  ],
  "paths": {
    "/brand": {
      "get": {
        "description": "Returns a list of your brands",
        "operationId": "listBrands",
        "parameters": [
            {
              "$ref": "#/components/parameters/PageNumber"
            },
            {
              "$ref": "#/components/parameters/PageSize"
            },
            {
              "$ref": "#/components/parameters/FilterDisplayName"
            },
            {
              "$ref": "#/components/parameters/FilterEntityType"
            },
            {
              "$ref": "#/components/parameters/FilterState"
            },
            {
              "$ref": "#/components/parameters/FilterCountry"
            }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllBrandsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "List all brands",
        "tags": [
          "Brands"
        ],
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates a new brand",
        "operationId": "CreateBrand",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandRequest"
              }
          }
        },
          "description": "Requested parameters to create a new Brand",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BrandResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "summary": "Creates a new brand.",
        "tags": [
          "Brands"
        ],
        "x-latency-category": "responsive"
      }
    },
    "/brand/{id}": {
      "get": {
        "description": "Retrieve a brand by brandId",
        "operationId": "getBrand",
        "parameters": [
          {
            "description": "brand ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
              }
          }
        ],
        "responses": {
            "200": {
              "$ref": "#/components/responses/BrandResponse"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Resource not found"
            },
            "422": {
              "description": "Bad request"
            }
        },
        "summary": "Retrieve a brand",
        "tags": [
          "Brands"
        ],
        "x-latency-category": "responsive"
       }
    },
    "/brand/{id}/externalVetting": {
      "get": {
          "description": "Retrieve a list of valid external vetting records for a supplied brand.",
          "operationId": "getVetting",
          "parameters": [
            {
              "description": "brand ID",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                  "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/BrandVettingResponse"
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Resource not found"
            },
            "422": {
              "description": "Bad request"
            }
          },
        "summary": "Retrieve a list of valid external vetting records for a brand",
        "tags": [
            "Brands"
        ],
        "x-latency-category": "responsive"
      }
    },
    "/actions/bulk/telephony_credentials": {
      "delete": {
        "description": "Delete several credentials in bulk.",
        "summary": "Delete several credentials",
        "operationId": "DeleteBulkTelephonyCredential",
        "tags": [
          "Bulk Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredTag"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/BulkCredentialResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update several credentials in bulk.",
        "summary": "Update several credentials",
        "operationId": "UpdateBulkTelephonyCredential",
        "tags": [
          "Bulk Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredTag"
          }
        ],
        "requestBody": {
          "description": "Parameters to update credentials on bulk",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/BulkCredentialResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates several credentials in bulk.",
        "summary": "Creates several credentials",
        "operationId": "CreateBulkTelephonyCredential",
        "tags": [
          "Bulk Credentials"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Requested parameters to create credentials on bulk",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/BulkCredentialResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/actions/network_preferences/sim_cards": {
      "put": {
        "x-latency-category": "background",
        "summary": "Bulk Network Preferences for SIM cards",
        "description": "This API allows dispatching the same operation described for the PUT sim_cards/:sim_card_id/network_preferences API for multiple SIM cards at once.<br/><br/>\nAlthough, a SIM card network preference may fail individually under any validation triggered as a consequence of its state. For example, a SIM can't have an in-progress OTA update for applying a Network Preference, so they'll fail when requested in this API. In that scenario, the specific error will be present in the response along with the successful definitions in the \"errors\" response node.\n",
        "operationId": "BulkSIMCardNetworkPreferences",
        "tags": [
          "SIM Cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sim_card_ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "example": [
                      "6b14e151-8493-4fa1-8664-1cc4e6d14158",
                      "6b14e151-8493-4fa1-8664-1cc4e6d14158"
                    ]
                  },
                  "mobile_operator_networks_preferences": {
                    "$ref": "#/components/schemas/MobileOperatorNetworksPreferencesRequest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/BulkSIMCardNetworkPreferenceResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/actions/register/sim_cards": {
      "post": {
        "x-latency-category": "background",
        "summary": "Register SIM cards",
        "description": "Register the SIM cards associated with the provided registration codes to the current user's account.<br/><br/>\nIf <code>sim_card_group_id</code> is provided, the SIM cards will be associated with that group. Otherwise, the default group for the current user will be used.<br/><br/>\n",
        "operationId": "SimCardRegister",
        "tags": [
          "SIM Cards"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/RegisterSimCardsResponse"
          }
        }
      }
    },
    "/actions/{action}/telephony_credentials": {
      "post": {
        "description": "Perform activate or deactivate action on all credentials filtered by the provided tag. Activate action will change the status to active, making it possible to connect calls with the credential. Deactivate action will change the status to inactive, making it impossible to connect calls with the credential.",
        "summary": "Perform activate or deactivate action on all credentials filtered by the provided tag.",
        "operationId": "BulkCredentialAction",
        "tags": [
          "Bulk Credentials"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "Identifies the action to be taken. Activate will change the status to active. Deactivate will change the status to inactive.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "activate",
                "deactivate"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/RequiredTag"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkCredentialResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/addresses": {
      "get": {
        "description": "Returns a list of your addresses.",
        "summary": "List all addresses",
        "operationId": "findAddresss",
        "tags": [
          "Addresses"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceEquals"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceContains"
          },
          {
            "$ref": "#/components/parameters/FilterUsedAsEmergency"
          },
          {
            "$ref": "#/components/parameters/FilterStreetAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressBook"
          },
          {
            "$ref": "#/components/parameters/SortAddress"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllAddressResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates an address.",
        "summary": "Creates an address",
        "operationId": "CreateAddress",
        "tags": [
          "Addresses"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during address creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/addresses/actions/validate": {
      "post": {
        "description": "Validates an address for emergency services.",
        "summary": "Validate an address",
        "operationId": "validateAddress",
        "tags": [
          "Addresses"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during address validation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ValidateAddressResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/addresses/{id}": {
      "delete": {
        "description": "Deletes an existing address.",
        "summary": "Deletes an address",
        "operationId": "DeleteAddress",
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "address ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing address.",
        "summary": "Retrieve an address",
        "operationId": "getAddress",
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "address ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/authentication_providers": {
      "get": {
        "description": "Returns a list of your SSO authentication providers.",
        "summary": "List all SSO authentication providers",
        "operationId": "findAuthenticationProviders",
        "tags": [
          "Authentication Providers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/SortAuthenticationProvider"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllAuthenticationProviderResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates an authentication provider.",
        "summary": "Creates an authentication provider",
        "operationId": "CreateAuthenticationProvider",
        "tags": [
          "Authentication Providers"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during authentication provider creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationProviderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationProviderResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/authentication_providers/{id}": {
      "delete": {
        "description": "Deletes an existing authentication provider.",
        "summary": "Deletes an authentication provider",
        "operationId": "DeleteAuthenticationProvider",
        "tags": [
          "Authentication Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "authentication provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationProviderResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing authentication provider.",
        "summary": "Retrieve an authentication provider",
        "operationId": "getAuthenticationProvider",
        "tags": [
          "Authentication Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "authentication provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationProviderResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing authentication provider.",
        "summary": "Update a authentication provider",
        "operationId": "updateAuthenticationProvider",
        "tags": [
          "Authentication Providers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a authentication provider",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthenticationProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthenticationProviderResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/available_phone_numbers": {
      "get": {
        "summary": "List available phone numbers",
        "operationId": "listAvailablePhoneNumbers",
        "tags": [
          "Number Search"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "heavy",
        "parameters": [
          {
            "name": "filter[phone_number][starts_with]",
            "in": "query",
            "description": "Filter numbers starting with a pattern (meant to be used after `national_destination_code` filter has been set).",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "FOO",
                "summary": "Find numbers starting with the prefix 'FREE'"
              }
            }
          },
          {
            "name": "filter[phone_number][ends_with]",
            "in": "query",
            "description": "Filter numbers ending with a pattern.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "CALL",
                "summary": "Find numbers ending with the suffix 'CALL'"
              }
            }
          },
          {
            "name": "filter[phone_number][contains]",
            "in": "query",
            "description": "Filter numbers containing a pattern.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "TELNYX",
                "summary": "Find numbers that contain the word 'TELNYX' in any position"
              }
            }
          },
          {
            "name": "filter[locality]",
            "in": "query",
            "description": "Filter phone numbers by city.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "US": {
                "value": "Chicago"
              },
              "CA": {
                "value": "Toronto"
              },
              "AU": {
                "value": "Canberra"
              }
            }
          },
          {
            "name": "filter[administrative_area]",
            "in": "query",
            "description": "Filter phone numbers by US state/CA province.",
            "schema": {
              "type": "string",
              "example": "IL"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter phone numbers by ISO alpha-2 country code.",
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "filter[national_destination_code]",
            "in": "query",
            "description": "Filter by the national destination code of the number. This filter is only applicable to North American numbers.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "US": {
                "value": "312"
              },
              "CA": {
                "value": "437"
              },
              "AU": {
                "value": "0251"
              }
            }
          },
          {
            "name": "filter[rate_center]",
            "in": "query",
            "description": "Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers.",
            "schema": {
              "type": "string",
              "example": "CHICAGO HEIGHTS"
            }
          },
          {
            "name": "filter[number_type]",
            "in": "query",
            "description": "Filter phone numbers by number type.",
            "schema": {
              "type": "string",
              "enum": [
                "toll-free"
              ],
              "example": "toll-free"
            }
          },
          {
            "name": "filter[features]",
            "in": "query",
            "description": "Filter if the phone number should be used for voice, fax, mms, sms, emergency.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sms",
                  "mms",
                  "voice",
                  "fax",
                  "emergency"
                ]
              },
              "example": "voice,sms"
            }
          },
          {
            "name": "filter[limit]",
            "in": "query",
            "description": "Limits the number of results.",
            "schema": {
              "type": "integer",
              "example": 100
            }
          },
          {
            "name": "filter[best_effort]",
            "in": "query",
            "description": "Filter to determine if best effort results should be included.",
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "name": "filter[quickship]",
            "in": "query",
            "description": "Filter to exclude phone numbers that need additional time after to purchase to receive phone calls.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "filter[reservable]",
            "in": "query",
            "description": "Filter to exclude phone numbers that cannot be reserved before purchase.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "filter[exclude_held_numbers]",
            "in": "query",
            "description": "Filter to exclude phone numbers that are currently on hold for your account.",
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListAvailablePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/balance": {
      "get": {
        "summary": "Retrieve user balance details",
        "operationId": "getUserBalance",
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserBalanceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/billing_groups": {
      "get": {
        "summary": "List all billing groups",
        "operationId": "listBillingGroups",
        "tags": [
          "Billing Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListBillingGroupsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a billing group",
        "operationId": "createBillingGroup",
        "tags": [
          "Billing Groups"
        ],
        "requestBody": {
          "description": "New billing group object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBillingGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateBillingGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/billing_groups/{id}": {
      "delete": {
        "summary": "Delete a billing group",
        "operationId": "deleteBillingGroup",
        "tags": [
          "Billing Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BillingGroupId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteBillingGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve a billing group",
        "operationId": "retrieveBillingGroup",
        "tags": [
          "Billing Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BillingGroupId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveBillingGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a billing group",
        "operationId": "updateBillingGroup",
        "tags": [
          "Billing Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BillingGroupId"
          }
        ],
        "requestBody": {
          "description": "Update billing group object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBillingGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateBillingGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/call_control_applications": {
      "get": {
        "description": "Return a list of call control applications.",
        "summary": "List call control applications",
        "operationId": "listCallControlApplications",
        "tags": [
          "Call Control Applications"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterApplicationName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallControlApplicationsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "interactive"
      },
      "post": {
        "summary": "Create a call control application",
        "description": "Create a call control application.",
        "operationId": "createCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "Create call control application request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "422": {
            "description": "Bad Request"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/call_control_applications/{id}": {
      "delete": {
        "description": "Deletes a call control application.",
        "summary": "Delete a call control application",
        "operationId": "deleteCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "description": "Retrieves the details of an existing call control application.",
        "summary": "Retrieve a call control application",
        "operationId": "retrieveCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      },
      "patch": {
        "summary": "Update a call control application",
        "description": "Updates settings of an existing call control application.",
        "operationId": "updateCallControlApplication",
        "tags": [
          "Call Control Applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}",
              "example": "1293384261075731499"
            }
          }
        ],
        "requestBody": {
          "description": "Update call control application request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/call_events": {
      "get": {
        "summary": "List call events",
        "description": "Filters call events by given filter parameters. Events are ordered by `event_timestamp`. If filter for `call_leg_id` or `call_session_id` is not present, it only filters events from the last 24 hours.\n\n**Note**: Only one `filter[event_timestamp]` can be passed.\n",
        "x-latency-category": "responsive",
        "x-group-parameters": "true",
        "operationId": "listCallEvents",
        "tags": [
          "Debugging"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCallLegId"
          },
          {
            "$ref": "#/components/parameters/FilterCallSessionId"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventStatus"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventType"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampGreaterThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampLessThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventTimestampEqualTo"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallEventsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/calls": {
      "post": {
        "summary": "Dial",
        "description": "Dial a number or SIP URI from a given connection. A successful response will include a `call_leg_id` which can be used to correlate the command with subsequent webhooks.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was set to `detect_beep`, `greeting_end` or `detect_words`",
        "operationId": "callDial",
        "tags": [
          "Call Commands"
        ],
        "requestBody": {
          "description": "Call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call status",
        "description": "Returns the status of a call (data is available 10 minutes after call ended).",
        "operationId": "retrieveCallStatus",
        "tags": [
          "Call Information"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/answer": {
      "post": {
        "summary": "Answer call",
        "description": "Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.\n\n**Expected Webhooks:**\n\n- `call.answered`\n",
        "operationId": "callAnswer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Answer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/bridge": {
      "post": {
        "summary": "Bridge calls",
        "description": "Bridge two call control calls.\n\n**Expected Webhooks:**\n\n- `call.bridged` for Leg A\n- `call.bridged` for Leg B\n",
        "operationId": "callBridge",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Bridge call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/enqueue": {
      "post": {
        "summary": "Enqueue call",
        "description": "Put the call in a queue.",
        "operationId": "callEnqueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Enqueue call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnqueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callEnqueued": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallEnqueuedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_start": {
      "post": {
        "summary": "Forking start",
        "description": "Call forking allows you to stream the media from a call to a specific target in realtime. \nThis stream can be used to enable realtime audio analysis to support a \nvariety of use cases, including fraud detection, or the creation of AI-generated audio responses. \nRequests must specify either the `target` attribute or the `rx` and `tx` attributes.\n\n**Expected Webhooks:**\n\n- `call.fork.started`\n- `call.fork.stopped`\n\n**Simple Telnyx RTP Encapsulation Protocol (STREP)**\n\n*Note: This header/encapsulation is not used when the `rx` and `tx`\nparameters have been specified; it only applies when media is forked\nusing the `target` attribute.*\n\nIf the destination for forked media is specified using the \"target\"\nattribute, the RTP will be encapsulated in an extra Telnyx protocol,\nwhich adds a 24 byte header to the RTP payload in each packet. The STREP\nheader includes the Call Control `call_leg_id` for stream\nidentification, along with bits that represent the direction (inbound or\noutbound) of the media. This 24-byte header sits between the UDP header\nand the RTP header.\n\nThe STREP header makes it possible to fork RTP for multiple calls (or\ntwo RTP streams for the same call) to the same IP:port, where the\nstreams can be demultiplexed by your application using the information\nin the header. Of course, it's still possible to ignore this header\ncompletely, for example, if sending forked media for different calls to\ndifferent ports or IP addresses. In this case, simply strip 24 bytes\n(or use the second byte to find the header length) from the received UDP\npayload to get the RTP (RTP header and payload).\n\n```\nSTREP Specification\n\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |1 1|Version|L|D|    HeaderLen  |  reserved (2 bytes)           |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |       reserved (4 bytes, for UDP ports or anything else)      |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n |               The call_leg_id                                 |\n |                   from Call Control                           |\n |                       (128 bits / 16 bytes)                   |\n |                           (this is binary data)               |\n +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n 11\n   Static bits 11, always set to 11 to easily distinguish forked media\n   from RTP (10) and T.38 media (usually 00) and SIP (which begins\n   with a capital letter, so begins with bits 01). This is a magic number.\n\n Version\n   Four bits to indicate the version number of the protocol, starting at 0001.\n\n L\n   One bit to represent the leg of the call (A or B).\n   0 represents the A (first) leg of the call.\n   1 represents the B (second) leg of the call.\n\n D\n   One bit to represent the direction of this RTP stream.\n   0 represents media received by Telnyx.\n   1 represents media transmitted by Telnyx.\n\n HeaderLen (1 byte)\n   The length of the header in bytes.\n   Note that this value does not include the length of the payload. The total\n   size of the RTP can be calculated by subtracting the HeaderLen from the UDP\n   length (minus 8 for the UDP header).\n   In version 1, this value will always be 24.\n\n Reserved (6 bytes)\n   Reserved for future use and to make sure that the header is a multiple of 32 bits\n\n Call Leg ID\n   A 128-bit identifier for the call leg.\n   This is the call_leg_id from Call Control.\n```\n",
        "operationId": "callForkStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Fork media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_stop": {
      "post": {
        "summary": "Forking stop",
        "description": "Stop forking a call.\n\n**Expected Webhooks:**\n\n- `call.fork.stopped`\n",
        "operationId": "callForkStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop forking media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_stop": {
      "post": {
        "summary": "Gather stop",
        "description": "Stop current gather.\n\n**Expected Webhooks:**\n\n- `call.gather.ended`\n",
        "operationId": "callGatherStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop current gather",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopGatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_audio": {
      "post": {
        "summary": "Gather using audio",
        "description": "Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_audio_url', which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_audio` command.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingAudio",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingAudioRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_speak": {
      "post": {
        "summary": "Gather using speak",
        "description": "Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_payload', which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The [Answer](/docs/api/v2/call-control/Call-Commands#CallControlAnswer) command must be issued before the `gather_using_speak` command.\n\n**Expected Webhooks:**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "callGatherUsingSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/hangup": {
      "post": {
        "summary": "Hangup call",
        "description": "Hang up the call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.recording.saved`\n",
        "operationId": "callHangup",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Hangup request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HangupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/leave_queue": {
      "post": {
        "summary": "Remove call from a queue",
        "description": "Removes the call from a queue.",
        "operationId": "leaveQueue",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Removes the call from the queue, the call currently is enqueued in.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveQueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_start": {
      "post": {
        "summary": "Play audio URL",
        "description": "Play an audio file on the call. If multiple play audio commands are issued consecutively,\nthe audio files will be placed in a queue awaiting playback.\n\n*Notes:*\n\n- When `overlay` is enabled, `target_legs` is limited to `self`.\n- A customer cannot Play Audio with `overlay=true` unless there is a Play Audio with `overlay=false` actively playing.\n\n**Expected Webhooks:**\n\n- `call.playback.started`\n- `call.playback.ended`\n",
        "operationId": "callPlaybackStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Play audio URL request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayAudioUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_stop": {
      "post": {
        "summary": "Stop audio playback",
        "description": "Stop audio being played on the call.\n\n**Expected Webhooks:**\n\n- `call.playback.ended` or `call.speak.ended`\n",
        "operationId": "callPlaybackStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop audio playback request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybackStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_pause": {
      "post": {
        "summary": "Record pause",
        "description": "Pause recording the call. Recording can be resumed via Resume recording command.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordPause",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Pause recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_resume": {
      "post": {
        "summary": "Record resume",
        "description": "Resume recording the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callRecordResume",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Resume recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_start": {
      "post": {
        "summary": "Recording start",
        "description": "Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start recording audio request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_stop": {
      "post": {
        "summary": "Recording stop",
        "description": "Stop recording the call.\n\n**Expected Webhooks:**\n\n- `call.recording.saved`\n",
        "operationId": "callRecordStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop recording call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/refer": {
      "post": {
        "summary": "SIP Refer a call",
        "description": "Initiate a SIP Refer on a Call Control call. You can initiate a SIP Refer at any point in the duration of a call.\n\n**Expected Webhooks:**\n\n- `call.refer.started`\n- `call.refer.completed`\n- `call.refer.failed`\n",
        "operationId": "callRefer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Refer request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callReferStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferCompleted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferCompletedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferFailedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/reject": {
      "post": {
        "summary": "Reject a call",
        "description": "Reject an incoming call.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n",
        "operationId": "callReject",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Reject request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/send_dtmf": {
      "post": {
        "summary": "Send DTMF",
        "description": "Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "callSendDTMF",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Send DTMF request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDTMFRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/speak": {
      "post": {
        "summary": "Speak text",
        "description": "Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.\n\n**Expected Webhooks:**\n\n- `call.speak.started`\n- `call.speak.ended`\n",
        "operationId": "callSpeak",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Speak request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_start": {
      "post": {
        "summary": "Transcription start",
        "description": "Start real-time transcription. Transcription will stop on call hang-up, or can be initiated via the Transcription stop command.",
        "operationId": "callTranscriptionStart",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription start request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "transcription": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TranscriptionEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_stop": {
      "post": {
        "summary": "Transcription stop",
        "description": "Stop real-time transcription.",
        "operationId": "callTranscriptionStop",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription stop request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transfer": {
      "post": {
        "summary": "Transfer call",
        "description": "Transfer a call to a new destination. If the transfer is unsuccessful, a `call.hangup` webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.\n\n**Expected Webhooks:**\n\n- `call.initiated`\n- `call.bridged` to Leg B\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was set to `detect_beep`, `greeting_end` or `detect_words`",
        "operationId": "callTransfer",
        "tags": [
          "Call Commands"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transfer call request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences": {
      "get": {
        "x-latency-category": "responsive",
        "description": "Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by `expires_at`.",
        "summary": "List conferences",
        "operationId": "listConferences",
        "tags": [
          "Conference Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterConferenceName"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        }
      },
      "post": {
        "summary": "Create conference",
        "description": "Create a conference from an existing call leg using a `call_control_id` and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.\n\n**Expected Webhooks:**\n\n- `conference.created`\n- `conference.participant.joined`\n- `conference.participant.left`\n- `conference.ended`\n- `conference.recording.saved`\n- `conference.floor.changed`\n",
        "operationId": "createConference",
        "tags": [
          "Conference Commands"
        ],
        "requestBody": {
          "description": "Create a conference",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceCreated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceCreatedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceFloorChanged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceFloorChangedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{conference_id}/participants": {
      "get": {
        "description": "Lists conference participants",
        "summary": "List conference participants",
        "operationId": "listConferenceParticipants",
        "tags": [
          "Conference Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "conference_id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[muted]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not muted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[on_hold]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not put on hold",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[whispering]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are whispering or are not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListParticipantsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}": {
      "get": {
        "summary": "Retrieve a conference",
        "description": "Retrieve an existing conference",
        "operationId": "retrieveConference",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/dial_participant": {
      "post": {
        "x-latency-category": "interactive",
        "summary": "Dial a new participant into a conference",
        "description": "Dials a phone number and, when the call is answered, automatically joins them into the specified conference.\n\n**Expected Webhooks:**\n\n- `call.hangup`\n- `call.answered`\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceDialParticipantIn",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Dial Into Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conferences/{id}/actions/hold": {
      "post": {
        "summary": "Hold conference participants",
        "description": "Hold a list of participants in a conference call",
        "operationId": "conferenceHoldParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceHoldRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/join": {
      "post": {
        "summary": "Join a conference",
        "description": "Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the `call_control_id` of the leg you wish to join to the conference as an attribute.\n\n**Expected Webhooks:**\n\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "conferenceJoin",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Join Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/mute": {
      "post": {
        "summary": "Mute conference participants",
        "description": "Mute a list of participants in a conference call",
        "operationId": "conferenceMuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceMuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/play": {
      "post": {
        "summary": "Play audio to conference participants",
        "description": "Play audio to all or some participants on a conference call.",
        "operationId": "conferencePlayAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferencePlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferencePlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferencePlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_start": {
      "post": {
        "summary": "Conference recording start",
        "description": "Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`",
        "operationId": "conferenceStartRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to record by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_stop": {
      "post": {
        "summary": "Conference recording stop",
        "description": "Stop recording the conference.\n\n**Expected Webhooks:**\n\n- `conference.recording.saved`\n",
        "operationId": "conferenceStopRecording",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference to stop the recording for by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Stop recording conference request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceRecordingSavedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/speak": {
      "post": {
        "summary": "Speak text to conference participants",
        "description": "Convert text to speech and play it to all or some participants.",
        "operationId": "conferenceSpeakText",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Specifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakStartedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/stop": {
      "post": {
        "summary": "Stop audio being played on the conference",
        "description": "Stop audio being played to all or some participants on a conference call.",
        "operationId": "conferenceStopAudio",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unhold": {
      "post": {
        "summary": "Unhold conference participants",
        "description": "Unhold a list of participants in a conference call",
        "operationId": "conferenceUnholdParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnholdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unmute": {
      "post": {
        "summary": "Unmute conference participants",
        "description": "Unmute a list of participants in a conference call",
        "operationId": "conferenceUnmuteParticipants",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnmuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/update": {
      "post": {
        "summary": "Update conference participant",
        "description": "Update conference participant supervisor_role",
        "operationId": "conferenceUpdate",
        "tags": [
          "Conference Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the conference by id or name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Conference request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/connections": {
      "get": {
        "description": "Returns a list of your connections irrespective of type.",
        "summary": "List connections",
        "operationId": "listConnections",
        "tags": [
          "Connections"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConnectionsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/connections/{id}": {
      "get": {
        "description": "Retrieves the high-level details of an existing connection. To retrieve specific authentication information, use the endpoint for the specific connection type.",
        "summary": "Retrieve a connection",
        "operationId": "retrieveConnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/credential_connections": {
      "get": {
        "description": "Returns a list of your credential connections.",
        "summary": "List credential connections",
        "operationId": "listCredentialConnections",
        "tags": [
          "Credential Connections"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterInnerOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCredentialConnectionsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates a credential connection.",
        "summary": "Create a credential connection",
        "operationId": "createCredentialConnection",
        "tags": [
          "Credential Connections"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during credential connection creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/credential_connections/{id}": {
      "delete": {
        "description": "Deletes an existing credential connection.",
        "summary": "Delete a credential connection",
        "operationId": "deleteCredentialConnection",
        "tags": [
          "Credential Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing credential connection.",
        "summary": "Retrieve a credential connection",
        "operationId": "retrieveCredentialConnection",
        "tags": [
          "Credential Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing credential connection.",
        "summary": "Update a credential connection",
        "operationId": "updateCredentialConnection",
        "tags": [
          "Credential Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a credential connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCredentialConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/detail_records": {
      "get": {
        "tags": [
          "Detail Records"
        ],
        "summary": "Search detail records",
        "description": "Search for any detail record across the Telnyx Platform",
        "operationId": "DetailRecordsSearch",
        "parameters": [
          {
            "name": "filter[record_type]",
            "in": "query",
            "description": "Filter by the given record type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "filter[record_type]=messaging": {
                "value": "messaging",
                "summary": "Searches for messaging detail records"
              }
            }
          },
          {
            "name": "filter[date_range]",
            "in": "query",
            "description": "Filter by the given user-friendly date range",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "filter[date_range]=today": {
                "value": "today",
                "summary": "Searches for records with timestamp starting at `00:00:00` of the current day"
              },
              "filter[date_range]=last_3_days": {
                "value": "last_3_days",
                "summary": "Searches for records with timestamp starting at `00:00:00` since 3 days ago"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter records",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": true
            },
            "examples": {
              "filter[created_at][gte]=2021-06-22": {
                "value": "2021-06-22",
                "summary": "Searches for records with `created_at` starting at `2021-06-22`"
              },
              "filter[created_at][lt]=2021-06-23": {
                "value": "2021-06-23",
                "summary": "Searches for records with `created_at` ending at `2021-06-22`"
              },
              "filter[direction]=inbound": {
                "value": "inbound",
                "summary": "Searches for records which have the property `direction` equal to `inbound`"
              },
              "filter[cld][starts_with]=123": {
                "value": "123",
                "summary": "Searches for records which have the property `cld` starting with the prefix `123`"
              },
              "filter[cld][ends_with]=789": {
                "value": "789",
                "summary": "Searches for records which have the property `cld` ending with the suffix `789`"
              },
              "filter[cld][contains]=456": {
                "value": "456",
                "summary": "Searches for records which have the property `cld` containing the pattern `456`"
              }
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "sort",
            "description": "Specifies the sort order for results",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "sort=created_at": {
                "value": "created_at",
                "summary": "Sorts search results using the `created_at` date-time in ascending order"
              },
              "sort=-created_at": {
                "value": "created_at",
                "summary": "Sorts search results using the `created_at` date-time in descending order"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailRecordsSearchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/document_links": {
      "get": {
        "summary": "List all document links",
        "description": "List all documents links ordered by created_at descending.",
        "operationId": "listDocumentLinks",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/DocServiceDocumentIdFilter"
          },
          {
            "$ref": "#/components/parameters/LinkedRecordTypeFilter"
          },
          {
            "$ref": "#/components/parameters/LinkedResourceIdFilter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListDocServiceDocumentLinksResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/documents": {
      "get": {
        "summary": "List all documents",
        "description": "List all documents ordered by created_at descending.",
        "operationId": "listDocuments",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListDocServiceDocumentsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Upload a document",
        "description": "Upload a document.<br /><br />Uploaded files must be linked to a service within 30 minutes or they will be automatically deleted.",
        "operationId": "createDocument",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocServiceDocumentRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateMultiPartDocServiceDocumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocServiceDocumentResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/documents/{id}": {
      "delete": {
        "summary": "Delete a document",
        "description": "Delete a document.<br /><br />A document can only be deleted if it's not linked to a service. If it is linked to a service, it must be unlinked prior to deleting.",
        "operationId": "deleteDocument",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocServiceDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Retrieve a document",
        "description": "Retrieve a document.",
        "operationId": "retrieveDocument",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocServiceDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a document",
        "description": "Update a document.",
        "operationId": "updateDocument",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocServiceDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocServiceDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/documents/{id}/download": {
      "get": {
        "summary": "Download a document",
        "description": "Download a document.",
        "operationId": "downloadDocServiceDocument",
        "x-latency-category": "responsive",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadDocServiceDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/fax_applications": {
      "get": {
        "description": "This endpoint returns a list of your Fax Applications inside the 'data' attribute of the response. You can adjust which applications are listed by using filters. Fax Applications are used to configure how you send and receive faxes using the Programmable Fax API with Telnyx.",
        "summary": "List all Fax Applications",
        "operationId": "listFaxApplications",
        "tags": [
          "Programmable Fax Applications"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterApplicationName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllFaxApplicationsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates a new Fax Application based on the parameters sent in the request. The application name and webhook URL are required. Once created, you can assign phone numbers to your application using the `/phone_numbers` endpoint.",
        "summary": "Creates a Fax Application",
        "operationId": "CreateFaxApplication",
        "tags": [
          "Programmable Fax Applications"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be set when creating a Fax Application",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFaxApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fax_applications/{id}": {
      "delete": {
        "description": "Permanently deletes a Fax Application. Deletion may be prevented if the application is in use by phone numbers.",
        "summary": "Deletes a Fax Application",
        "operationId": "DeleteFaxApplication",
        "tags": [
          "Programmable Fax Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Return the details of an existing Fax Application inside the 'data' attribute of the response.",
        "summary": "Retrieve a Fax Application",
        "operationId": "getFaxApplication",
        "tags": [
          "Programmable Fax Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing Fax Application based on the parameters of the request.",
        "summary": "Update a Fax Application",
        "operationId": "UpdateFaxApplication",
        "tags": [
          "Programmable Fax Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters to be updated for the Fax Application",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFaxApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes": {
      "get": {
        "summary": "View a list of faxes",
        "description": "",
        "operationId": "ListFaxes",
        "x-latency-category": "background",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after or on that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created on or before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.521992Z"
            }
          },
          {
            "name": "filter[direction][eq]",
            "in": "query",
            "description": "The direction, inbound or outbound, for filtering faxes sent from this account",
            "schema": {
              "type": "string",
              "example": "inbound"
            }
          },
          {
            "name": "filter[from][eq]",
            "in": "query",
            "description": "The phone number, in E.164 format for filtering faxes sent from this number",
            "schema": {
              "type": "string",
              "example": "+13127367276"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Number of fax resourcxes for the single page returned",
            "schema": {
              "type": "integer",
              "example": 2
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Number of the page to be retrieved",
            "schema": {
              "type": "integer",
              "example": 2
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFaxesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Send a fax",
        "operationId": "SendFax",
        "description": "",
        "tags": [
          "Programmable Fax Commands"
        ],
        "requestBody": {
          "description": "Send fax request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SendFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "fax.queued": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxQueued"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.media.processed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxMediaProcessed"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.sending.started": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxSendingStarted"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.delivered": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxDelivered"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.failed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxFailed"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}": {
      "delete": {
        "summary": "Delete a fax",
        "operationId": "DeleteFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "View a fax",
        "operationId": "ViewFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}/actions/refresh": {
      "post": {
        "summary": "Refresh a fax",
        "description": "Refreshes the inbound fax's media_url when it has expired",
        "operationId": "RefreshFax",
        "tags": [
          "Programmable Fax Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RefreshFaxResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdn_connections": {
      "get": {
        "description": "Returns a list of your FQDN connections.",
        "summary": "List FQDN connections",
        "operationId": "listFqdnConnections",
        "tags": [
          "FQDN Connections"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFqdnConnectionsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates a FQDN connection.",
        "summary": "Create an FQDN connection",
        "operationId": "createFqdnConnection",
        "tags": [
          "FQDN Connections"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during FQDN connection creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFqdnConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdn_connections/{id}": {
      "delete": {
        "description": "Deletes an FQDN connection.",
        "summary": "Delete an FQDN connection",
        "operationId": "deleteFqdnConnection",
        "tags": [
          "FQDN Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FQDN Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing FQDN connection.",
        "summary": "Retrieve an FQDN connection",
        "operationId": "retrieveFqdnConnection",
        "tags": [
          "FQDN Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FQDN Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing FQDN connection.",
        "summary": "Update an FQDN connection",
        "operationId": "updateFqdnConnection",
        "tags": [
          "FQDN Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FQDN Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a FQDN connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFqdnConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdns": {
      "get": {
        "summary": "List FQDNs",
        "description": "Get all FQDNs belonging to the user that match the given filters.",
        "operationId": "listFqdns",
        "tags": [
          "FQDNs"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[connection_id]",
            "description": "ID of the FQDN connection to which the FQDN belongs.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[fqdn]",
            "description": "FQDN represented by the resource.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "filter[port]",
            "description": "Port to use when connecting to the FQDN.",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 5060
            }
          },
          {
            "name": "filter[dns_record_type]",
            "description": "DNS record type used by the FQDN.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "a"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFqdnsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create a new FQDN object.",
        "summary": "Create an FQDN",
        "operationId": "createFqdn",
        "tags": [
          "FQDNs"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFqdnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdns/{id}": {
      "delete": {
        "description": "Delete an FQDN.",
        "summary": "Delete an FQDN",
        "operationId": "deleteFqdn",
        "tags": [
          "FQDNs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Return the details regarding a specific FQDN.",
        "summary": "Retrieve an FQDN",
        "operationId": "retrieveFqdn",
        "tags": [
          "FQDNs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update the details of a specific FQDN.",
        "summary": "Update an FQDN",
        "operationId": "updateFqdn",
        "tags": [
          "FQDNs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFqdnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ip_connections": {
      "get": {
        "description": "Returns a list of your IP connections.",
        "summary": "List Ip connections",
        "operationId": "listIpConnections",
        "tags": [
          "IP Connections"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterInnerOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListIpConnectionsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates an IP connection.",
        "summary": "Create an Ip connection",
        "operationId": "createIpConnection",
        "tags": [
          "IP Connections"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during IP connection creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ip_connections/{id}": {
      "delete": {
        "description": "Deletes an existing IP connection.",
        "summary": "Delete an Ip connection",
        "operationId": "deleteIpConnection",
        "tags": [
          "IP Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing ip connection.",
        "summary": "Retrieve an Ip connection",
        "operationId": "retrieveIpConnection",
        "tags": [
          "IP Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing IP connection.",
        "summary": "Update an Ip connection",
        "operationId": "updateIpConnection",
        "tags": [
          "IP Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a IP connection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIpConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ips": {
      "get": {
        "summary": "List Ips",
        "description": "Get all IPs belonging to the user that match the given filters.",
        "operationId": "listIps",
        "tags": [
          "IPs"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[connection_id]",
            "description": "ID of the IP Connection to which this IP should be attached.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[ip_address]",
            "description": "IP adddress represented by this resource.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "192.168.0.0"
            }
          },
          {
            "name": "filter[port]",
            "description": "Port to use when connecting to this IP.",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 5060
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListIpsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create a new IP object.",
        "summary": "Create an Ip",
        "operationId": "createIp",
        "tags": [
          "IPs"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ips/{id}": {
      "delete": {
        "description": "Delete an IP.",
        "summary": "Delete an Ip",
        "operationId": "deleteIp",
        "tags": [
          "IPs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Return the details regarding a specific IP.",
        "summary": "Retrieve an Ip",
        "operationId": "retrieveIp",
        "tags": [
          "IPs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update the details of a specific IP.",
        "summary": "Update an Ip",
        "operationId": "updateIp",
        "tags": [
          "IPs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ledger_billing_group_reports": {
      "post": {
        "summary": "Create a ledger billing group report",
        "operationId": "createLedgerBillingGroupReport",
        "x-latency-category": "background",
        "tags": [
          "Reports"
        ],
        "requestBody": {
          "description": "New ledger billing group report parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewLedgerBillingGroupReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateLedgerBillingGroupReportResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/ledger_billing_group_reports/{id}": {
      "get": {
        "summary": "Retrieve a ledger billing group report",
        "operationId": "retrieveLedgerBillingGroupReport",
        "x-latency-category": "background",
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LedgerBillingGroupReportId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveLedgerBillingGroupReportResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/managed_accounts": {
      "get": {
        "summary": "Lists accounts managed by the current user.",
        "description": "Lists the accounts managed by the current user. Users need to be explictly approved by Telnyx in order to become manager accounts.",
        "operationId": "listManagedAccounts",
        "tags": [
          "Managed Accounts"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterEmailContains"
          },
          {
            "$ref": "#/components/parameters/FilterEmailEq"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListManagedAccountsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a new managed account.",
        "description": "Create a new managed account owned by the authenticated user. You need to be explictly approved by Telnyx in order to become a manager account.",
        "operationId": "createManagedAccount",
        "tags": [
          "Managed Accounts"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that define the managed account to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManagedAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}": {
      "get": {
        "description": "Retrieves the details of a single managed account.",
        "summary": "Retrieve a managed account",
        "operationId": "retrieveManagedAccount",
        "tags": [
          "Managed Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}/actions/disable": {
      "post": {
        "summary": "Disables a managed account",
        "description": "Disables a managed account, forbidding it to use Telnyx services, including sending or receiving phone calls and SMS messages. Ongoing phone calls will not be affected. The managed account and its sub-users will still be able to log in via the mission control portal.",
        "operationId": "disableManagedAccount",
        "tags": [
          "Managed Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}/actions/enable": {
      "post": {
        "summary": "Enables a managed account",
        "description": "Enables a managed account and its sub-users to use Telnyx services.",
        "operationId": "enableManagedAccount",
        "tags": [
          "Managed Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/media": {
      "get": {
        "summary": "List uploaded media",
        "description": "Returns a list of stored media files.",
        "operationId": "listMedia",
        "tags": [
          "Media Storage API"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "post": {
        "summary": "Upload media",
        "description": "Upload media file to Telnyx so it can be used with other Telnyx services",
        "operationId": "createMedia",
        "tags": [
          "Media Storage API"
        ],
        "requestBody": {
          "description": "Upload media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}": {
      "delete": {
        "summary": "Deletes stored media",
        "description": "Deletes a stored media file.",
        "operationId": "deleteMedia",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "204": {
            "description": "The media was deleted successfully."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "summary": "Retrieve stored media",
        "description": "Returns the information about a stored media file.",
        "operationId": "getMedia",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "put": {
        "summary": "Update stored media",
        "description": "Updates a stored media file.",
        "operationId": "updateMedia",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "requestBody": {
          "description": "Update media request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}/download": {
      "get": {
        "summary": "Download stored media",
        "description": "Downloads a stored media file.",
        "operationId": "downloadMedia",
        "tags": [
          "Media Storage API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/message_detail_records": {
      "get": {
        "tags": [
          "MDR Search (Beta)"
        ],
        "summary": "Fetch messaging detail records.",
        "description": "Fetch all Mdr records ",
        "operationId": "getPaginatedMdrs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Message uuid",
              "example": "e093fbe0-5bde-11eb-ae93-0242ac130002"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Direction"
            }
          },
          {
            "name": "outbound_profile_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Configured profile id. New profiles can be created and configured on Telnyx portal",
              "example": "30ef55db-c4a2-4c4a-9804-a68077973d07"
            }
          },
          {
            "name": "cld",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Destination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "cli",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Origination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MessageStatus"
            }
          },
          {
            "name": "message_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MessageType"
            }
          },
          {
            "name": "country_iso",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Destination number ISO country code",
              "example": "US"
            }
          },
          {
            "name": "error",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Reported error code",
              "example": "40001"
            }
          },
          {
            "name": "normalized_carrier",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Carrier",
              "example": "Verizon"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Specified tag",
              "example": "Tag1"
            }
          },
          {
            "name": "mcc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile country code",
              "example": "204"
            }
          },
          {
            "name": "mnc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile network code",
              "example": "01"
            }
          },
          {
            "name": "product",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20,
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Field used to order the data. If no field is specified, default value is 'created_at'",
              "example": "created_at",
              "default": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/message_detail_records/{id}/message_body": {
      "get": {
        "tags": [
          "MDR Search (Beta)"
        ],
        "summary": "Fetch message body by id.",
        "description": "Fetch Mdr message body ",
        "operationId": "getMdrMessageBody",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Message unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ee5d9b20-15db-4b86-a5d7-9c32bfa7b47e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrMessageBodyResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/messages": {
      "post": {
        "summary": "Send a message",
        "description": "Send a message with a Phone Number, Alphanumeric Sender ID, Short Code or Number Pool.\n\nThis endpoint allows you to send a message with any messaging resource.\nCurrent messaging resources include: long-code, short-code, number-pool, and\nalphanumeric-sender-id.\n",
        "operationId": "createMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/long_code": {
      "post": {
        "summary": "Send a long code message",
        "operationId": "createLongCodeMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLongCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/number_pool": {
      "post": {
        "summary": "Send a message using number pool",
        "operationId": "createNumberPoolMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberPoolMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/short_code": {
      "post": {
        "summary": "Send a short code message",
        "operationId": "createShortCodeMessage",
        "tags": [
          "Messages"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/{id}": {
      "get": {
        "summary": "Retrieve a message",
        "description": "Note: This API endpoint can only retrieve messages that are no older than 10 days since their creation. If you require messages older than this, please generate an [MDR report.](https://developers.telnyx.com/docs/api/v1/reports/MDR-Reports)",
        "operationId": "retrieveMessage",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the message",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders": {
      "get": {
        "summary": "List messaging hosted number orders",
        "operationId": "listMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingHostedNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a messaging hosted number order",
        "operationId": "createMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingHostedNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}": {
      "get": {
        "summary": "Retrieve a messaging hosted number order",
        "operationId": "retrieveMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}/actions/file_upload": {
      "post": {
        "summary": "Upload file required for a messaging hosted number order",
        "operationId": "uploadFileMessagingHostedNumberOrder",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileMessagingHostedNumberOrderRequest"
              },
              "encoding": {
                "loa": {
                  "contentType": "application/pdf"
                },
                "bill": {
                  "contentType": "application/pdf"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_numbers/{id}": {
      "delete": {
        "summary": "Delete a messaging hosted number",
        "operationId": "deleteMessagingHostedNumber",
        "tags": [
          "Messaging Hosted Number"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profile_metrics": {
      "get": {
        "summary": "List messaging profile metrics",
        "operationId": "listMessagingProfileMetrics",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetric"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles": {
      "get": {
        "summary": "List messaging profiles",
        "operationId": "listMessagingProfiles",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a messaging profile",
        "operationId": "createMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "New Messaging Profile object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "inboundMessage": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "replacedLinkClick": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ReplacedLinkClickEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}": {
      "delete": {
        "summary": "Delete a messaging profile",
        "operationId": "deleteMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve a messaging profile",
        "operationId": "retrieveMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a messaging profile",
        "operationId": "updateMessagingProfile",
        "tags": [
          "Messaging Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "requestBody": {
          "description": "New Messaging Profile object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/metrics": {
      "get": {
        "summary": "Retrieve messaging profile metrics",
        "operationId": "retrieveMessagingProfileDetailedMetrics",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/phone_numbers": {
      "get": {
        "summary": "List phone numbers associated with a messaging profile",
        "operationId": "listMessagingProfilePhoneNumbers",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/short_codes": {
      "get": {
        "summary": "List short codes associated with a messaging profile",
        "operationId": "listMessagingProfileShortCodes",
        "tags": [
          "Messaging Profiles"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_url_domains": {
      "get": {
        "summary": "List messaging URL domains",
        "operationId": "listMessagingUrlDomains",
        "tags": [
          "Messaging URL Domains"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingUrlDomains"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/mobile_operator_networks": {
      "get": {
        "summary": "List mobile operator networks",
        "description": "Telnyx has a set of GSM mobile operators partners that are available through our mobile network roaming. This resource is entirely managed by Telnyx and may change over time. That means that this resource won't allow any write operations for it. Still, it's available so it can be used as a support resource that can be related to other resources or become a configuration option.",
        "operationId": "MobileOperatorNetworksGet",
        "tags": [
          "Mobile Operator Networks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name][starts_with]",
            "description": "Filter by name starting with.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "AT"
            }
          },
          {
            "name": "filter[name][contains]",
            "description": "Filter by name containing match.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "T&T"
            }
          },
          {
            "name": "filter[name][ends_with]",
            "description": "Filter by name ending with.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "T"
            }
          },
          {
            "name": "filter[country_code]",
            "description": "Filter by exact country_code.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "filter[mcc]",
            "description": "Filter by exact MCC.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "310"
            }
          },
          {
            "name": "filter[mnc]",
            "description": "Filter by exact MNC.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "410"
            }
          },
          {
            "name": "filter[tadig]",
            "description": "Filter by exact TADIG.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "USACG"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchMobileOperatorNetworksResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_channels": {
      "get": {
        "description": "List notification channels.",
        "summary": "List notification channels",
        "operationId": "listNotificationChannels",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/ChannelTypeId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification channels.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationChannel"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create a notification channel.",
        "summary": "Create a notification channel",
        "operationId": "createNotificationChannels",
        "tags": [
          "Notifications"
        ],
        "requestBody": {
          "description": "Add a Notification Channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_channels/{id}": {
      "delete": {
        "description": "Delete a notification channel.",
        "summary": "Delete a notification channel",
        "operationId": "deleteNotificationChannel",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieve a notification channel.",
        "summary": "Retrieve a notification channel",
        "operationId": "retrieveNotificationChannel",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update a notification channel.",
        "summary": "Update a notification channel",
        "operationId": "updateNotificationChannel",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "description": "Update notification channel object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_event_conditions": {
      "get": {
        "description": "Returns a list of your notifications events conditions.",
        "summary": "List all Notifications Events Conditions",
        "operationId": "findNotificationsEventsConditions",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/AssociatedRecordType"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification event conditions available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationEventCondition"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_events": {
      "get": {
        "description": "Returns a list of your notifications events.",
        "summary": "List all Notifications Events",
        "operationId": "findNotificationsEvents",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification events available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationEvent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_profiles": {
      "get": {
        "description": "Returns a list of your notifications profiles.",
        "summary": "List all Notifications Profiles",
        "operationId": "findNotificationsProfiles",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationProfile"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create a notification profile.",
        "summary": "Create a notification profile",
        "operationId": "createNotificationProfile",
        "tags": [
          "Notifications"
        ],
        "requestBody": {
          "description": "Add a Notification Profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_profiles/{id}": {
      "delete": {
        "description": "Delete a notification profile.",
        "summary": "Delete a notification profile",
        "operationId": "deleteNotificationProfile",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieve a notification profile.",
        "operationId": "retrieveNotificationProfile",
        "summary": "Retrieve a notification profile",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update a notification profile.",
        "operationId": "updateNotificationProfile",
        "summary": "Update a notification profile",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "description": "Update notification profile object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_settings": {
      "get": {
        "description": "List notification settings.",
        "summary": "List notification settings",
        "operationId": "listNotificationSettings",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/NotificationProfileId"
          },
          {
            "$ref": "#/components/parameters/NotificationChannelId"
          },
          {
            "$ref": "#/components/parameters/NotificationEventConditionId"
          },
          {
            "$ref": "#/components/parameters/AssociatedRecordType"
          },
          {
            "$ref": "#/components/parameters/Status"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationSetting"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Add a notification setting.",
        "summary": "Add a Notification Setting",
        "operationId": "createNotificationSetting",
        "tags": [
          "Notifications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "A Notification Setting response - async",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_settings/{id}": {
      "delete": {
        "description": "Delete a notification setting.",
        "summary": "Delete a notification setting",
        "operationId": "deleteNotificationSetting",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "A Notification Setting response - async",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieve a notification setting.",
        "summary": "Retrieve a notification setting",
        "operationId": "retrieveNotificationSetting",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_lookup/{phone_number}": {
      "get": {
        "summary": "Lookup phone number data",
        "description": "Returns information about the provided phone number.",
        "operationId": "NumberLookup",
        "tags": [
          "Number Lookup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PhoneNumber"
          },
          {
            "$ref": "#/components/parameters/NumberLookupType"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberLookupResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_order_documents": {
      "get": {
        "summary": "List number order documents",
        "description": "Gets a paginated list of number order documents.",
        "operationId": "listNumberOrderDocuments",
        "tags": [
          "Number Order Documents"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[requirement_id]",
            "in": "query",
            "description": "Filter number order documents by `requirement_id`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number order documents after this datetime.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number order documents from before this datetime.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberOrderDocumentsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a number order document",
        "description": "Upload a phone number order document.",
        "operationId": "createNumberOrderDocument",
        "tags": [
          "Number Order Documents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberOrderDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_order_documents/{number_order_document_id}": {
      "get": {
        "summary": "Retrieve a number order document",
        "description": "Gets a single number order document.",
        "operationId": "retrieveNumberOrderDocument",
        "tags": [
          "Number Order Documents"
        ],
        "parameters": [
          {
            "name": "number_order_document_id",
            "in": "path",
            "description": "The number order document ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a number order document",
        "description": "Updates a number order document.",
        "operationId": "updateNumberOrderDocument",
        "tags": [
          "Number Order Documents"
        ],
        "parameters": [
          {
            "name": "number_order_document_id",
            "in": "path",
            "description": "The number order document ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNumberOrderDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderDocumentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_orders": {
      "get": {
        "summary": "List number orders",
        "description": "Get a paginated list of number orders.",
        "operationId": "listNumberOrders",
        "tags": [
          "Number Orders"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter number orders by status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number orders later than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number orders earlier than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_numbers.phone_number]",
            "in": "query",
            "description": "Filter number orders having these phone numbers.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter number orders via the customer reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[requirements_met]",
            "in": "query",
            "description": "Filter number orders by requirements met.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a number order",
        "description": "Creates a phone number order.",
        "operationId": "createNumberOrder",
        "tags": [
          "Number Orders"
        ],
        "x-endpoint-cost": "heavy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "numberOrderStatusUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/NumberOrderedEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The server must return a HTTP 200, otherwise we will reattempt to deliver the webhook to the failover URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_orders/{number_order_id}": {
      "get": {
        "summary": "Retrieve a number order",
        "description": "Get an existing phone number order.",
        "operationId": "retrieveNumberOrder",
        "tags": [
          "Number Orders"
        ],
        "parameters": [
          {
            "name": "number_order_id",
            "in": "path",
            "description": "The number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a number order",
        "description": "Updates a phone number order.",
        "operationId": "updateNumberOrder",
        "tags": [
          "Number Orders"
        ],
        "parameters": [
          {
            "name": "number_order_id",
            "in": "path",
            "description": "The number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations": {
      "get": {
        "summary": "List number reservations",
        "description": "Gets a paginated list of phone number reservations.",
        "operationId": "listNumberReservations",
        "tags": [
          "Number Reservations"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter number reservations by status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number reservations later than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number reservations earlier than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_numbers.phone_number]",
            "in": "query",
            "description": "Filter number reservations having these phone numbers.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter number reservations via the customer reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberReservationsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a number reservation",
        "description": "Creates a Phone Number Reservation for multiple numbers.",
        "operationId": "createNumberReservation",
        "tags": [
          "Number Reservations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations/{number_reservation_id}": {
      "get": {
        "summary": "Retrieve a number reservation",
        "description": "Gets a single phone number reservation.",
        "operationId": "retrieveNumberReservation",
        "tags": [
          "Number Reservations"
        ],
        "parameters": [
          {
            "name": "number_reservation_id",
            "in": "path",
            "description": "The number reservation ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations/{number_reservation_id}/actions/extend": {
      "post": {
        "summary": "Extend a number reservation",
        "description": "Extends reservation expiry time on all phone numbers.",
        "operationId": "extendNumberReservationExpiryTime",
        "tags": [
          "Number Reservations"
        ],
        "parameters": [
          {
            "name": "number_reservation_id",
            "in": "path",
            "description": "The number reservation ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ota_updates": {
      "get": {
        "summary": "List OTA updates",
        "operationId": "OTAUpdatesList",
        "tags": [
          "OTA updates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterBasicStatusLifecycle"
          },
          {
            "name": "filter[sim_card_id]",
            "description": "The SIM card identification UUID.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "description": "Filter by type.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "sim_card_network_preferences"
              ],
              "example": "sim_card_network_preferences"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchOTAUpdateResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ota_updates/{id}": {
      "get": {
        "summary": "Get OTA update",
        "description": "This API returns the details of an Over the Air (OTA) update.",
        "operationId": "OTAUpdateGET",
        "tags": [
          "OTA updates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OTAUpdateResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/outbound_voice_profiles": {
      "get": {
        "description": "Get all outbound voice profiles belonging to the user that match the given filters.",
        "summary": "Get all outbound voice profiles",
        "operationId": "listOutboundVoiceProfiles",
        "tags": [
          "Outbound Voice Profiles"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/NameFilter"
          },
          {
            "$ref": "#/components/parameters/SortOutboundVoiceProfile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOutboundVoiceProfilesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create an outbound voice profile.",
        "summary": "Create an outbound voice profile",
        "operationId": "createOutboundVoiceProfile",
        "tags": [
          "Outbound Voice Profiles"
        ],
        "requestBody": {
          "description": "Parameters that can be defined when creating an outbound voice profile",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutboundVoiceProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/outbound_voice_profiles/{id}": {
      "delete": {
        "description": "Deletes an existing outbound voice profile.",
        "summary": "Delete an outbound voice profile",
        "operationId": "deleteOutboundVoiceProfile",
        "tags": [
          "Outbound Voice Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing outbound voice profile.",
        "summary": "Retrieve an outbound voice profile",
        "operationId": "retrieveOutboundVoiceProfile",
        "tags": [
          "Outbound Voice Profiles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates an existing outbound voice profile.",
        "summary": "Updates an existing outbound voice profile.",
        "operationId": "updateOutboundVoiceProfile",
        "tags": [
          "Outbound Voice Profiles"
        ],
        "requestBody": {
          "description": "Parameters that can be updated on an outbound voice profile",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutboundVoiceProfileRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers": {
      "get": {
        "summary": "List phone numbers",
        "operationId": "listPhoneNumbers",
        "tags": [
          "Number Configurations"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by phone number tags.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by phone number status.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "purchase_pending",
                "purchase_failed",
                "port_pending",
                "active",
                "deleted",
                "port_failed",
                "emergency_only",
                "ported_out",
                "port_out_pending"
              ],
              "example": "active"
            }
          },
          {
            "name": "filter[voice.connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][starts_with]",
            "in": "query",
            "description": "Filter starts with connection name. Requires at least three characters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][ends_with]",
            "in": "query",
            "description": "Filter ends with connection name. Requires at least three characters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][eq]",
            "in": "query",
            "description": "Filter by connection name.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "example": "channel"
            }
          },
          {
            "name": "filter[billing_group_id]",
            "in": "query",
            "description": "Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string 'null'.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "62e4bf2e-c278-4282-b524-488d9c9c43b2"
            }
          },
          {
            "name": "filter[emergency_address_id]",
            "in": "query",
            "description": "Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string 'null'.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d{10}",
              "example": "9102160989215728032"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string",
              "example": "MY REF 001"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "purchased_at",
                "phone_number",
                "connection_name",
                "usage_payment_method"
              ],
              "example": "connection_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/csv_downloads": {
      "get": {
        "summary": "List CSV downloads",
        "operationId": "listCsvDownloads",
        "tags": [
          "CSV Downloads"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCsvDownloadsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "x-latency-category": "background",
        "summary": "Create a CSV download",
        "operationId": "createCsvDownload",
        "tags": [
          "CSV Downloads"
        ],
        "x-endpoint-cost": "medium",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CsvDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/phone_numbers/csv_downloads/{id}": {
      "get": {
        "x-latency-category": "background",
        "summary": "Retrieve a CSV download",
        "operationId": "retrieveCsvDownload",
        "tags": [
          "CSV Downloads"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the CSV download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CsvDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/phone_numbers/inbound_channels": {
      "get": {
        "summary": "Retrieve your inbound channels",
        "description": "Returns the inbound channels for your account. Inbound channels allows you to use Channel Billing for calls to your Telnyx phone numbers. Please check the Telnyx Support Articles section for full information and examples of how to utilize Channel Billing.",
        "operationId": "listOutboundChannels",
        "tags": [
          "Inbound Channels"
        ],
        "x-endpoint-cost": "medium",
        "responses": {
          "200": {
            "description": "Inbound Channels Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channels": {
                          "type": "integer",
                          "description": "The current number of concurrent channels set for the account",
                          "example": 7
                        },
                        "record_type": {
                          "description": "Identifies the type of the response",
                          "type": "string",
                          "example": "inbound_channels"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update inbound channels",
        "operationId": "updateOutboundChannels",
        "description": "Update the inbound channels for the account",
        "tags": [
          "Inbound Channels"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "Inbound channels update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "channels"
                ],
                "properties": {
                  "channels": {
                    "type": "integer",
                    "description": "The new number of concurrent channels for the account",
                    "example": 7
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected Update response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "channels": {
                          "type": "integer",
                          "description": "The number of channels set for the account",
                          "example": 7
                        },
                        "record_type": {
                          "description": "Identifies the type of the response",
                          "type": "string",
                          "example": "inbound_channels"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "required": [
                          "code",
                          "title"
                        ],
                        "properties": {
                          "code": {
                            "type": "string",
                            "pattern": "^\\d{4}"
                          },
                          "title": {
                            "type": "string"
                          },
                          "detail": {
                            "type": "string"
                          },
                          "source": {
                            "type": "object",
                            "properties": {
                              "pointer": {
                                "description": "JSON pointer (RFC6901) to the offending entity.",
                                "type": "string",
                                "format": "json-pointer"
                              },
                              "parameter": {
                                "description": "Indicates which query parameter caused the error.",
                                "type": "string"
                              }
                            }
                          },
                          "meta": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/jobs": {
      "get": {
        "summary": "Lists the phone numbers jobs",
        "operationId": "listPhoneNumbersJobs",
        "tags": [
          "Number Background Jobs"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter the phone number jobs by type.",
            "schema": {
              "type": "string",
              "enum": [
                "update_emergency_settings",
                "delete_phone_numbers",
                "update_phone_numbers"
              ],
              "example": "update_emergency_settings",
              "description": "Identifies the type of the background job."
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at"
              ],
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersJobsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/jobs/delete_phone_numbers": {
      "post": {
        "x-latency-category": "background",
        "summary": "Delete a batch of numbers",
        "description": "Creates a new background job to delete a batch of numbers. At most one thousand numbers can be updated per API call.",
        "operationId": "createPhoneNumbersJobDeletePhoneNumbers",
        "tags": [
          "Number Background Jobs"
        ],
        "x-group-parameters": "true",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobDeletePhoneNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers job delete phone numbers requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Numbers Job Delete Phone Numbers",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/phone_numbers/jobs/update_emergency_settings": {
      "post": {
        "x-latency-category": "background",
        "summary": "Update the emergency settings from a batch of numbers",
        "description": "Creates a background job to update the emergency settings of a collection of phone numbers. At most one thousand numbers can be updated per API call.",
        "operationId": "createPhoneNumbersJobUpdateEmergencySettings",
        "tags": [
          "Number Background Jobs"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobUpdateEmergencySettingsRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers enable emergency requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Numbers Enable Emergency",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/phone_numbers/jobs/update_phone_numbers": {
      "post": {
        "x-latency-category": "background",
        "summary": "Update a batch of numbers",
        "description": "Creates a new background job to update a batch of numbers. At most one thousand numbers can be updated per API call. At least one of the updateable fields must be submitted",
        "operationId": "createPhoneNumbersJobUpdatePhoneNumber",
        "tags": [
          "Number Background Jobs"
        ],
        "x-group-parameters": "true",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobUpdatePhoneNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers job update phone numbers requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Numbers Job Update Phone Numbers",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/phone_numbers/jobs/{id}": {
      "get": {
        "summary": "Retrieve a phone numbers job",
        "operationId": "retrievePhoneNumbersJob",
        "tags": [
          "Number Background Jobs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the Phone Numbers Job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-group-parameters": "true",
        "responses": {
          "200": {
            "description": "Phone numbers job details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Numbers Job",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/messaging": {
      "get": {
        "summary": "List phone numbers with messaging settings",
        "operationId": "listPhoneNumbersWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/voice": {
      "get": {
        "summary": "List phone numbers with voice settings",
        "operationId": "listPhoneNumbersWithVoiceSettings",
        "tags": [
          "Number Configurations"
        ],
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "example": "channel"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "purchased_at",
                "phone_number",
                "connection_name",
                "usage_payment_method"
              ],
              "example": "connection_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}": {
      "delete": {
        "summary": "Delete a phone number",
        "operationId": "deletePhoneNumber",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletePhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve a phone number",
        "operationId": "retrievePhoneNumber",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a phone number",
        "operationId": "updatePhoneNumber",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "description": "Updated settings for the phone number.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/actions/enable_emergency": {
      "post": {
        "summary": "Enable emergency for a phone number",
        "operationId": "enableEmergencyPhoneNumber",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberEnableEmergencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number emergency enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Number Enable Emergency",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Phone number emergency requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Phone Number Enable Emergency",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/messaging": {
      "get": {
        "summary": "Retrieve a phone number with messaging settings",
        "operationId": "retrievePhoneNumberWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a phone number with messaging settings",
        "operationId": "updatePhoneNumberWithMessagingSettings",
        "tags": [
          "Number Configurations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated messaging settings for the phone number",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberMessagingSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/voice": {
      "get": {
        "summary": "Retrieve a phone number with voice settings",
        "operationId": "retrievePhoneNumberWithVoiceSettings",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a phone number with voice settings",
        "operationId": "updatePhoneNumberWithVoiceSettings",
        "tags": [
          "Number Configurations"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "description": "Updated voice settings for the phone number.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberVoiceSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers_regulatory_requirements": {
      "get": {
        "summary": "List regulatory requirements per number",
        "description": "Gets a paginated list of phone number regulatory requirements.",
        "operationId": "listPhoneNumberRegulatoryRequirements",
        "tags": [
          "Number Order Regulatory Requirements"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "The list of phone numbers to retrieve regulatory requirements for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumberRegulatoryRequirementsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portability_checks": {
      "post": {
        "summary": "Run a portability check",
        "tags": [
          "Phone Number Porting"
        ],
        "description": "Runs a portability check, returning the results immediately.",
        "operationId": "postPortabilityCheck",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone_numbers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of +E.164 formatted phone numbers to check for portability",
                    "example": [
                      "+13035550000",
                      "+13035550001",
                      "+13035550002"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PortabilityCheckResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders": {
      "get": {
        "summary": "List all porting orders",
        "tags": [
          "Porting Order"
        ],
        "description": "Returns a list of your porting order.",
        "operationId": "listPortingOrders",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/QueryIncludePhoneNumbers"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderStatus"
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter results by user reference",
            "example": "123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_numbers][carrier_name]",
            "in": "query",
            "description": "Filter results by old service provider",
            "example": "Telnyx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[misc][type]",
            "in": "query",
            "example": "full",
            "description": "Filter results by porting order type",
            "schema": {
              "$ref": "#/components/schemas/PortingOrderType"
            }
          },
          {
            "name": "filter[end_user][admin][entity_name]",
            "in": "query",
            "description": "Filter results by person or company name",
            "example": "Porter McPortersen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[end_user][admin][auth_person_name]",
            "in": "query",
            "example": "Admin McPortersen",
            "description": "Filter results by authorized person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[activation_settings][fast_port_eligible]",
            "in": "query",
            "description": "Filter results by fast port eligible",
            "example": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[activation_settings][foc_datetime_requested][gt]",
            "in": "query",
            "description": "Filter results by foc date later than this value",
            "example": "2021-03-25T10:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[activation_settings][foc_datetime_requested][lt]",
            "in": "query",
            "description": "Filter results by foc date earlier than this value",
            "example": "2021-03-25T10:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "activation_settings.foc_datetime_requested",
                "-activation_settings.foc_datetime_requested"
              ],
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a porting order",
        "tags": [
          "Porting Order"
        ],
        "description": "Creates a new porting order object.",
        "operationId": "createPortingOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortingOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ListPortingOrderWithoutPagination"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}": {
      "delete": {
        "summary": "Request cancellation",
        "tags": [
          "Porting Order"
        ],
        "description": "Request the cancellation of a porting order.",
        "operationId": "deletePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Retrieve a porting order",
        "tags": [
          "Porting Order"
        ],
        "description": "Retrieves the details of an existing porting order.",
        "operationId": "getPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/QueryIncludePhoneNumbers"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Edit a porting order",
        "tags": [
          "Porting Order"
        ],
        "description": "Edits the details of an existing porting order.\n\nAny or all of a porting order\u2019s attributes may be included in the resource object included in a PATCH request.\n\nIf a request does not include all of the attributes for a resource, the system will interpret the missing attributes as if they were included with their current values. To explicitly set something to null, it must be included in the request with a null value.",
        "operationId": "updatePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortingOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/cancel": {
      "post": {
        "summary": "Cancel this porting order",
        "tags": [
          "Porting Order"
        ],
        "description": "Cancel this porting order",
        "operationId": "cancelPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/confirm": {
      "post": {
        "summary": "Confirms the porting order is ready to be actioned.",
        "tags": [
          "Porting Order"
        ],
        "description": "Confirm your porting order.",
        "operationId": "confirmPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/loa_template": {
      "get": {
        "summary": "Download a porting order loa template",
        "tags": [
          "Porting Order"
        ],
        "description": "Download a porting order loa template",
        "operationId": "getPortingOrderLOATemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadLOATemplate"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_phone_numbers": {
      "get": {
        "summary": "List all porting phone numbers",
        "tags": [
          "Porting Order"
        ],
        "description": "Returns a list of your porting phone numbers.",
        "operationId": "listPhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumber"
          },
          {
            "$ref": "#/components/parameters/FilterByActivationStatus"
          },
          {
            "$ref": "#/components/parameters/FilterByPortabilityStatus"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbers"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts": {
      "get": {
        "summary": "Retrieve a list of portout requests",
        "description": "Returns the portout requests according to filters",
        "operationId": "listPortoutRequest",
        "tags": [
          "Number Portout"
        ],
        "parameters": [
          {
            "name": "filter[carrier_name]",
            "in": "query",
            "description": "Filter by new carrier name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[spid]",
            "in": "query",
            "description": "Filter by new carrier spid.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by portout status.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "authorized",
                "ported",
                "rejected",
                "rejected-pending",
                "canceled"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}": {
      "get": {
        "summary": "Retrieve a portout request",
        "description": "Returns the portout request based on the ID provided",
        "operationId": "findPortoutRequest",
        "tags": [
          "Number Portout"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PortoutResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}/comments": {
      "get": {
        "summary": "List all comments for a portout request",
        "description": "Returns a list of comments for a portout request.",
        "operationId": "findPortoutComments",
        "tags": [
          "Number Portout"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutComments"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a comment on a portout request",
        "description": "Creates a comment on a portout request.",
        "operationId": "postPortRequestComment",
        "tags": [
          "Number Portout"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Comment to post on this portout request"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PortoutCommentResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}/{status}": {
      "patch": {
        "summary": "Update Status",
        "description": "Authorize or reject portout request",
        "operationId": "updatePortoutRequest",
        "tags": [
          "Number Portout"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "description": "Updated portout status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "authorized",
                "rejected"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PortoutResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity. Check message field in response for details."
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/private_wireless_gateways": {
      "get": {
        "summary": "Get all Private Wireless Gateways",
        "description": "Get all Private Wireless Gateways belonging to the user.",
        "operationId": "getPrivateWirelessGateways",
        "tags": [
          "Private Wireless Gateways"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "description": "The name of the Private Wireless Gateway.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "my private gateway"
          },
          {
            "name": "filter[ip_range]",
            "description": "The IP address range of the Private Wireless Gateway.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "192.168.0.0/24"
          },
          {
            "name": "filter[region_code]",
            "description": "The name of the region where the Private Wireless Gateway is deployed.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ashburn-va"
          },
          {
            "name": "filter[created_at]",
            "description": "Private Wireless Gateway resource creation date.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-02-02T22:25:27.521Z"
          },
          {
            "name": "filter[updated_at]",
            "description": "When the Private Wireless Gateway was last updated.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2018-02-02T22:25:27.521Z"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllPrivateWirelessGatewaysResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "post": {
        "summary": "Create a Private Wireless Gateway",
        "description": "Asynchronously create a Private Wireless Gateway for SIM cards for a previously created network.",
        "operationId": "createPrivateWirelessGateway",
        "tags": [
          "Private Wireless Gateways"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network_id": {
                    "description": "The identification of the related network resource.",
                    "format": "uuid",
                    "type": "string",
                    "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
                  },
                  "name": {
                    "description": "The private wireless gateway name.",
                    "type": "string",
                    "example": "My private wireless gateway"
                  }
                },
                "required": [
                  "network_id",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/CreatePrivateWirelessGatewayResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/private_wireless_gateways/{id}": {
      "delete": {
        "summary": "Delete a Private Wireless Gateway",
        "description": "Deletes the Private Wireless Gateway.",
        "operationId": "deletePrivateWirelessGateway",
        "tags": [
          "Private Wireless Gateways"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletePrivateWirelessGatewayResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Get a Private Wireless Gateway",
        "description": "Retrieve information about a Private Wireless Gateway.",
        "operationId": "getPrivateWirelessGateway",
        "tags": [
          "Private Wireless Gateways"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPrivateWirelessGatewayResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/queues/{queue_name}": {
      "get": {
        "summary": "Retrieve a call queue",
        "description": "Retrieve an existing call queue",
        "operationId": "retrieveCallQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls": {
      "get": {
        "summary": "Retrieve calls from a queue",
        "description": "Retrieve the list of calls in an existing queue",
        "operationId": "listQueueCalls",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListQueueCallsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls/{call_control_id}": {
      "get": {
        "summary": "Retrieve a call from a queue",
        "description": "Retrieve an existing call from an existing queue",
        "operationId": "retrieveCallFromQueue",
        "tags": [
          "Queue Commands"
        ],
        "parameters": [
          {
            "name": "queue_name",
            "description": "Uniquely identifies the queue by name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueCallResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings": {
      "get": {
        "description": "Lists recordings for the authenticated user",
        "summary": "List recordings",
        "operationId": "listRecordings",
        "tags": [
          "Recordings Commands"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[conference_id]",
            "in": "query",
            "description": "Return only recordings associated with a given conference",
            "required": false,
            "schema": {
              "type": "string",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Return only recordings created later than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Return only recordings created earlier than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRecordingsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/recordings/{id}": {
      "get": {
        "description": "Retrieve a recording from the authenticated user's recordings",
        "summary": "Retrieve a recording",
        "operationId": "retrieveRecording",
        "tags": [
          "Recordings Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Uniquely identifies the recording",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/regulatory_requirements": {
      "get": {
        "summary": "List number order regulatory requirements",
        "description": "Gets a paginated list of number order regulatory requirements.",
        "operationId": "listNumberOrderRegulatoryRequirements",
        "tags": [
          "Number Order Regulatory Requirements"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "name": "filter[requirement_id]",
            "in": "query",
            "description": "Filter number order regulatory requirements by `requirement_id`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[field_type]",
            "in": "query",
            "description": "Filter number order regulatory requirements by `field_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[requirement_type]",
            "in": "query",
            "description": "Filter number order regulatory requirements by `requirement_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberOrderRegulatoryRequirementsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/regulatory_requirements/{requirement_id}": {
      "get": {
        "summary": "Retrieve a number order regulatory requirement",
        "description": "Gets a single number order regulatory requirement.",
        "operationId": "retrieveNumberOrderRegulatoryRequirement",
        "tags": [
          "Number Order Regulatory Requirements"
        ],
        "parameters": [
          {
            "name": "requirement_id",
            "in": "path",
            "description": "The number order regulatory requirement ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderRegulatoryRequirementResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/reports/batch_mdr_reports": {
      "get": {
        "tags": [
          "MDR Detail Reports"
        ],
        "description": "Fetch all previous requests for messaging detail reports. Messaging detail reports are reports for pulling all messaging records. ",
        "operationId": "getCdrRequests",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "MDR Detail Reports"
        ],
        "description": "Submit a request for new messaging detail report. Messaging detail report pulls all raw messaging data according to defined filters.",
        "operationId": "submitMdrRequest",
        "requestBody": {
          "description": "Mdr detail request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MdrPostDetailReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrPostDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/batch_mdr_reports/{id}": {
      "delete": {
        "tags": [
          "MDR Detail Reports"
        ],
        "description": "Delete generated messaging detail report by id",
        "operationId": "deleteMdrRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrDeleteDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "MDR Detail Reports"
        ],
        "description": "Fetch single messaging detail report by id.",
        "operationId": "getMdrRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetDetailReportByIdResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/reports/cdr_usage_reports/sync": {
      "get": {
        "tags": [
          "CDR Usage Reports"
        ],
        "description": "Generate and fetch voice usage report synchronously. This endpoint will both generate and fetch the voice report over a specified time period. No polling is necessary but the response may take up to a couple of minutes. ",
        "operationId": "getUsageReportSync",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "aggregation_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "no_aggregation",
              "enum": [
                "NO_AGGREGATION",
                "CONNECTION",
                "TAG",
                "BILLING_GROUP"
              ]
            }
          },
          {
            "name": "product_breakdown",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "no_breakdown",
              "enum": [
                "NO_BREAKDOWN",
                "DID_VS_TOLL_FREE",
                "COUNTRY",
                "DID_VS_TOLL_FREE_PER_COUNTRY"
              ]
            }
          },
          {
            "name": "connections",
            "in": "query",
            "schema": {
              "type": "array",
              "example": 1234567890123,
              "items": {
                "type": "number",
                "example": 1234567890123
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdrGetSyncUsageReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports": {
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "description": "Fetch all messaging usage reports. Usage reports are aggregated messaging data for specified time period and breakdown",
        "operationId": "getUsageReports",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "MDR Usage Reports"
        ],
        "description": "Submit request for new new messaging usage report. This endpoint will pull and aggregate messaging data in specified time period. ",
        "operationId": "submitUsageReport",
        "requestBody": {
          "description": "Mdr usage report data",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MdrPostUsageReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrPostUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports/sync": {
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "description": "Generate and fetch messaging usage report synchronously. This endpoint will both generate and fetch the messaging report over a specified time period. No polling is necessary but the response may take up to a couple of minutes. ",
        "operationId": "getUsageReportSync_1",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "aggregation_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "profile",
              "enum": [
                "NO_AGGREGATION",
                "PROFILE",
                "TAGS"
              ]
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "array",
              "example": "My profile",
              "items": {
                "type": "string",
                "example": "My profile"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetSyncUsageReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports/{id}": {
      "delete": {
        "tags": [
          "MDR Usage Reports"
        ],
        "description": "Delete messaging usage report by id",
        "operationId": "deleteUsageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrDeleteUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "description": "Fetch a single messaging usage report by id",
        "operationId": "getUsageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetUsageReportsByIdResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/reports/mdrs": {
      "get": {
        "tags": [
          "MDR Detail Reports"
        ],
        "description": "Fetch all Mdr records ",
        "operationId": "getPaginatedMdrs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Pagination start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Pagination end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Message uuid",
              "example": "e093fbe0-5bde-11eb-ae93-0242ac130002"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Direction (inbound or outbound)",
              "example": "INBOUND",
              "enum": [
                "INBOUND",
                "OUTBOUND"
              ]
            }
          },
          {
            "name": "profile",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Name of the profile",
              "example": "My profile"
            }
          },
          {
            "name": "cld",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Destination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "cli",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Origination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Message status",
              "example": "DELIVERED",
              "enum": [
                "GW_TIMEOUT",
                "DELIVERED",
                "DLR_UNCONFIRMED",
                "DLR_TIMEOUT",
                "RECEIVED",
                "GW_REJECT",
                "FAILED"
              ]
            }
          },
          {
            "name": "message_type",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Type of message",
              "example": "SMS",
              "enum": [
                "SMS",
                "MMS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/reports/wdrs": {
      "get": {
        "tags": [
          "WDR Detail Reports"
        ],
        "description": "Fetch all Wdr records ",
        "operationId": "getPaginatedWdrs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "example": "2021-05-01T00:00:00Z"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "example": "2021-06-01T00:00:00Z"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "WDR uuid",
              "example": "e093fbe0-5bde-11eb-ae93-0242ac130002"
            }
          },
          {
            "name": "mcc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile country code",
              "example": "204"
            }
          },
          {
            "name": "mnc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile network code",
              "example": "01"
            }
          },
          {
            "name": "imsi",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "International mobile subscriber identity",
              "example": "123456"
            }
          },
          {
            "name": "sim_group_name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim group name",
              "example": "sim name"
            }
          },
          {
            "name": "sim_group_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim group unique identifier",
              "example": "f05a189f-7c46-4531-ac56-1460dc465a42"
            }
          },
          {
            "name": "sim_card_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim card unique identifier",
              "example": "877f80a6-e5b2-4687-9a04-88076265720f"
            }
          },
          {
            "name": "phone_number",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Phone number",
              "example": "+12345678910"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Field used to order the data. If no field is specified, default value is 'created_at'",
              "example": "created_at",
              "default": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalWdrGetDetailResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/requirement_types": {
      "get": {
        "summary": "List all requirement types",
        "description": "List all requirement types ordered by created_at descending",
        "operationId": "docReqsListRequirementTypes",
        "x-latency-category": "responsive",
        "tags": [
          "Requirement Types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DocReqsRequirementTypeNameFilter"
          },
          {
            "$ref": "#/components/parameters/DocReqsRequirementTypesSort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocReqsListRequirementTypesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/requirement_types/{id}": {
      "get": {
        "summary": "Retrieve a requirement types",
        "description": "Retrieve a requirement type by id",
        "operationId": "docReqsRetrieveRequirementType",
        "x-latency-category": "responsive",
        "tags": [
          "Requirement Types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DocReqsRequirementTypeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocReqsRequirementTypeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/requirements": {
      "get": {
        "summary": "List all requirements",
        "description": "List all requirements with filtering, sorting, and pagination",
        "operationId": "listRequirements",
        "x-latency-category": "responsive",
        "tags": [
          "Requirements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DocReqsCountryFilter"
          },
          {
            "$ref": "#/components/parameters/DocReqsPhoneNumberTypeFilter"
          },
          {
            "$ref": "#/components/parameters/DocReqsActionFilter"
          },
          {
            "$ref": "#/components/parameters/DocReqsRequirementsSort"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRequirementsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/requirements/{id}": {
      "get": {
        "summary": "Retrieve a document requirement",
        "description": "Retrieve a document requirement record",
        "operationId": "docReqsRetrieveDocumentRequirements",
        "x-latency-category": "responsive",
        "tags": [
          "Requirements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/DocReqsRequirementId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DocReqsRequirementResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/room_participants": {
      "get": {
        "summary": "View a list of room participants.",
        "description": "",
        "operationId": "ListRoomParticipants",
        "x-endpoint-cost": "medium",
        "tags": [
          "Room Participants"
        ],
        "parameters": [
          {
            "name": "filter[date_joined_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[context]",
            "in": "query",
            "description": "Filter room participants based on the context.",
            "schema": {
              "type": "string",
              "example": "Alice"
            }
          },
          {
            "name": "filter[session_id]",
            "in": "query",
            "description": "Session_id for filtering room participants.",
            "schema": {
              "type": "string",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomParticipantsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/room_participants/{room_participant_id}": {
      "get": {
        "summary": "View a room participant.",
        "operationId": "ViewRoomParticipant",
        "tags": [
          "Room Participants"
        ],
        "x-endpoint-cost": "light",
        "parameters": [
          {
            "name": "room_participant_id",
            "in": "path",
            "description": "The unique identifier of a room participant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomParticipantResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions": {
      "get": {
        "summary": "View a list of room sessions.",
        "description": "",
        "operationId": "ListRoomSessions",
        "x-endpoint-cost": "medium",
        "tags": [
          "Room Sessions"
        ],
        "parameters": [
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[room_id]",
            "in": "query",
            "description": "Room_id for filtering room sessions.",
            "schema": {
              "type": "string",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[active]",
            "in": "query",
            "description": "Filter active or inactive room sessions.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomSessionsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}": {
      "get": {
        "summary": "View a room session.",
        "operationId": "ViewRoomSession",
        "tags": [
          "Room Sessions"
        ],
        "x-endpoint-cost": "light",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomSessionResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/participants": {
      "get": {
        "summary": "View a list of room participants.",
        "description": "",
        "operationId": "NestedListRoomParticipants",
        "x-endpoint-cost": "medium",
        "tags": [
          "Room Sessions"
        ],
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[date_joined_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[context]",
            "in": "query",
            "description": "Filter room participants based on the context.",
            "schema": {
              "type": "string",
              "example": "Alice"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomParticipantsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rooms": {
      "get": {
        "summary": "View a list of rooms.",
        "description": "",
        "operationId": "ListRooms",
        "x-endpoint-cost": "medium",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[unique_name]",
            "in": "query",
            "description": "Unique_name for filtering rooms.",
            "schema": {
              "type": "string",
              "example": "my_video_room"
            }
          },
          {
            "name": "include_sessions",
            "in": "query",
            "description": "To decide if room sessions should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomsResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Create a room.",
        "description": "Synchronously create a Room.",
        "operationId": "CreateRoom",
        "tags": [
          "Rooms"
        ],
        "x-endpoint-cost": "medium",
        "requestBody": {
          "description": "Parameters that can be defined during room creation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateRoomResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}": {
      "delete": {
        "summary": "Delete a room.",
        "description": "Synchronously delete a Room. Participants from that room will be kicked out, they won't be able to join that room anymore, and you won't be charged anymore for that room.",
        "operationId": "DeleteRoom",
        "tags": [
          "Rooms"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully."
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "View a room.",
        "operationId": "ViewRoom",
        "tags": [
          "Rooms"
        ],
        "x-endpoint-cost": "light",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "include_sessions",
            "in": "query",
            "description": "To decide if room sessions should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/actions/generate_join_client_token": {
      "post": {
        "summary": "Create Client Token to join a room.",
        "description": "Synchronously create an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`, a Refresh Token is also provided to refresh a Client Token, the Refresh Token expires after `refresh_token_ttl_secs`.",
        "operationId": "CreateRoomClientToken",
        "tags": [
          "Rooms Client Tokens"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Room Client Token creation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomClientTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateRoomClientTokenResponse"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/actions/refresh_client_token": {
      "post": {
        "summary": "Refresh Client Token to join a room.",
        "description": "Synchronously refresh an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`.",
        "operationId": "RefreshRoomClientToken",
        "tags": [
          "Rooms Client Tokens"
        ],
        "x-endpoint-cost": "light",
        "security": [],
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Room Client Token refresh.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRoomClientTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RefreshRoomClientTokenResponse"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/sessions": {
      "get": {
        "summary": "View a list of room sessions.",
        "description": "",
        "operationId": "NestedListRoomSessions",
        "x-endpoint-cost": "medium",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[active]",
            "in": "query",
            "description": "Filter active or inactive room sessions.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomSessionsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/short_codes": {
      "get": {
        "summary": "List short codes",
        "operationId": "listShortCodes",
        "tags": [
          "Short Codes"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[messaging_profile_id]",
            "in": "query",
            "description": "Filter by Messaging Profile ID. Use the string `null` for phone numbers without assigned profiles. A synonym for the `/messaging_profiles/{id}/short_codes` endpoint when querying about an extant profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/short_codes/{id}": {
      "get": {
        "summary": "Retrieve a short code",
        "operationId": "retrieveShortCode",
        "tags": [
          "Short Codes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update short code",
        "operationId": "updateShortCode",
        "description": "Update the settings for a specific short code. To unbind a short code from a profile, set the `messaging_profile_id` to `null` or an empty string.",
        "tags": [
          "Short Codes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "requestBody": {
          "description": "Short code update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_group_actions": {
      "get": {
        "operationId": "SimCardGroupActionsGet",
        "summary": "List SIM card group actions",
        "description": "This API allows listing a paginated collection a SIM card group actions. It allows to explore a collection of existing asynchronous operation using specific filters.",
        "tags": [
          "SIM Card Group Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardGroupId"
          },
          {
            "$ref": "#/components/parameters/FilterBasicStatusLifecycle"
          },
          {
            "name": "filter[type]",
            "description": "Filter by action type.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "set_private_wireless_gateway",
                "remove_private_wireless_gateway"
              ],
              "example": "set_private_wireless_gateway"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimCardGroupActionCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_group_actions/{id}": {
      "get": {
        "operationId": "SimCardGroupActionGet",
        "summary": "Get SIM card group action details",
        "description": "This API allows fetching detailed information about a SIM card group action resource to make follow-ups in an existing asynchronous operation.",
        "tags": [
          "SIM Card Group Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups": {
      "get": {
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "description": "A valid SIM card group name.",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "My Test Group"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllSimCardGroupsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "operationId": "SimCardGroupsGetAll",
        "summary": "Get all SIM card groups",
        "description": "Get all SIM card groups belonging to the user that match the given filters.",
        "x-latency-category": "responsive"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardGroupCreate"
              }
            }
          },
          "required": true
        },
        "tags": [
          "SIM Card Groups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "operationId": "SimCardGroupsPost",
        "summary": "Create a SIM card group",
        "description": "Creates a new SIM card group object",
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups/{id}": {
      "delete": {
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "operationId": "SimCardGroupDelete",
        "summary": "Delete a SIM card group",
        "description": "Permanently deletes a SIM card group",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "operationId": "SimCardGroupsGet",
        "summary": "Get SIM card group",
        "description": "Returns the details regarding a specific SIM card group",
        "x-latency-category": "responsive"
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardGroupPatch"
              }
            }
          },
          "required": true
        },
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "operationId": "SimCardGroupUpdate",
        "summary": "Update a SIM card group",
        "description": "Updates a SIM card group",
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups/{id}/actions/remove_private_wireless_gateway": {
      "post": {
        "x-latency-category": "background",
        "summary": "Request Private Wireless Gateway removal from SIM card group",
        "description": "This action will asynchronously remove an existing Private Wireless Gateway definition from a SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic handled by Telnyx's default mobile network configuration.",
        "operationId": "RemoveSIMCardGroupPrivateWirelessGateway",
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sim_card_groups/{id}/actions/set_private_wireless_gateway": {
      "post": {
        "x-latency-category": "background",
        "summary": "Request Private Wireless Gateway assignment for SIM card group",
        "description": "This action will asynchronously assign a provisioned Private Wireless Gateway to the SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic controlled by the associated Private Wireless Gateway. This operation will also imply that new SIM cards assigned to a group will inherit its network definitions. If it's moved to a different group that doesn't have a Private Wireless Gateway, it'll use Telnyx's default mobile network configuration.",
        "operationId": "SetSIMCardGroupPrivateWirelessGateway",
        "tags": [
          "SIM Card Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "private_wireless_gateway_id": {
                    "description": "The identification of the related Private Wireless Gateway resource.",
                    "format": "uuid",
                    "type": "string",
                    "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
                  }
                },
                "required": [
                  "private_wireless_gateway_id"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sim_card_order_preview": {
      "post": {
        "summary": "Preview SIM card orders",
        "description": "Preview SIM card order purchases.",
        "operationId": "SimCardOrdersPreview",
        "tags": [
          "SIM Card Orders"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "quantity",
                  "address_id"
                ],
                "properties": {
                  "quantity": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The amount of SIM cards that the user would like to purchase in the SIM card order.",
                    "example": 21
                  },
                  "address_id": {
                    "type": "string",
                    "description": "Uniquely identifies the address for the order.",
                    "pattern": "^\\d{10}",
                    "example": "1293384261075731499"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardOrdersPreviewResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_orders": {
      "get": {
        "summary": "Get all SIM card orders",
        "description": "Get all SIM card orders according to filters.",
        "operationId": "SimCardOrdersGet",
        "tags": [
          "SIM Card Orders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCreatedAt"
          },
          {
            "$ref": "#/components/parameters/FilterUpdatedAt"
          },
          {
            "$ref": "#/components/parameters/FilterQuantity"
          },
          {
            "$ref": "#/components/parameters/FilterCostByAmount"
          },
          {
            "$ref": "#/components/parameters/FilterCostByCurrency"
          },
          {
            "$ref": "#/components/parameters/FilterAddressById"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByStreetAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByExtendedAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByLocality"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByAdministrativeArea"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByCountryCode"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByPostalCode"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllSimCardOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimCardOrderCreate"
              }
            }
          },
          "required": true
        },
        "tags": [
          "SIM Card Orders"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateSimCardOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "summary": "Create a SIM card order",
        "description": "Creates a new order for SIM cards.",
        "operationId": "SimCardOrdersPost",
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_orders/{id}": {
      "get": {
        "summary": "Get a single SIM card order",
        "description": "Get a single SIM card order by its ID.",
        "operationId": "SimCardOrderGet",
        "tags": [
          "SIM Card Orders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardOrderResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards": {
      "get": {
        "summary": "Get all SIM cards",
        "description": "Get all SIM cards belonging to the user that match the given filters.",
        "operationId": "SimCardsGet",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/IncludeSIMCardGroup"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardGroupId"
          },
          {
            "name": "filter[tags]",
            "description": "A list of SIM card tags to filter on.<br/><br/>\nIf the SIM card contains <b><i>all</i></b> of the given <code>tags</code> they will be found.<br/><br/>\nFor example, if the SIM cards have the following tags: <ul>\n  <li><code>['customers', 'staff', 'test']</code>\n  <li><code>['test']</code></li>\n  <li><code>['customers']</code></li>\n</ul>\nSearching for <code>['customers', 'test']</code> returns only the first because it's the only one with both tags.<br/> Searching for <code>test</code> returns the first two SIMs, because both of them have such tag.<br/> Searching for <code>customers</code> returns the first and last SIMs.<br/>\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "personal",
                "customers",
                "active-customers"
              ]
            }
          },
          {
            "name": "filter[iccid]",
            "description": "A search string to partially match for the SIM card's ICCID.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "89310410106543789301"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSimCardsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/actions/validate_registration_codes": {
      "post": {
        "summary": "Validate SIM cards registration codes",
        "tags": [
          "SIM Cards"
        ],
        "description": "It validates whether SIM card registration codes are valid or not.",
        "operationId": "postValidateRegistrationCodes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registration_codes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "The object containing the Array of SIM card registration codes.",
                "example": {
                  "registration_codes": [
                    "123456780",
                    "1231231230"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIMCardRegistrationCodeValidations"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}": {
      "delete": {
        "summary": "Deletes a SIM card",
        "description": "The SIM card will be decommissioned, removed from your account and you will stop being charged.<br />The SIM card won't be able to connect to the network after the deletion is completed, thus making it impossible to consume data.<br/>\nTransitioning to the disabled state may take a period of time.</br>\nUntil the transition is completed, the SIM card status will be disabling <code>disabling</code>.<br />In order to re-enable the SIM card, you will need to re-register it.",
        "operationId": "SimCardDelete",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Get SIM card",
        "description": "Returns the details regarding a specific SIM card.",
        "operationId": "SimCardGet",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          },
          {
            "$ref": "#/components/parameters/IncludeSIMCardGroup"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "summary": "Update a SIM card",
        "description": "Updates a SIM card's group and tags",
        "operationId": "SimCardUpdate",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}/actions/disable": {
      "post": {
        "x-latency-category": "background",
        "summary": "Request a SIM card disable",
        "description": "The SIM card won't be able to connect to the network after the disabling is completed, thus making it impossible to consume data.<br/>\nTransitioning to the disabled state may take a period of time.</br>\nUntil the transition is completed, the SIM card status will be <code>disabling</code>.\n",
        "operationId": "SimCardDisable",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SimpleSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sim_cards/{id}/actions/enable": {
      "post": {
        "x-latency-category": "background",
        "summary": "Request a SIM card enable",
        "description": "The SIM card will be able to connect to the network once the enabling is complete, thus making it possible to consume data.<br/>\nTo enable a SIM card, it must be associated with SIM card group.<br/>\nTransitioning to the enabled state may take a period of time. Until the transition is completed, the SIM card status will be <code>enabling</code>.\n",
        "operationId": "SimCardEnable",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SimpleSimCardResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sim_cards/{id}/actions/set_standby": {
      "post": {
        "x-latency-category": "background",
        "summary": "Request setting a SIM card to standby",
        "description": "The SIM card will be able to connect to the network once the process to set it to standby has been completed, thus making it possible to consume data.<br/>\nTo set a SIM card to standby, it must be associated with SIM card group.<br/>\nTransitioning to the standby state may take a period of time. Until the transition is completed, the SIM card status will be <code>setting_standby</code>.\n",
        "operationId": "SimCardSetStandby",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SimpleSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        }
      }
    },
    "/sim_cards/{sim_card_id}/network_preferences": {
      "delete": {
        "summary": "DELETE network preferences",
        "description": "This API asynchronously removes the custom-defined network preferences settings. After this operation is done the Telnyx default settings, the same applied for an unaltered SIM card, will be in place.\n",
        "operationId": "SIMCardNetworkPreferencesDelete",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/DELETESIMCardNetworkPreferenceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Get network preferences",
        "description": "It returns the network preferences currently applied in the SIM card.\n",
        "operationId": "SIMCardNetworkPreferencesGet",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          },
          {
            "$ref": "#/components/parameters/IncludeOTAUpdates"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardNetworkPreferenceWithOTAUpdatesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "summary": "Set network preferences",
        "description": "This API allows setting or updating a SIM card network preference. <br/><br/>\nEvery SIM card has default network preferences defined on Telnyx. These preferences will determine how a SIMCard will connect to the network by considering a list of preferable operators.<br/><br/>\nThere can be multiple scenarios where an operator can be preferred over another, for example, when a specific mobile operator can provide better network latency or better pricing.\n",
        "operationId": "SIMCardNetworkPreferencesPut",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mobile_operator_networks_preferences": {
                    "type": "array",
                    "description": "A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.",
                    "items": {
                      "$ref": "#/components/schemas/MobileOperatorNetworkPreferencesRequest"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/PUTSIMCardNetworkPreferenceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{sim_card_id}/public_ip": {
      "delete": {
        "summary": "Delete SIM card public IP",
        "description": "This API asynchronously removes an existing public IP from a SIM card.\n",
        "operationId": "SIMCardPublicIPDelete",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DecommissionedSIMCardPublicIPResponse"
          },
          "202": {
            "$ref": "#/components/responses/ReceivedSIMCardPublicIPResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "summary": "Get SIM card public IP definition",
        "description": "It returns the public IP requested for a SIM card.\n",
        "operationId": "SIMCardPublicIPGet",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardPublicIPResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "summary": "Set SIM card public IP",
        "description": "This API will asynchronously map a random public IP to a SIM card, making it reachable on the public internet. <br/><br/>\n The request will return the resource as \"provisioning\" right away, and it'll eventually get \"provisioned\", meaning it completed the setup. <br/><br/>\n Setting up a public IP will generate charges, and we won't be able to provide the IP if the account doesn't have a balance. In that case, this operation will succeed, but its status will change to failed eventually, and the resource will be updated with the associated status. The IP resource will need to be deleted and re-created with our DELETE and POST APIs in this scenario.",
        "operationId": "SIMCardPublicIPPost",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/ReceivedSIMCardPublicIPResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{sim_card_id}/wireless_connectivity_logs": {
      "get": {
        "operationId": "WirelessConnectivityLogsGet",
        "summary": "List wireless connectivity logs",
        "description": "This API allows listing a paginated collection of Wireless Connectivity Logs associated with a SIM Card, for troubleshooting purposes.",
        "tags": [
          "SIM Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WirelessConnectivityLogCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials": {
      "get": {
        "description": "List all On-demand Credentials.",
        "summary": "List all credentials",
        "operationId": "findTelephonyCredentials",
        "tags": [
          "Credentials"
        ],
        "x-group-parameters": "true",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/OptionalTag"
          },
          {
            "$ref": "#/components/parameters/FilterName"
          },
          {
            "$ref": "#/components/parameters/FilterStatus"
          },
          {
            "$ref": "#/components/parameters/FilterResourceId"
          },
          {
            "$ref": "#/components/parameters/FilterSipUsername"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllTelephonyCredentialResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Create a credential.",
        "summary": "Create a credential",
        "operationId": "CreateTelephonyCredential",
        "tags": [
          "Credentials"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be defined during credential creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelephonyCredentialCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/tags": {
      "get": {
        "description": "Returns a list of tags used on Credentials",
        "summary": "List all tags",
        "operationId": "listTags",
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListTagsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/{id}": {
      "delete": {
        "description": "Delete an existing credential.",
        "summary": "Delete a credential",
        "operationId": "DeleteTelephonyCredential",
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Get the details of an existing On-demand Credential.",
        "summary": "Get a credential",
        "operationId": "getTelephonyCredential",
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update an existing credential.",
        "summary": "Update a credential",
        "operationId": "UpdateTelephonyCredential",
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a credential",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelephonyCredentialUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/{id}/actions/{action}": {
      "post": {
        "description": "Perform activate or deactivate action on provided Credential. Activate action will change the status to active, making it possible to connect calls with the credential. Deactivate action will change the status to inactive, making it impossible to connect calls with the credential.",
        "summary": "Perform activate or deactivate action on provided Credential",
        "operationId": "telephonyCredentialAction",
        "tags": [
          "Credentials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "path",
            "description": "Identifies the action to be taken.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "activate",
                "deactivate"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/{id}/token": {
      "post": {
        "description": "Create an Access Token (JWT) for the credential.",
        "summary": "Create an Access Token.",
        "operationId": "CreateTelephonyCredentialToken",
        "tags": [
          "Access Tokens"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "JWT",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                }
              }
            }
          },
          "404": {
            "description": "Resource not Found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml_applications": {
      "get": {
        "description": "Returns a list of your TeXML Applications.",
        "summary": "List all TeXML Applications",
        "operationId": "findTexmlApplications",
        "tags": [
          "TeXML Applications"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[friendly_name][contains]",
            "in": "query",
            "description": "If present, applications with <code>friendly_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
            "schema": {
              "type": "string",
              "default": "null"
            }
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllTexmlApplicationsResponse"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "description": "Creates a TeXML Application.",
        "summary": "Creates a TeXML Application",
        "operationId": "CreateTexmlApplication",
        "tags": [
          "TeXML Applications"
        ],
        "x-endpoint-cost": "medium",
        "parameters": [],
        "requestBody": {
          "description": "Parameters that can be set when creating a TeXML Application",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTexmlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml_applications/{id}": {
      "delete": {
        "description": "Deletes a TeXML Application.",
        "summary": "Deletes a TeXML Application",
        "operationId": "DeleteTexmlApplication",
        "tags": [
          "TeXML Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieves the details of an existing TeXML Application.",
        "summary": "Retrieve a TeXML Application",
        "operationId": "getTexmlApplication",
        "tags": [
          "TeXML Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Updates settings of an existing TeXML Application.",
        "summary": "Update a TeXML Application",
        "operationId": "UpdateTexmlApplication",
        "tags": [
          "TeXML Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a TeXML Application",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTexmlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Bad request"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/by_phone_number/{phone_number}": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "List verifications by phone number",
        "operationId": "listVerifications",
        "parameters": [
          {
            "required": true,
            "description": "The phone number associated with the verifications to retrieve.",
            "schema": {
              "example": "+13035551234",
              "type": "string",
              "description": "+E164 formatted phone number."
            },
            "name": "phone_number",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerificationsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/by_phone_number/{phone_number}/actions/verify": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Submit a verification code",
        "operationId": "verifyVerificationCode",
        "parameters": [
          {
            "required": true,
            "description": "The phone number associated with the verification code being verified.",
            "schema": {
              "example": "+13035551234",
              "type": "string",
              "description": "+E164 formatted phone number."
            },
            "name": "phone_number",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyVerificationCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verify response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyVerificationCodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/call": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger a Call verification",
        "operationId": "createVerificationCall",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestCall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/flashcall": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger a Flash call verification",
        "operationId": "createVerificationFlashcall",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestFlashcall"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/psd2": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger a PSD2 verification",
        "operationId": "createVerificationPSD2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestPSD2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/sms": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger a SMS verification",
        "operationId": "createVerificationSMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestSMS"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/whatsapp": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger a Whatsapp verification",
        "operationId": "createVerificationWhatsapp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestWhatsapp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/{verification_id}": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Retrieve a verification",
        "operationId": "retrieveVerification",
        "parameters": [
          {
            "required": true,
            "description": "The identifier of the verification to retrieve.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            },
            "name": "verification_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verify_profiles": {
      "get": {
        "tags": [
          "Verify"
        ],
        "x-group-parameters": "true",
        "summary": "List all Verify profiles",
        "description": "Gets a paginated list of Verify profiles.",
        "operationId": "listVerifyProfiles",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "filter[name]",
              "type": "string",
              "description": "Optional filter for profile names."
            },
            "name": "filter[name]",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "page[size]",
              "type": "integer",
              "default": 25
            },
            "name": "page[size]",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "page[number]",
              "type": "integer",
              "default": 1
            },
            "name": "page[number]",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerifyProfilesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Create a Verify profile",
        "description": "Creates a new Verify profile to associate verifications with.",
        "operationId": "createVerifyProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Create Verify Profile Request",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "example": "Test Profile",
                    "type": "string"
                  },
                  "webhook_url": {
                    "type": "string",
                    "example": "http://example.com/webhook"
                  },
                  "webhook_failover_url": {
                    "type": "string",
                    "example": "http://example.com/webhook/failover"
                  },
                  "sms": {
                    "type": "object",
                    "$ref": "#/components/schemas/CreateVerifyProfileSMSRequest"
                  },
                  "psd2": {
                    "type": "object",
                    "$ref": "#/components/schemas/CreateVerifyProfilePSD2Request"
                  },
                  "whatsapp": {
                    "type": "object",
                    "$ref": "#/components/schemas/CreateVerifyProfileWhatsappRequest"
                  },
                  "call": {
                    "type": "object",
                    "$ref": "#/components/schemas/CreateVerifyProfileCallRequest"
                  },
                  "flashcall": {
                    "type": "object",
                    "$ref": "#/components/schemas/CreateVerifyProfileFlashcallRequest"
                  },
                  "language": {
                    "type": "string",
                    "example": "en-US"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verify_profiles/{verify_profile_id}": {
      "delete": {
        "tags": [
          "Verify"
        ],
        "summary": "Delete a Verify profile",
        "operationId": "deleteVerifyProfile",
        "parameters": [
          {
            "required": true,
            "description": "The identifier of the Verify profile to delete.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            },
            "name": "verify_profile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Retrieve a Verify profile",
        "description": "Gets a single Verify profile.",
        "operationId": "retrieveVerifyProfile",
        "parameters": [
          {
            "required": true,
            "description": "The identifier of the Verify profile to retrieve.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            },
            "name": "verify_profile_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Verify"
        ],
        "summary": "Update a Verify profile",
        "operationId": "updateVerifyProfile",
        "parameters": [
          {
            "required": true,
            "description": "The identifier of the Verify profile to update.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            },
            "name": "verify_profile_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Update Verify Profile Request",
                "type": "object",
                "properties": {
                  "name": {
                    "example": "Test Profile",
                    "type": "string"
                  },
                  "webhook_url": {
                    "type": "string",
                    "example": "http://example.com/webhook"
                  },
                  "webhook_failover_url": {
                    "type": "string",
                    "example": "http://example.com/webhook/failover"
                  },
                  "sms": {
                    "type": "object",
                    "$ref": "#/components/schemas/UpdateVerifyProfileSMSRequest"
                  },
                  "psd2": {
                    "type": "object",
                    "$ref": "#/components/schemas/UpdateVerifyProfilePSD2Request"
                  },
                  "whatsapp": {
                    "type": "object",
                    "$ref": "#/components/schemas/UpdateVerifyProfileWhatsappRequest"
                  },
                  "call": {
                    "type": "object",
                    "$ref": "#/components/schemas/UpdateVerifyProfileCallRequest"
                  },
                  "flashcall": {
                    "type": "object",
                    "$ref": "#/components/schemas/UpdateVerifyProfileFlashcallRequest"
                  },
                  "language": {
                    "type": "string",
                    "example": "en-US"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/webhook_deliveries": {
      "get": {
        "description": "Lists webhook_deliveries for the authenticated user",
        "summary": "List webhook deliveries",
        "operationId": "getWebhookDeliveries",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "filter[status][eq]",
            "in": "query",
            "description": "Return only webhook_deliveries matching the given `status`",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "delivered",
                "failed"
              ],
              "example": "delivered"
            }
          },
          {
            "name": "filter[webhook][contains]",
            "in": "query",
            "description": "Return only webhook deliveries whose `webhook` component contains the given text",
            "required": false,
            "schema": {
              "type": "string",
              "example": "call.initiated"
            }
          },
          {
            "name": "filter[attempts][contains]",
            "in": "query",
            "description": "Return only webhook_deliveries whose `attempts` component contains the given text",
            "required": false,
            "schema": {
              "type": "string",
              "example": "https://fallback.example.com/webhooks"
            }
          },
          {
            "name": "filter[started_at][gte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery started later than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[started_at][lte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery started earlier than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[finished_at][gte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery finished later than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[finished_at][lte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery finished earlier than or at given ISO 8601 datetime",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListWebhookDeliveriesResponse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/webhook_deliveries/{id}": {
      "get": {
        "summary": "Find webhook_delivery details by ID",
        "description": "Provides webhook_delivery debug data, such as timestamps, delivery status and attempts.",
        "operationId": "getWebhookDelivery",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Uniquely identifies the webhook_delivery.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "C9C0797E-901D-4349-A33C-C2C8F31A92C2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook delivery record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook_delivery"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "WebhookDelivery not found"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_contacts": {
      "post": {
        "description": "Verify that a phone number belongs to a valid WhatsApp account. You must ensure that the status is valid before you can message a user, and you'll get their WhatsApp ID to use for messaging.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckContactRequestBody"
              },
              "example": {
                "whatsapp_user_id": "15125551212",
                "blocking": "wait",
                "contacts": [
                  "15125551000",
                  "+1 512 555 1001",
                  "5125551002",
                  "+1 (512) 555-1004",
                  "1-512-555-1005"
                ]
              }
            }
          },
          "required": true
        },
        "tags": [
          "WhatsApp Contacts"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CheckContactResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "checkContact",
        "summary": "Check Contact",
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_detail_record_reports": {
      "get": {
        "tags": [
          "WhatsApp Detail Reports"
        ],
        "description": "Fetch all previous requests for WhatsApp detail reports. WhatsApp detail reports are reports for pulling all WhatsApp records. ",
        "operationId": "getRequests",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsAppGetAllDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "WhatsApp Detail Reports"
        ],
        "description": "Submit a request for new WhatsApp detail report. WhatsApp detail report pulls all raw WhatsApp data according to defined filters.",
        "operationId": "submitRequest",
        "requestBody": {
          "description": "WhatsApp detail request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhatsAppReportsReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsAppDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/whatsapp_detail_record_reports/{id}": {
      "delete": {
        "tags": [
          "WhatsApp Detail Reports"
        ],
        "description": "Delete generated WhatsApp detail report by id",
        "operationId": "deleteRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsAppDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "WhatsApp Detail Reports"
        ],
        "description": "Fetch single whatsapp detail report by id.",
        "operationId": "getRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsAppDetailReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/whatsapp_media": {
      "post": {
        "description": "Upload media. Accepted media types include image/jpeg, image/png, video/mp4, video/3gpp, audio/aac, audio/ogg.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MediaRequestBody"
              },
              "example": {
                "whatsapp_user_id": "15125551212",
                "media_content_type": "image/jpeg",
                "upload_file": "string($binary)"
              }
            }
          },
          "required": true
        },
        "tags": [
          "WhatsApp Media"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UploadMediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "uploadMedia",
        "summary": "Upload Media",
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_media/{whatsapp_user_id}/{media_id}": {
      "delete": {
        "description": "Delete uploaded media.",
        "tags": [
          "WhatsApp Media"
        ],
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "whatsapp_user_id",
            "description": "User's WhatsApp ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "style": "simple",
            "explode": false,
            "name": "media_id",
            "description": "WhatsApp's Media ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful, empty response body."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "deleteMedia",
        "summary": "Delete Media",
        "x-latency-category": "responsive"
      },
      "get": {
        "description": "Retrieve uploaded media. Media is typically available for 30 days after uploading.",
        "tags": [
          "WhatsApp Media"
        ],
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "whatsapp_user_id",
            "description": "User's WhatsApp ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "style": "simple",
            "explode": false,
            "name": "media_id",
            "description": "WhatsApp's Media ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UploadedMediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "downloadMedia",
        "summary": "Download Media",
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_messages": {
      "post": {
        "description": "Send text messages, media/documents, and message templates to your customers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWhatsAppMessageRequest"
              },
              "example": {
                "whatsapp_user_id": "15125551212",
                "to": "15125558989",
                "type": "text",
                "text": {
                  "body": "<Message Text>"
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "WhatsApp Messages"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WhatsAppMessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "sendMessage",
        "summary": "Send Message",
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_messages/{message_id}": {
      "patch": {
        "description": "Mark a message as read.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkMessageAsReadRequestBody"
              },
              "example": {
                "whatsapp_user_id": "15125551212",
                "status": "read"
              }
            }
          },
          "required": true
        },
        "tags": [
          "WhatsApp Messages"
        ],
        "parameters": [
          {
            "name": "message_id",
            "description": "Message ID from Webhook",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Request successful, empty response body."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "markMessageAsRead",
        "summary": "Mark Message As Read",
        "x-latency-category": "responsive"
      }
    },
    "/whatsapp_usage_aggregations": {
      "get": {
        "tags": [
          "WhatsApp Usage Aggregations"
        ],
        "description": "Generate and fetch WhatsApp usage aggregations synchronously. This endpoint will both generate and fetch the WhatsApp aggregations over a specified time period. ",
        "operationId": "getUsageAggregationsSync",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00-06:00"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhatsAppUsageAggregationsResponseContainer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/whatsapp_users/{whatsapp_user_id}": {
      "get": {
        "description": "Retrieve WhatsApp user information.",
        "tags": [
          "WhatsApp Users"
        ],
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "whatsapp_user_id",
            "description": "User's WhatsApp ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WhatsAppUserResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "deprecated": false,
        "operationId": "getUser",
        "summary": "Get User",
        "x-latency-category": "responsive"
      },
      "patch": {
        "description": "Update webhook URL used for a given WhatsApp user.",
        "tags": [
          "WhatsApp Users"
        ],
        "summary": "Update WhatsApp User",
        "operationId": "updateWhatsAppWebhook",
        "parameters": [
          {
            "style": "simple",
            "explode": false,
            "name": "whatsapp_user_id",
            "description": "User's WhatsApp ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Request successful, empty response body."
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireless/detail_records_reports": {
      "get": {
        "summary": "Get all Wireless Detail Records (WDRs) Reports",
        "description": "Returns the WDR Reports that match the given parameters.",
        "operationId": "getWdrReports",
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetWdrReportsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "post": {
        "summary": "Create a Wireless Detail Records (WDRs) Report",
        "description": "Asynchronously create a report containing Wireless Detail Records (WDRs) for the SIM cards that consumed wireless data in the given time period.\n",
        "operationId": "createWdrReport",
        "tags": [
          "Reporting"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WdrReportRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateWdrReportResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/wireless/detail_records_reports/{id}": {
      "delete": {
        "summary": "Delete a Wireless Detail Record (WDR) Report",
        "description": "Deletes one specific WDR report",
        "operationId": "deleteWdrReport",
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteWdrReportResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "get": {
        "summary": "Get a Wireless Detail Record (WDR) Report",
        "description": "Returns one specific WDR report",
        "operationId": "getWdrReport",
        "tags": [
          "Reporting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetWdrReportResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    }
  },
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {
      "AssociatedRecordType": {
        "name": "filter[associated_record_type][eq]",
        "in": "query",
        "description": "Filter by the associated record type",
        "schema": {
          "type": "string",
          "enum": [
            "account",
            "phone_number"
          ],
          "example": "phone_number"
        }
      },
      "BillingGroupId": {
        "name": "id",
        "in": "path",
        "description": "The id of the billing group",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "CallControlId": {
        "name": "call_control_id",
        "description": "Unique identifier and token for controlling the call",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ChannelTypeId": {
        "name": "filter[channel_type_id][eq]",
        "in": "query",
        "description": "Filter by the id of a channel type",
        "schema": {
          "type": "string",
          "enum": [
            "webhook",
            "sms",
            "email",
            "voice"
          ],
          "example": "webhook"
        }
      },
      "DocReqsActionFilter": {
        "name": "filter[action]",
        "in": "query",
        "description": "Filters requirements to those applying to a specific action.",
        "schema": {
          "type": "string",
          "enum": [
            "ordering",
            "porting"
          ],
          "example": "porting"
        }
      },
      "DocReqsCountryFilter": {
        "name": "filter[country_code]",
        "in": "query",
        "description": "Filters results to those applying to a 2-character (ISO 3166-1 alpha-2) country code",
        "schema": {
          "type": "string",
          "example": "US"
        }
      },
      "DocReqsPhoneNumberTypeFilter": {
        "name": "filter[phone_number_type]",
        "in": "query",
        "description": "Filters results to those applying to a specific `phone_number_type`",
        "schema": {
          "type": "string",
          "enum": [
            "local",
            "national",
            "toll-free"
          ],
          "example": "local"
        }
      },
      "DocReqsRequirementId": {
        "name": "id",
        "in": "path",
        "description": "Uniquely identifies the requirement_type record",
        "example": "a9dad8d5-fdbd-49d7-aa23-39bb08a5ebaa",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "DocReqsRequirementTypeId": {
        "name": "id",
        "in": "path",
        "description": "Uniquely identifies the requirement_type record",
        "example": "a38c217a-8019-48f8-bff6-0fdd9939075b",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "DocReqsRequirementTypeNameFilter": {
        "name": "filter[name][contains]",
        "in": "query",
        "description": "Filters requirement types to those whose name contains a certain string.",
        "schema": {
          "type": "string",
          "example": "utility bill"
        }
      },
      "DocReqsRequirementTypesSort": {
        "name": "sort[]",
        "in": "query",
        "description": "Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a `-` in front of the field name.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "name",
            "updated_at"
          ],
          "example": "country_code"
        }
      },
      "DocReqsRequirementsSort": {
        "name": "sort[]",
        "in": "query",
        "description": "Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a `-` in front of the field name.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "action",
            "country_code",
            "locality",
            "phone_number_type"
          ],
          "example": "country_code"
        }
      },
      "DocServiceDocumentIdFilter": {
        "name": "filter[document_id]",
        "in": "query",
        "description": "Identifies the associated document to filter on.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "FilterAddressBook": {
        "name": "filter[address_book][eq]",
        "in": "query",
        "required": false,
        "description": "If present, only returns results with the <code>address_book</code> flag set to the given value.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterAddressByAdministrativeArea": {
        "name": "filter[address.administrative_area]",
        "description": "Filter by state or province where the address is located.",
        "schema": {
          "type": "string",
          "example": "IL"
        },
        "in": "query"
      },
      "FilterAddressByCountryCode": {
        "name": "filter[address.country_code]",
        "description": "Filter by the mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
        "schema": {
          "type": "string",
          "example": "US"
        },
        "in": "query"
      },
      "FilterAddressByExtendedAddress": {
        "name": "filter[address.extended_address]",
        "description": "Returns entries with matching name of the supplemental field for address information.",
        "schema": {
          "type": "string",
          "example": "Suite 504"
        },
        "in": "query"
      },
      "FilterAddressById": {
        "name": "filter[address.id]",
        "description": "Uniquely identifies the address for the order.",
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}",
          "example": "1293384261075731499"
        },
        "in": "query"
      },
      "FilterAddressByLocality": {
        "name": "filter[address.locality]",
        "description": "Filter by the name of the city where the address is located.",
        "schema": {
          "type": "string",
          "example": "Chicago"
        },
        "in": "query"
      },
      "FilterAddressByPostalCode": {
        "name": "filter[address.postal_code]",
        "description": "Filter by postal code for the address.",
        "schema": {
          "type": "string",
          "example": "60654"
        },
        "in": "query"
      },
      "FilterAddressByStreetAddress": {
        "name": "filter[address.street_address]",
        "description": "Returns entries with matching name of the street where the address is located.",
        "schema": {
          "type": "string",
          "example": "311 W Superior St"
        },
        "in": "query"
      },
      "FilterApplicationName": {
        "name": "filter[application_name][contains]",
        "in": "query",
        "description": "If present, applications with <code>application_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterBasicStatusLifecycle": {
        "name": "filter[status]",
        "description": "Filter by a specific status of the resource's lifecycle.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "in-progress",
            "completed",
            "failed"
          ],
          "example": "in-progress"
        }
      },
      "FilterByActivationStatus": {
        "name": "filter[activation_status]",
        "in": "query",
        "description": "Filter results by activation status",
        "schema": {
          "$ref": "#/components/schemas/ActivationStatus"
        }
      },
      "FilterByPhoneNumber": {
        "name": "filter[phone_number]",
        "in": "query",
        "description": "Filter results by phone number",
        "schema": {
          "type": "string"
        }
      },
      "FilterByPortabilityStatus": {
        "name": "filter[portability_status]",
        "in": "query",
        "description": "Filter results by portability status",
        "schema": {
          "$ref": "#/components/schemas/PortabilityStatus"
        }
      },
      "FilterByPortingOrderID": {
        "name": "filter[porting_order_id]",
        "in": "query",
        "description": "Filter results by porting order id",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterByPortingOrderStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Filter results by status",
        "schema": {
          "$ref": "#/components/schemas/PortingOrderStatus"
        }
      },
      "FilterCallEventStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Event status",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "delivered",
            "failed"
          ],
          "example": "delivered"
        }
      },
      "FilterCallEventTimestampEqualTo": {
        "name": "filter[event_timestamp][eq]",
        "in": "query",
        "description": "Event timestamp: equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampGreaterThan": {
        "name": "filter[event_timestamp][gt]",
        "in": "query",
        "description": "Event timestamp: greater than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampGreaterThanOrEqualTo": {
        "name": "filter[event_timestamp][gte]",
        "in": "query",
        "description": "Event timestamp: greater than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThan": {
        "name": "filter[event_timestamp][lt]",
        "in": "query",
        "description": "Event timestamp: lower than",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventTimestampLessThanOrEqualTo": {
        "name": "filter[event_timestamp][lte]",
        "in": "query",
        "description": "Event timestamp: lower than or equal",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventType": {
        "name": "filter[type]",
        "in": "query",
        "description": "Event type",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "command",
            "webhook"
          ],
          "example": "webhook"
        }
      },
      "FilterCallLegId": {
        "name": "filter[call_leg_id]",
        "in": "query",
        "description": "The unique identifier of an individual call leg.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterCallSessionId": {
        "name": "filter[call_session_id]",
        "in": "query",
        "description": "The unique identifier of the call control session. A session may include multiple call leg events.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterConferenceName": {
        "name": "filter[name]",
        "in": "query",
        "description": "If present, conferences will be filtered to those with a matching `name` attribute. Matching is case-sensitive",
        "schema": {
          "type": "string"
        }
      },
      "FilterConnectionName": {
        "name": "filter[connection_name][contains]",
        "in": "query",
        "description": "If present, connections with <code>connection_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": null
        }
      },
      "FilterCostByAmount": {
        "name": "filter[cost.amount]",
        "description": "The total monetary amount of the order.",
        "schema": {
          "type": "string",
          "example": "2.53"
        },
        "in": "query"
      },
      "FilterCostByCurrency": {
        "name": "filter[cost.currency]",
        "description": "Filter by ISO 4217 currency string.",
        "schema": {
          "type": "string",
          "example": "USD"
        },
        "in": "query"
      },
      "FilterCreatedAt": {
        "name": "filter[created_at]",
        "description": "Filter by ISO 8601 formatted date-time string matching resource creation date-time.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-02T22:25:27.521Z"
        },
        "in": "query"
      },
      "FilterCustomerReferenceContains": {
        "name": "filter[customer_reference][contains]",
        "in": "query",
        "required": false,
        "description": "If present, addresses with <code>customer_reference</code> containing the given value will be returned. Matching is not case-sensitive.",
        "schema": {
          "type": "string"
        }
      },
      "FilterCustomerReferenceEquals": {
        "name": "filter[customer_reference][eq]",
        "in": "query",
        "required": false,
        "description": "Filter addresses via the customer reference set. Matching is not case-sensitive.",
        "schema": {
          "type": "string"
        }
      },
      "FilterEmailContains": {
        "name": "filter[email][contains]",
        "in": "query",
        "required": false,
        "description": "If present, email containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterEmailEq": {
        "name": "filter[email][eq]",
        "in": "query",
        "required": false,
        "description": "If present, only returns results with the <code>email</code> matching exactly the value given.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterInnerOutboundVoiceProfileId": {
        "name": "filter[outbound.outbound_voice_profile_id]",
        "in": "query",
        "description": "Identifies the associated outbound voice profile.",
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}",
          "example": "1293384261075731499"
        }
      },
      "FilterName": {
        "name": "filter[name]",
        "in": "query",
        "description": "Filter by name",
        "schema": {
          "type": "string"
        }
      },
      "FilterOutboundVoiceProfileId": {
        "name": "filter[outbound_voice_profile_id]",
        "in": "query",
        "description": "Identifies the associated outbound voice profile.",
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}",
          "example": "1293384261075731499"
        }
      },
      "FilterQuantity": {
        "name": "filter[quantity]",
        "description": "Filter orders by how many SIM cards were ordered.",
        "schema": {
          "type": "integer",
          "example": 21
        },
        "in": "query"
      },
      "FilterQuantityLessThan": {
        "name": "filter[quantity][lt]",
        "description": "Returns orders with <code>quantity</code> lower than the specified argument.",
        "schema": {
          "type": "integer",
          "example": 21
        },
        "in": "query"
      },
      "FilterResourceId": {
        "name": "filter[resource_id]",
        "in": "query",
        "description": "Filter by resource_id",
        "schema": {
          "type": "string"
        }
      },
      "FilterSIMCardGroupId": {
        "name": "filter[sim_card_group_id]",
        "description": "A valid SIM card group ID.",
        "schema": {
          "format": "uuid",
          "type": "string",
          "example": "47a1c2b0-cc7b-4ab1-bb98-b33fb0fc61b9"
        },
        "in": "query"
      },
      "FilterSipUsername": {
        "name": "filter[sip_username]",
        "in": "query",
        "description": "Filter by sip_username",
        "schema": {
          "type": "string"
        }
      },
      "FilterStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Filter by status",
        "schema": {
          "type": "string"
        }
      },
      "FilterStreetAddress": {
        "name": "filter[street_address][contains]",
        "in": "query",
        "required": false,
        "description": "If present, addresses with <code>street_address</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterUpdatedAt": {
        "name": "filter[updated_at]",
        "description": "Filter by ISO 8601 formatted date-time string matching resource last update date-time.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-02-02T22:25:27.521Z"
        },
        "in": "query"
      },
      "FilterUsedAsEmergency": {
        "name": "filter[used_as_emergency]",
        "in": "query",
        "required": false,
        "description": "If set as 'true', only addresses used as the emergency address for at least one active phone-number will be returned. When set to 'false', the opposite happens: only addresses not used as the emergency address from phone-numbers will be returned.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterDisplayName": {
        "description": "Filter by display name",
        "in": "query",
        "name": "filter[displayName]",
        "schema": {
          "type": "string"
        }
      },
      "FilterEntityType": {
        "description": "Filter by entity type",
        "in": "query",
        "name": "filter[entityType]",
        "schema": {
          "type": "string"
        }
      },
      "FilterState": {
        "description": "Filter by state",
        "in": "query",
        "name": "filter[state]",
        "schema": {
          "type": "string"
        }
      },
      "FilterCountry": {
        "description": "Filter by country",
        "in": "query",
        "name": "filter[country]",
        "schema": {
          "type": "string"
        }
      },
      "FqdnId": {
        "name": "id",
        "description": "Identifies the resource.",
        "in": "path",
        "required": true,
        "schema": {
          "pattern": "^\\d{10}",
          "type": "string",
          "example": "1517907029795014409"
        }
      },
      "Id": {
        "name": "id",
        "in": "path",
        "description": "The id of the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "IncludeOTAUpdates": {
        "name": "include_ota_updates",
        "description": "It includes the associated OTA update objects in the response when present.",
        "schema": {
          "default": false,
          "type": "boolean",
          "example": true
        },
        "in": "query"
      },
      "IncludeSIMCardGroup": {
        "name": "include_sim_card_group",
        "in": "query",
        "description": "It includes the associated SIM card group object in the response when present.",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "IntId": {
        "name": "id",
        "description": "Identifies the resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^\\d{10}",
          "example": "1293384261075731499"
        }
      },
      "IpId": {
        "name": "id",
        "description": "Identifies the type of resource.",
        "in": "path",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "LedgerBillingGroupReportId": {
        "name": "id",
        "in": "path",
        "description": "The id of the ledger billing group report",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "LinkedRecordTypeFilter": {
        "name": "filter[linked_record_type]",
        "in": "query",
        "description": "The `linked_record_type` of the document to filter on.",
        "schema": {
          "type": "string",
          "example": "porting_order"
        }
      },
      "LinkedResourceIdFilter": {
        "name": "filter[linked_resource_id]",
        "in": "query",
        "description": "The `linked_resource_id` of the document to filter on.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "MediaName": {
        "name": "media_name",
        "description": "Uniquely identifies a media resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MessagingProfileId": {
        "name": "id",
        "in": "path",
        "description": "The id of the messaging profile to retrieve",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetric": {
        "name": "id",
        "in": "query",
        "description": "The id of the messaging profile(s) to retrieve",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetricTimeFrame": {
        "name": "time_frame",
        "in": "query",
        "description": "The timeframe for which you'd like to retrieve metrics.",
        "required": false,
        "schema": {
          "type": "string",
          "default": "24h",
          "enum": [
            "1h",
            "3h",
            "24h",
            "3d",
            "7d",
            "30d"
          ]
        }
      },
      "NameFilter": {
        "name": "filter[name][contains]",
        "in": "query",
        "description": "Optional filter on outbound voice profile name.",
        "schema": {
          "type": "string",
          "example": "office-profile"
        }
      },
      "NotificationChannelId": {
        "name": "filter[notification_channel][eq]",
        "in": "query",
        "description": "Filter by the id of a notification channel",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NotificationEventConditionId": {
        "name": "filter[notification_event_condition_id][eq]",
        "in": "query",
        "description": "Filter by the id of a notification channel",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NotificationProfileId": {
        "name": "filter[notification_profile_id][eq]",
        "in": "query",
        "description": "Filter by the id of a notification profile",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NumberLookupType": {
        "name": "type",
        "in": "query",
        "required": false,
        "description": "Specifies the type of number lookup to be performed",
        "schema": {
          "type": "string",
          "enum": [
            "carrier",
            "caller-name"
          ]
        }
      },
      "OptionalTag": {
        "name": "filter[tag]",
        "in": "query",
        "description": "Filter by tag",
        "schema": {
          "type": "string"
        }
      },
      "PageNumber": {
        "name": "page[number]",
        "in": "query",
        "description": "The page number to load.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "PageSize": {
        "name": "page[size]",
        "in": "query",
        "description": "The size of the page.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 250,
          "default": 20
        }
      },
      "PathCommentID": {
        "name": "id",
        "in": "path",
        "description": "Comment id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PathPhoneNumber": {
        "name": "phone_number",
        "in": "path",
        "description": "Phone number",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PathPortingOrderID": {
        "name": "id",
        "description": "Porting Order id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "PhoneNumber": {
        "name": "phone_number",
        "description": "The phone number to be looked up",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "+18665552368"
        }
      },
      "QueryIncludePhoneNumbers": {
        "name": "include_phone_numbers",
        "in": "query",
        "required": false,
        "description": "Include the first 50 phone number objects in the results",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "RequiredTag": {
        "name": "filter[tag]",
        "required": true,
        "in": "query",
        "description": "Filter by tag, required by bulk operations.",
        "schema": {
          "type": "string"
        }
      },
      "ResourceId": {
        "name": "id",
        "description": "Identifies the resource.",
        "in": "path",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "SIMCardId": {
        "name": "sim_card_id",
        "description": "Identifies a SIM card.",
        "in": "path",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "ShortCodeId": {
        "name": "id",
        "in": "path",
        "description": "The id of the short code",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "Sort": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>email</code>: sorts the result by the\n    <code>email</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-email</code>: sorts the result by the\n    <code>email</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "email"
          ],
          "example": "email",
          "default": "created_at"
        }
      },
      "SortAddress": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>street_address</code>: sorts the result by the\n    <code>street_address</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-street_address</code>: sorts the result by the\n    <code>street_address</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "first_name",
            "last_name",
            "business_name",
            "street_address"
          ],
          "example": "street_address",
          "default": "created_at"
        }
      },
      "SortAuthenticationProvider": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>name</code>: sorts the result by the\n    <code>name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-name</code>: sorts the result by the\n    <code>name</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "-name",
            "short_name",
            "-short_name",
            "active",
            "-active",
            "created_at",
            "-created_at",
            "updated_at",
            "-updated_at"
          ],
          "example": "name",
          "default": "-created_at"
        }
      },
      "SortConnection": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "connection_name",
            "active"
          ],
          "example": "connection_name",
          "default": "created_at"
        }
      },
      "SortOutboundVoiceProfile": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code>-</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>name</code>: sorts the result by the\n    <code>name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-name</code>: sorts the result by the\n    <code>name</code> field in descending order.\n  </li>\n</ul> <br/>",
        "schema": {
          "type": "string",
          "enum": [
            "enabled",
            "-enabled",
            "created_at",
            "-created_at",
            "name",
            "-name",
            "service_plan",
            "-service_plan",
            "traffic_type",
            "-traffic_type",
            "usage_payment_method",
            "-usage_payment_method"
          ],
          "default": "-created_at",
          "example": "name"
        }
      },
      "Status": {
        "name": "filter[status][eq]",
        "in": "query",
        "description": "The status of a notification setting",
        "schema": {
          "type": "string",
          "enum": [
            "enabled",
            "enable-received",
            "enable-pending",
            "enable-submtited",
            "delete-received",
            "delete-pending",
            "delete-submitted",
            "deleted"
          ],
          "example": "enable-received"
        }
      },
      "id": {
        "name": "id",
        "description": "Identifies the resource.",
        "in": "path",
        "required": true,
        "schema": {
          "pattern": "^\\d{10}",
          "type": "string",
          "example": "1293384261075731499"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "BrandResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Brand",
                "type": "object"
              }
            }
        }
      },
      "BrandVettingResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BrandVetting",
                "type": "object"
              }
            }
        }
      },
      "GetAllBrandsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "records": {
                  "$ref": "#/components/schemas/BrandListRecord",
                  "type": "array"
              },
              "page": {
                "description": "page number of results",
                "type": "integer"
              },
              "totalRecords": {
                "description": "total results returned",
                "type": "integer"
              }
            },
            "type": "object"
            }
          }
        }
      },
      "AddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      },
      "AuthenticationProviderResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          }
        }
      },
      "BulkCredentialResponse": {
        "description": "Successful response for Bulk credential requests",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Bulk Credential Response",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "type": "integer",
                      "description": "Amount of credentials affected",
                      "example": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkSIMCardNetworkPreferenceResponse": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "Multi requested SIM cards network preferences.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardNetworkPreferenceWithOTAUpdates"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "BulkUploadDocServiceDocumentsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocServiceDocument"
                  }
                }
              }
            }
          }
        }
      },
      "CallControlApplicationResponse": {
        "description": "Successful response with details about a call control application.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Call Control Application Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlApplication"
                }
              }
            }
          }
        }
      },
      "CallControlCommandResponse": {
        "description": "Successful response upon making a call control command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Call Control Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlCommandResult"
                }
              }
            }
          }
        }
      },
      "CheckContactResponse": {
        "description": "Successful response with details about WhatsApp contact(s).",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Check Contact Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckContact"
                  }
                }
              }
            }
          }
        }
      },
      "ConferenceCommandResponse": {
        "description": "Successful response upon making a conference command.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Command Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ConferenceCommandResult"
                }
              }
            }
          }
        }
      },
      "ConferenceResponse": {
        "description": "Successful response with details about a conference.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Conference Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Conference"
                }
              }
            }
          }
        }
      },
      "ConnectionResponse": {
        "description": "Successful response with details about a connection.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Connection Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          }
        }
      },
      "CreateBillingGroupResponse": {
        "description": "Expected billing group response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BillingGroup"
                }
              }
            }
          }
        }
      },
      "CreateLedgerBillingGroupReportResponse": {
        "description": "Expected ledger billing group report response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/LedgerBillingGroupReport"
                }
              }
            }
          }
        }
      },
      "CreatePrivateWirelessGatewayResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              }
            }
          }
        }
      },
      "CreateRoomClientTokenResponse": {
        "description": "Create room client token response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "format": "uuid",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "token_expires_at": {
                      "description": "ISO 8601 timestamp when the token expires.",
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-03-26T17:51:59Z"
                    },
                    "refresh_token": {
                      "type": "string",
                      "format": "uuid",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "refresh_token_expires_at": {
                      "description": "ISO 8601 timestamp when the refresh token expires.",
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-03-26T17:51:59Z"
                    }
                  },
                  "example": {
                    "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA",
                    "token_expires_at": "2021-04-22T12:24:55Z",
                    "refresh_token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDkzNzA1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6ImQ3OWJlMzhjLWFkNTQtNGQ5ZC1hODc4LWExNjVjNTk0MGQwNyIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6InJlZnJlc2gifQ.FHsp7KlVXn1E5tTUiKZzmQ4of39gi57AakeQeqI0oAa8hzjFMVb0RGj-mxWTvHVen4GpgsUW_epqqaxK16viCA",
                    "refresh_token_expires_at": "2021-04-22T12:15:05Z"
                  }
                }
              }
            }
          }
        }
      },
      "CreateRoomResponse": {
        "description": "Create room response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "CreateSimCardGroupResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "CreateSimCardOrderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrder"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "CreateWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "CredentialConnectionResponse": {
        "description": "Successful response with details about a credential connection.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Credential Connection Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CredentialConnection"
                }
              }
            }
          }
        }
      },
      "CsvDownloadResponse": {
        "description": "Successful response with details about a CSV download.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "CSV Download Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsvDownload"
                  }
                }
              }
            }
          }
        }
      },
      "DELETESIMCardNetworkPreferenceResponse": {
        "description": "A successful network preferences deletion response. <br/><br/>\nThe delete won't be done right away - this is an asynchronous operation. The request will return the resource with an in-progress OTA update resource (in the ota_updates node) representing the delete operation. Similarly to the PUT API, the resource will only be deleted when the OTA updated is successfully completed.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardNetworkPreferenceWithOTAUpdates"
                }
              }
            }
          }
        }
      },
      "DecommissionedSIMCardPublicIPResponse": {
        "description": "A successful and synchronous decommission of a public IP. This response happens when no further processing is required. Therefore, a new public IP can be requested right away.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardPublicIP"
                }
              }
            }
          }
        }
      },
      "DeleteBillingGroupResponse": {
        "description": "Expected billing group response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BillingGroup"
                }
              }
            }
          }
        }
      },
      "DeletePhoneNumberResponse": {
        "description": "Successful response with details about a phone number.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Phone Number Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberDeletedDetailed"
                }
              }
            }
          }
        }
      },
      "DeletePrivateWirelessGatewayResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              }
            }
          }
        }
      },
      "DeleteSimCardGroupResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "DeleteSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "DeleteWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "DocReqsListRequirementTypesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DocReqsRequirementTypeList"
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "DocReqsRequirementResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DocReqsRequirement"
                }
              }
            }
          }
        }
      },
      "DocReqsRequirementTypeResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DocReqsRequirementType"
                }
              }
            }
          }
        }
      },
      "DocServiceDocumentResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DocServiceDocument"
                }
              }
            }
          }
        }
      },
      "DownloadDocServiceDocumentResponse": {
        "description": "Successful response",
        "content": {
          "*": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "DownloadLOATemplate": {
        "description": "Successful response",
        "content": {
          "application/pdf": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "FaxApplicationResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Fax Application Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FaxApplication"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FqdnConnectionResponse": {
        "description": "Successful response with details about an FQDN connection.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "FQDN Connection Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FqdnConnection"
                }
              }
            }
          }
        }
      },
      "FqdnResponse": {
        "description": "Successful response with details about an FQDN connection.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "FQDN Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fqdn"
                }
              }
            }
          }
        }
      },
      "GenericErrorResponse": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "GetAllAddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllAuthenticationProviderResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationProvider"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllFaxApplicationsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get All Fax Applications Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllPrivateWirelessGatewaysResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrivateWirelessGateway"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllSimCardGroupsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardGroup"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        },
        "description": "Successful response"
      },
      "GetAllSimCardOrdersResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        },
        "description": "Successful response"
      },
      "GetAllTelephonyCredentialResponse": {
        "description": "Successful response with multiple credentials",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get All Telephony Credential Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TelephonyCredential"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllTexmlApplicationsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get All Texml Applications Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TexmlApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetFaxResponse": {
        "description": "Get fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get Fax Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "GetPrivateWirelessGatewayResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              }
            }
          }
        }
      },
      "GetRoomParticipantResponse": {
        "description": "Get room participant response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomParticipant"
                }
              }
            }
          }
        }
      },
      "GetRoomResponse": {
        "description": "Get room response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "GetRoomSessionResponse": {
        "description": "Get room session response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomSession"
                }
              }
            }
          }
        }
      },
      "GetSimCardGroupResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "GetSimCardOrderResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrder"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "GetSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "GetWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "GetWdrReportsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WdrReport"
                  }
                }
              }
            }
          }
        }
      },
      "IpConnectionResponse": {
        "description": "Successful response with details about an IP connection.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Ip Connection Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/IpConnection"
                }
              }
            }
          }
        }
      },
      "IpResponse": {
        "description": "Successful response with details about an IP.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Ip Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Ip"
                }
              }
            }
          }
        }
      },
      "ListAvailablePhoneNumbersResponse": {
        "description": "Successful response with a list of available phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Available Phone Numbers Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailablePhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/AvailablePhoneNumbersMetadata"
                }
              }
            }
          }
        }
      },
      "ListBillingGroupsResponse": {
        "description": "A paginated array of billing groups",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillingGroup"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCallControlApplicationsResponse": {
        "description": "Successful response with a list of call control applications.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Call Control Applications Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallControlApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCallEventsResponse": {
        "description": "Successful response with a list of call events.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Call Events Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListComments": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConferencesResponse": {
        "description": "Successful response with a list of conferences.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Conferences Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConnectionsResponse": {
        "description": "Successful response with a list of connections.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Connections Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Connection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCredentialConnectionsResponse": {
        "description": "Successful response with a list of credential connections.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Credential Connections Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCsvDownloadsResponse": {
        "description": "Successful response with a list of CSV downloads.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List CSV Downloads Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsvDownload"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListDocServiceDocumentLinksResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocServiceDocumentLink"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListDocServiceDocumentsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocServiceDocument"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListFaxesResponse": {
        "description": "List faxes response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Faxes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fax"
                  }
                },
                "meta": {
                  "type": "object",
                  "example": {
                    "page_number": 2,
                    "page_size": 1,
                    "total_pages": 3,
                    "total_results": 3
                  }
                }
              }
            }
          }
        }
      },
      "ListFqdnConnectionsResponse": {
        "description": "Successful response with a list of FQDN connections.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List FQDN Connections Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FqdnConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListFqdnsResponse": {
        "description": "Successful response with a list of FQDN connections.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List FQDNs Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fqdn"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListIpConnectionsResponse": {
        "description": "Successful response with a list of IP connections.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Ip Connections Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IpConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListIpsResponse": {
        "description": "Successful response with a list of IPs.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Ips Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ip"
                  }
                }
              }
            }
          }
        }
      },
      "ListManagedAccountsResponse": {
        "description": "Successful response with a list of managed accounts.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedAccount"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMediaResponse": {
        "description": "A response with a list of media resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List of media resources response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaResource"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingHostedNumberOrdersResponse": {
        "description": "Successful response with a list of messaging hosted number orders.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Hosted Number Order Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileMetrics": {
        "description": "Successful response with a list of messaging profile metrics.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Metrics Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilePhoneNumbersResponse": {
        "description": "Successful response with a list of messaging profile phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Phone Numbers Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileShortCodesResponse": {
        "description": "Successful response with a list of messaging profile short codes.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Short Codes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilesResponse": {
        "description": "Successful response with a list of messaging profiles.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profiles Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfile"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingUrlDomains": {
        "description": "Successful response with details about a messaging URL domain.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Profile Url Domains Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingUrlDomain"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberOrderDocumentsResponse": {
        "description": "Successful response with a list of number order documents.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Number Order Documents Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberOrderDocument"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberOrderRegulatoryRequirementsResponse": {
        "description": "Successful response with a list of number order regulatory requirements.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Number Order Regulatory Requirements Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryRequirement"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberOrdersResponse": {
        "description": "Successful response with a list of number orders.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Number Orders Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberReservationsResponse": {
        "description": "Successful response with a list of number reservations.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Number Reservations Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberReservation"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListOutboundVoiceProfilesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Outbound Voice Profiles Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutboundVoiceProfile"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListParticipantsResponse": {
        "description": "Successful response with a list of conference participants.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Participants Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Participant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumberRegulatoryRequirementsResponse": {
        "description": "Successful response with a list of phone number regulatory requirements.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Phone Number Regulatory Requirements Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberRegulatoryGroup"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbers": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersJobsResponse": {
        "description": "Successful response with a list of phone numbers background jobs.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Phone Numbers Background Jobs Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumbersJob"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersResponse": {
        "description": "Successful response with a list of phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Phone Numbers Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberDetailed"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersWithMessagingSettingsResponse": {
        "description": "Successful response with a list of phone numbers with messaging settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Messaging Settings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersWithVoiceSettingsResponse": {
        "description": "Successful response with a list of phone numbers with voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Phone Numbers With Voice Settings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrderWithoutPagination": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrder"
                  }
                }
              }
            }
          }
        }
      },
      "ListPortoutComments": {
        "description": "Portout Comments",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutComment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "ListPortoutResponse": {
        "description": "Portout Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutDetails"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "ListQueueCallsResponse": {
        "description": "Successful response with a list of calls in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Queue Calls Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueCall"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRecordingsResponse": {
        "description": "Successful response with a list of recordings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Recordings Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recording"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRequirementsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DocReqsRequirementList"
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomParticipantsResponse": {
        "description": "List room participants response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomParticipant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomSessionsResponse": {
        "description": "List room sessions response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomSession"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomsResponse": {
        "description": "List rooms response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListShortCodesResponse": {
        "description": "Successful response with a list of short codes.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Short Codes Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListTagsResponse": {
        "description": "Successful response with multiple tags",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "List Tags Response",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "type": "string",
                        "example": "a_tag"
                      },
                      "amount": {
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListWebhookDeliveriesResponse": {
        "description": "A paginated array of webhook_delivery attempts",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/webhook_delivery"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMetaSimple"
                }
              }
            }
          }
        }
      },
      "ManagedAccountResponse": {
        "description": "Successful response with information about a single managed account.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ManagedAccount"
                }
              }
            }
          }
        }
      },
      "MediaDownloadResponse": {
        "description": "A response describing a media resource",
        "content": {
          "*/*": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "MediaResponse": {
        "description": "A response describing a media resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Media resource response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MediaResource"
                }
              }
            }
          }
        }
      },
      "MessageResponse": {
        "description": "Successful response with details about a message.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Message Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/OutboundMessagePayload"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberOrderResponse": {
        "description": "Successful response with details about a messaging hosted number order.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Hosted Number Order Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberResponse": {
        "description": "Successful response with details about a messaging hosted number.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Hosted Number Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/HostedNumber"
                }
              }
            }
          }
        }
      },
      "MessagingProfileResponse": {
        "description": "Successful response with details about a messaging profile.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Messaging Profile Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfile"
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Conference does not exist"
      },
      "NumberLookupResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Number Lookup Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberLookupRecord"
                }
              }
            }
          }
        }
      },
      "NumberOrderDocumentResponse": {
        "description": "Successful response with details about a number order document.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Number Order Document Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberOrderDocument"
                }
              }
            }
          }
        }
      },
      "NumberOrderRegulatoryRequirementResponse": {
        "description": "Successful response with details about a number order regulatory requirement.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Number Order Regulatory Requirement Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RegulatoryRequirement"
                }
              }
            }
          }
        }
      },
      "NumberOrderResponse": {
        "description": "Successful response with details about a number order.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Number Order Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberOrder"
                }
              }
            }
          }
        }
      },
      "NumberReservationResponse": {
        "description": "Successful response with details about a number reservation.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Number Reservation Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberReservation"
                }
              }
            }
          }
        }
      },
      "OTAUpdateResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CompleteOTAUpdate"
                }
              }
            }
          }
        }
      },
      "OutboundVoiceProfileResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Outbound Voice Profile Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/OutboundVoiceProfile"
                }
              }
            }
          }
        }
      },
      "PUTSIMCardNetworkPreferenceResponse": {
        "description": "A successful network preferences definition response. <br/><br/>\nThe sent mobile_operator_networks_preferences parameter won't be applied to the main resource right away - this is an asynchronous operation. While interacting with this API, you will face the following scenarios:\n\n  * The first request for this API will return an empty mobile_operator_networks_preferences with an in-progress OTA update resource in the ota_updates node containing the exact sent parameters to indicate the operation progress. The value will be applied to the principal object when the OTA update finishes its processing, thus indicating the SIM card network preference current state. \n  * The subsequent requests will contain the current state, that is what's applied to the SIM card settings, and return the related OTA update in the ota_updates node.\n  \nThe returned OTA updated (present in the ota_updates node) will, by default, be the resource related to the operation, not all of them.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardNetworkPreferenceWithOTAUpdates"
                }
              }
            }
          }
        }
      },
      "PhoneNumberResponse": {
        "description": "Successful response with details about a phone number.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Phone Number Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberDetailed"
                }
              }
            }
          }
        }
      },
      "PhoneNumberWithMessagingSettingsResponse": {
        "description": "Successful response with details about a phone number including voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Settings Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                }
              }
            }
          }
        }
      },
      "PhoneNumberWithVoiceSettingsResponse": {
        "description": "Successful response with details about a phone number including voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Phone Number Voice Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                }
              }
            }
          }
        }
      },
      "PortabilityCheckResponse": {
        "description": "PortabilityCheck Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortabilityCheckDetails"
                  }
                }
              }
            }
          }
        }
      },
      "PortoutCommentResponse": {
        "description": "Portout Comment Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutComment"
                }
              }
            }
          }
        }
      },
      "PortoutResponse": {
        "description": "Portout Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutDetails"
                }
              }
            }
          }
        }
      },
      "QueueCallResponse": {
        "description": "Successful response with details about a call in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Call Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/QueueCall"
                }
              }
            }
          }
        }
      },
      "QueueResponse": {
        "description": "Successful response with details about a queue.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Queue Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          }
        }
      },
      "ReceivedSIMCardPublicIPResponse": {
        "description": "A successful response on an asynchronous operation. The content in this response represents the current status of the public IP. But, it'll change during the operation processing.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardPublicIP"
                }
              }
            }
          }
        }
      },
      "RecordingResponse": {
        "description": "Successful response with details about a recording.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Get Recording Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Recording"
                }
              }
            }
          }
        }
      },
      "RefreshFaxResponse": {
        "description": "Refresh fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Refresh Fax Response",
              "example": {
                "data": {
                  "result": "ok"
                }
              },
              "properties": {
                "result": {
                  "type": "string",
                  "example": "ok"
                }
              }
            }
          }
        }
      },
      "RefreshRoomClientTokenResponse": {
        "description": "Refresh room client token response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "format": "uuid",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "token_expires_at": {
                      "description": "ISO 8601 timestamp when the token expires.",
                      "type": "string",
                      "format": "date-time",
                      "example": "2021-03-26T17:51:59Z"
                    }
                  },
                  "example": {
                    "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA",
                    "token_expires_at": "2021-04-22T12:24:55Z"
                  }
                }
              }
            }
          }
        }
      },
      "RegisterSimCardsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "Successfully registered SIM cards.",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSIMCard"
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "ResourceNotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RetrieveBillingGroupResponse": {
        "description": "Expected billing group response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BillingGroup"
                }
              }
            }
          }
        }
      },
      "RetrieveCallStatusResponse": {
        "description": "Successful response with details about a call status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Call Status Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      },
      "RetrieveLedgerBillingGroupReportResponse": {
        "description": "Expected ledger billing group report response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/LedgerBillingGroupReport"
                }
              }
            }
          }
        }
      },
      "RetrieveMessagingProfileMetrics": {
        "description": "Successful response with details about a messaging profile's metrics.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Retrieve Messaging Profile Metrics Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfileDetailedMetrics"
                }
              }
            }
          }
        }
      },
      "RetrievePortoutResponse": {
        "description": "Expected portout response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutDetails"
                }
              }
            }
          }
        }
      },
      "SIMCardGroupActionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroupAction"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "SIMCardNetworkPreferenceResponse": {
        "description": "A successful network preferences definition response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardNetworkPreference"
                }
              }
            }
          }
        }
      },
      "SIMCardNetworkPreferenceWithOTAUpdatesResponse": {
        "description": "A successful network preferences definition response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardNetworkPreferenceWithOTAUpdates"
                }
              }
            }
          }
        }
      },
      "SIMCardOrdersPreviewResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrderPreview"
                }
              }
            }
          }
        }
      },
      "SIMCardPublicIPResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardPublicIP"
                }
              }
            }
          }
        }
      },
      "SearchMobileOperatorNetworksResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MobileOperatorNetwork"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SearchOTAUpdateResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplifiedOTAUpdate"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SearchSimCardsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSIMCard"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SendFaxResponse": {
        "description": "Send fax response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Send Fax Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "ShortCodeResponse": {
        "description": "Successful response with details about a short code.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Short Code Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ShortCode"
                }
              }
            }
          }
        }
      },
      "ShowComment": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Comment"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "port_request_url": {
                      "type": "string",
                      "description": "Link to show port request",
                      "example": "/porting_orders/?filter[id]=6dedc3d4-4db8-4b12-91bd-c0d28a9d955b"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ShowPhoneNumber": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumber"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "porting_order_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to list porting order",
                      "example": "/porting_orders/a700d03c-4062-4091-8189-1b75216cf7a2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ShowPortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrder"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "phone_numbers_url": {
                      "type": "string",
                      "description": "Link to list all phone numbers",
                      "example": "/porting_phone_numbers?filter[porting_order_id]=a700d03c-4062-4091-8189-1b75216cf7a2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SimCardGroupActionCollectionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardGroupAction"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        },
        "description": "Successful response"
      },
      "SimpleSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SimpleSIMCard"
                }
              }
            }
          }
        }
      },
      "TelephonyCredentialResponse": {
        "description": "Successful response with details about a credential",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Telephony Credential Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TelephonyCredential"
                }
              }
            }
          }
        }
      },
      "TexmlApplicationResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Texml Application Response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TexmlApplication"
                }
              }
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized response. Happens when the current user is not a manager account."
      },
      "UnprocessableEntity": {
        "description": "Unprocessable entity. Check the 'detail' field in response for details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "UnprocessableEntityResponse": {
        "description": "Unprocessable entity"
      },
      "UnprocessableManagedAccountEntity": {
        "description": "Unprocessable entity. Check the 'detail' field in response for details.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnprocessableEntityError"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateBillingGroupResponse": {
        "description": "Expected billing group response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BillingGroup"
                }
              }
            }
          }
        }
      },
      "UpdatePortoutResponse": {
        "description": "Expected portout response to a valid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutDetails"
                }
              }
            }
          }
        }
      },
      "UpdateSimCardGroupResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        },
        "description": "Successful Response"
      },
      "UpdateSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "UploadMediaResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Upload Media.",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UploadMedia"
                  }
                }
              }
            }
          }
        }
      },
      "UploadedMediaResponse": {
        "description": "Successful response",
        "content": {
          "*": {
            "schema": {
              "type": "string",
              "title": "The requested media.",
              "format": "binary"
            }
          }
        }
      },
      "UserBalanceResponse": {
        "description": "Retrieve user balance details",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UserBalance"
                }
              }
            }
          }
        }
      },
      "ValidateAddressResponse": {
        "description": "Action response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Validate address action response",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ValidateAddressResult"
                }
              }
            }
          }
        }
      },
      "WhatsAppMessageResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Successful response with details about the WhatsApp message sent.",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      },
      "WhatsAppUserResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Successful response with details about the WhatsApp message sent.",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WhatsAppUser"
                }
              }
            }
          }
        }
      },
      "WirelessConnectivityLogCollectionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WirelessConnectivityLog"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        },
        "description": "Successful response"
      }
    },
    "schemas": {
      "Brand": {
        "type": "object",
        "properties": {
          "altBusinessId": {
            "$ref": "#/components/schemas/10dlc_alt_business_id"
          },
          "altBusinessIdType": {
            "$ref": "#/components/schemas/10dlc_alt_business_id_type"
          },
          "brandId": {
            "$ref": "#/components/schemas/10dlc_brand_id"
          },
          "brandRelationship": {
            "$ref": "#/components/schemas/10dlc_brand_relationship"
          },
          "companyName": {
            "$ref": "#/components/schemas/10dlc_company_name"
          },
          "cspId": {
            "$ref": "#/components/schemas/10dlc_csp_id"
          },
          "displayName": {
            "$ref": "#/components/schemas/10dlc_display_name"
          },
          "ein": {
            "$ref": "#/components/schemas/10dlc_ein"
          },
          "email": {
            "$ref": "#/components/schemas/10dlc_email"
          },
          "entityType": {
            "$ref": "#/components/schemas/10dlc_entity_type"
          },
          "ipAddress": {
            "$ref": "#/components/schemas/10dlc_ip_address"
          },
          "phone": {
            "$ref": "#/components/schemas/phone_number"
          },
          "street": {
            "$ref": "#/components/schemas/street_address"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "postalCode": {
            "$ref": "#/components/schemas/postal_code"
          },
          "country": {
            "$ref": "#/components/schemas/country_code"
          },
          "stockSymbol": {
            "$ref": "#/components/schemas/10dlc_stock_symbol"
          },
          "stockExchange": {
            "$ref": "#/components/schemas/10dlc_stock_exchange"
          },
          "vertical": {
            "$ref": "#/components/schemas/10dlc_vertical"
          },
          "website": {
            "$ref": "#/components/schemas/10dlc_website"
          },
          "universalEin": {
            "$ref": "#/components/schemas/10dlc_universal_ein"
          }
        }
      },
      "BrandListRecord": {
        "type": "object",
        "properties": {
          "brandId": {
            "$ref": "#/components/schemas/10dlc_brand_id"
          },
          "companyName": {
            "$ref": "#/components/schemas/10dlc_company_name"
          },
          "displayName": {
            "$ref": "#/components/schemas/10dlc_display_name"
          },
          "email": {
            "$ref": "#/components/schemas/10dlc_email"
          },
          "entityType": {
            "$ref": "#/components/schemas/10dlc_entity_type"
          },
          "website": {
            "$ref": "#/components/schemas/10dlc_website"
          },
          "createdAt": {
            "description": "Datetime brand created",
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "description": "Datetime brand updated",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "BrandRequest": {
        "type": "object",
        "schema": {
          "$ref": "#/components/schemas/Brand"
        },
        "required": [
          "entityType",
          "displayName",
          "country",
          "email",
          "vertical"
        ],
      },
      "BrandVetting": {
        "type": "object",
        "properties": {
          "evpId": {
            "$ref": "#/components/schemas/10dlc_evp_id"
          },
          "vettingClass": {
            "$ref": "#/components/schemas/10dlc_vetting_class"
          },
          "vettingToken": {
            "description": "token used for vetting",
            "format": "uuid",
            "type": "string"
          },
          "vettingScore": {
            "description": "Vetting score for brand",
            "type": "integer",
            "minimum": 50,
            "maximum": 100,
            "example": 80
          },
          "vettedDate": {
            "description": "date vetted",
            "format": "date-time",
            "type": "string"
          },
          "createDate": {
            "description": "date created",
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "ActivationStatus": {
        "type": "string",
        "description": "Activation status",
        "enum": [
          "New",
          "Pending",
          "Conflict",
          "Cancel Pending",
          "Failed",
          "Concurred",
          "Activate RDY",
          "Disconnect Pending",
          "Concurrence Sent",
          "Old",
          "Sending",
          "Active",
          "Canceled"
        ],
        "example": "Active"
      },
      "Address": {
        "type": "object",
        "title": "Address",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Uniquely identifies the address.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "address"
          },
          "customer_reference": {
            "$ref": "#/components/schemas/customer_reference"
          },
          "first_name": {
            "$ref": "#/components/schemas/first_name"
          },
          "last_name": {
            "$ref": "#/components/schemas/last_name"
          },
          "business_name": {
            "$ref": "#/components/schemas/business_name"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          },
          "street_address": {
            "$ref": "#/components/schemas/street_address"
          },
          "extended_address": {
            "$ref": "#/components/schemas/extended_address"
          },
          "locality": {
            "$ref": "#/components/schemas/locality"
          },
          "administrative_area": {
            "$ref": "#/components/schemas/administrative_area"
          },
          "neighborhood": {
            "$ref": "#/components/schemas/neighborhood"
          },
          "borough": {
            "$ref": "#/components/schemas/borough"
          },
          "postal_code": {
            "$ref": "#/components/schemas/postal_code"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          },
          "address_book": {
            "$ref": "#/components/schemas/address_book"
          },
          "validate_address": {
            "$ref": "#/components/schemas/validate_address"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "AddressCreate": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "business_name",
          "street_address",
          "locality",
          "country_code"
        ],
        "properties": {
          "customer_reference": {
            "$ref": "#/components/schemas/customer_reference"
          },
          "first_name": {
            "$ref": "#/components/schemas/first_name"
          },
          "last_name": {
            "$ref": "#/components/schemas/last_name"
          },
          "business_name": {
            "$ref": "#/components/schemas/business_name"
          },
          "phone_number": {
            "$ref": "#/components/schemas/phone_number"
          },
          "street_address": {
            "$ref": "#/components/schemas/street_address"
          },
          "extended_address": {
            "$ref": "#/components/schemas/extended_address"
          },
          "locality": {
            "$ref": "#/components/schemas/locality"
          },
          "administrative_area": {
            "$ref": "#/components/schemas/administrative_area"
          },
          "neighborhood": {
            "$ref": "#/components/schemas/neighborhood"
          },
          "borough": {
            "$ref": "#/components/schemas/borough"
          },
          "postal_code": {
            "$ref": "#/components/schemas/postal_code"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          },
          "address_book": {
            "$ref": "#/components/schemas/address_book"
          },
          "validate_address": {
            "$ref": "#/components/schemas/validate_address"
          }
        }
      },
      "AnchorsiteOverride": {
        "title": "Anchorsite Override",
        "type": "string",
        "description": "`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.",
        "enum": [
          "Latency",
          "Chicago, IL",
          "Ashburn, VA",
          "San Jose, CA",
          "Sydney, Australia",
          "Amsterdam, Netherlands",
          "London, UK",
          "Toronto, Canada",
          "Vancouver, Canada",
          "Frankfurt, Germany"
        ],
        "default": "Latency",
        "example": "Amsterdam, Netherlands"
      },
      "AnswerRequest": {
        "type": "object",
        "title": "Answer Request",
        "properties": {
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST"
        }
      },
      "ApplicationName": {
        "title": "Application Name",
        "type": "string",
        "description": "A user-assigned name to help manage the application.",
        "example": "call-router"
      },
      "Audio": {
        "title": "Audio",
        "description": "The media object containing audio details.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The media object ID returned when the media is successfully uploaded to the media endpoint.",
            "example": "your-media-id"
          },
          "link": {
            "type": "string",
            "description": "The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.",
            "example": "http://www.example.com/file"
          }
        },
        "example": {
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
        }
      },
      "AuthenticationProvider": {
        "type": "object",
        "title": "AuthenticationProvider",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the authentication provider.",
            "example": "35146afd-df93-4963-b1e9-1a085e2ae874"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "authentication_provider"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "short_name": {
            "$ref": "#/components/schemas/short_name"
          },
          "organization_id": {
            "$ref": "#/components/schemas/organization_id"
          },
          "active": {
            "$ref": "#/components/schemas/active"
          },
          "settings": {
            "type": "object",
            "description": "The settings associated with the authentication provider.",
            "properties": {
              "assertion_consumer_service_url": {
                "type": "string",
                "description": "The Assertion Consumer Service URL for the service provider (Telnyx).",
                "example": "https://api.telnyx.com/sso/saml/auth/myorg"
              },
              "service_provider_entity_id": {
                "type": "string",
                "description": "The Entity ID for the service provider (Telnyx).",
                "example": "https://api.telnyx.com/sso/saml/metadata/myorg"
              },
              "idp_entity_id": {
                "type": "string",
                "description": "The Entity ID for the identity provider (IdP).",
                "example": "https://myorg.myidp.com/saml/metadata"
              },
              "idp_sso_target_url": {
                "type": "string",
                "description": "The SSO target url for the identity provider (IdP).",
                "example": "https://myorg.myidp.com/trust/saml2/http-post/sso"
              },
              "idp_cert_fingerprint": {
                "type": "string",
                "description": "The certificate fingerprint for the identity provider (IdP)",
                "example": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7"
              },
              "idp_cert_fingerprint_algorithm": {
                "type": "string",
                "description": "The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
                "enum": [
                  "sha1",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "example": "sha256",
                "default": "sha1"
              },
              "name_identifier_format": {
                "type": "string",
                "description": "The name identifier format associated with the authentication provider. This must be the same for both the Identity Provider (IdP) and the service provider (Telnyx).",
                "example": "urn:oasis:names:tc:SAML:1.1:nameid-format"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "AuthenticationProviderCreate": {
        "type": "object",
        "required": [
          "name",
          "short_name",
          "settings"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "short_name": {
            "$ref": "#/components/schemas/short_name"
          },
          "active": {
            "$ref": "#/components/schemas/active"
          },
          "settings": {
            "$ref": "#/components/schemas/settings"
          },
          "settings_url": {
            "$ref": "#/components/schemas/settings_url"
          }
        }
      },
      "AvailablePhoneNumber": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "available_phone_number",
            "enum": [
              "available_phone_number"
            ]
          },
          "phone_number": {
            "type": "string",
            "example": "+19705555098"
          },
          "vanity_format": {
            "type": "string"
          },
          "best_effort": {
            "type": "boolean",
            "description": "Specifies whether the phone number is an exact match based on the search criteria or not.",
            "example": false
          },
          "quickship": {
            "type": "boolean",
            "description": "Specifies whether the phone number can receive calls immediately after purchase or not.",
            "example": true
          },
          "reservable": {
            "type": "boolean",
            "description": "Specifies whether the phone number can be reserved before purchase or not.",
            "example": true
          },
          "region_information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInformation"
            }
          },
          "cost_information": {
            "$ref": "#/components/schemas/CostInformation"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegulatoryRequirement"
            }
          }
        },
        "example": {
          "record_type": "available_phone_number",
          "phone_number": "+19705555098",
          "vanity_format": "",
          "best_effort": false,
          "quickship": true,
          "reservable": true,
          "region_information": [
            {
              "region_type": "country_code",
              "region_name": "US"
            }
          ],
          "cost_information": {
            "upfront_cost": "3.21",
            "monthly_cost": "6.54",
            "currency": "USD"
          },
          "regulatory_requirements": [
            {
              "requirement_type": "end user proof of address",
              "label": "Proof of Address",
              "field_type": "address",
              "description": "Requirement for providing Proof of Address."
            }
          ]
        }
      },
      "AvailablePhoneNumbersMetadata": {
        "type": "object",
        "example": {
          "total_results": 100,
          "best_effort_results": 50
        },
        "properties": {
          "total_results": {
            "type": "integer",
            "example": 1
          },
          "best_effort_results": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "BillingGroup": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "billing_group",
            "enum": [
              "billing_group"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the organization that owns the resource.",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "name": {
            "type": "string",
            "maxLength": 10,
            "description": "A user-specified name for the billing group",
            "example": "My billing group name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was removed.",
            "example": null
          }
        },
        "example": {
          "record_type": "billing_group",
          "id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "organization_id": "f1486bae-f067-460c-ad43-73a92848f902",
          "name": "My billing group name",
          "created_at": "2019-10-15T10:07:15.527Z",
          "updated_at": "2019-10-15T10:07:15.527Z",
          "deleted_at": null
        }
      },
      "BridgeRequest": {
        "type": "object",
        "title": "Bridge Request",
        "required": [
          "call_control_id"
        ],
        "properties": {
          "call_control_id": {
            "description": "The Call Control ID of the call you want to bridge with.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "queue": {
            "description": "The name of the queue you want to bridge with, can't be used together with call_control_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.",
            "type": "string",
            "example": "support"
          },
          "park_after_unbridge": {
            "description": "Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.",
            "type": "string",
            "example": "self"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "park_after_unbridge": "self"
        }
      },
      "BulkCredentialRequest": {
        "type": "object",
        "title": "Bulk Credential Request",
        "required": [
          "tag",
          "connection_id"
        ],
        "properties": {
          "name": {
            "description": "A default name for all credentials.",
            "type": "string",
            "example": "Default Credentials"
          },
          "tag": {
            "description": "Tags a credential for bulk operations. A single tag can hold at maximum 1000 credentials.",
            "type": "string",
            "example": "My Credentials"
          },
          "amount": {
            "description": "Amount of credentials to be created. A single tag can hold at maximum 1000 credentials",
            "type": "integer",
            "example": 100
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection this credential is associated with.",
            "example": "1234567890"
          }
        },
        "example": {
          "name": "Default Name",
          "tag": "My Credentials",
          "connection_id": "804252963366242252"
        }
      },
      "Call": {
        "type": "object",
        "title": "Call",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type"
        ],
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "is_alive": false,
          "record_type": "call"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call"
            ],
            "example": "call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "is_alive": {
            "description": "Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).",
            "type": "boolean",
            "example": true
          }
        }
      },
      "CallAnswered": {
        "type": "object",
        "title": "Call Answered",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.answered",
            "enum": [
              "call.answered"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "answered",
                "enum": [
                  "answered"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.answered",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "answered"
          }
        }
      },
      "CallAnsweredEvent": {
        "type": "object",
        "title": "Call Answered Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAnswered"
          }
        }
      },
      "CallBridged": {
        "type": "object",
        "title": "Call Bridged",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.bridged",
            "enum": [
              "call.bridged"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "state": {
                "type": "string",
                "example": "bridged",
                "enum": [
                  "bridged"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.bridged",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "bridged"
          }
        }
      },
      "CallBridgedEvent": {
        "type": "object",
        "title": "Call Bridged Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallBridged"
          }
        }
      },
      "CallControlApplication": {
        "type": "object",
        "title": "Call Control Application",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "example": "1293384261075731499"
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "record_type": {
            "type": "string",
            "enum": [
              "call_control_application"
            ],
            "default": "call_control_application"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was last updated",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as `https`.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as `https`.",
            "example": "https://example.com"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "application_name": "call-router",
          "created_at": "2018-02-02T22:25:27.521Z",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "id": "1293384261075731499",
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "record_type": "call_control_application",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_event_url": "https://example.com",
          "webhook_timeout_secs": 25
        }
      },
      "CallControlApplicationInbound": {
        "type": "object",
        "title": "Call Control Application Inbound",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "example": 10,
            "default": null
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
            "example": "example",
            "default": null
          },
          "sip_subdomain_receive_settings": {
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "example": "only_my_connections",
            "default": "from_anyone"
          }
        }
      },
      "CallControlApplicationOutbound": {
        "type": "object",
        "title": "Call Control Application Outbound",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
            "example": 10,
            "default": null
          },
          "outbound_voice_profile_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the associated outbound voice profile.",
            "example": "1293384261075731499"
          }
        }
      },
      "CallControlCommandResult": {
        "type": "object",
        "title": "Call Control Command Result",
        "example": {
          "result": "ok"
        },
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "CallDtmfReceived": {
        "type": "object",
        "title": "Call DTMF Received",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.dtmf.received",
            "enum": [
              "call.dtmf.received"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Identifies the type of resource."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digit": {
                "type": "string",
                "example": "#",
                "description": "The received DTMF digit or symbol."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dtmf.received",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digit": "#"
          }
        }
      },
      "CallDtmfReceivedEvent": {
        "type": "object",
        "title": "Call DTMF Received Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallDtmfReceived"
          }
        }
      },
      "CallEnqueued": {
        "type": "object",
        "title": "Call Enqueued",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.enqueued",
            "enum": [
              "call.enqueued"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "current_position": {
                "type": "integer",
                "example": 7,
                "description": "Current position of the call in the queue."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.enqueued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "current_position": 5
          }
        }
      },
      "CallEnqueuedEvent": {
        "type": "object",
        "title": "Call Enqueued Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallEnqueued"
          }
        }
      },
      "CallEvent": {
        "type": "object",
        "title": "Call Event",
        "required": [
          "record_type",
          "call_leg_id",
          "call_session_id",
          "event_timestamp",
          "name",
          "type",
          "metadata"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "call_event"
            ],
            "example": "call_event"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies an individual call leg.",
            "example": "308fe500-5213-11e9-ace7-02420a0f0668"
          },
          "call_session_id": {
            "type": "string",
            "description": "Uniquely identifies the call control session. A session may include multiple call leg events.",
            "example": "308fec30-5213-11e9-9d3f-02420a0f0668"
          },
          "event_timestamp": {
            "type": "string",
            "description": "Event timestamp",
            "example": "2019-03-29T11:10:19.127783Z"
          },
          "name": {
            "type": "string",
            "description": "Event name",
            "example": "call.hangup"
          },
          "type": {
            "type": "string",
            "description": "Event type",
            "enum": [
              "command",
              "webhook"
            ],
            "example": "webhook"
          },
          "metadata": {
            "type": "object",
            "description": "Event metadata, which includes raw event, and extra information based on event type"
          }
        },
        "example": {
          "record_type": "call_event",
          "call_leg_id": "308fe500-5213-11e9-ace7-02420a0f0668",
          "call_session_id": "308fec30-5213-11e9-9d3f-02420a0f0668",
          "event_timestamp": "2019-03-29T11:10:19.127783Z",
          "name": "call.hangup",
          "type": "webhook",
          "metadata": {}
        }
      },
      "CallForkStarted": {
        "type": "object",
        "title": "Call Fork Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.started",
            "enum": [
              "call.fork.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          }
        }
      },
      "CallForkStartedEvent": {
        "type": "object",
        "title": "Call Fork Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStarted"
          }
        }
      },
      "CallForkStopped": {
        "type": "object",
        "title": "Call Fork Stopped",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.fork.stopped",
            "enum": [
              "call.fork.stopped"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.stopped",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          }
        }
      },
      "CallForkStoppedEvent": {
        "type": "object",
        "title": "Call Fork Stopped Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStopped"
          }
        }
      },
      "CallForwarding": {
        "description": "The call forwarding settings for a phone number.",
        "type": "object",
        "properties": {
          "call_forwarding_enabled": {
            "type": "boolean",
            "default": true,
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "example": true
          },
          "forwards_to": {
            "type": "string",
            "description": "The phone number to which inbound calls to this number are forwarded. Inbound calls will not be forwarded if this field is left blank. If set, must be a +E.164-formatted phone number."
          },
          "forwarding_type": {
            "type": "string",
            "description": "Call forwarding type. 'forwards_to' must be set for this to have an effect.",
            "enum": [
              "always",
              "on_failure"
            ],
            "example": "always"
          }
        },
        "example": {
          "call_forwarding_enabled": true,
          "forwards_to": "+13035559123",
          "forwarding_type": "always"
        }
      },
      "CallGatherEnded": {
        "type": "object",
        "title": "Call Gather Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.gather.ended",
            "enum": [
              "call.gather.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "digits": {
                "type": "string",
                "example": "5503",
                "description": "The received DTMF digit or symbol."
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.gather.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digits": "123",
            "status": "valid"
          }
        }
      },
      "CallGatherEndedEvent": {
        "type": "object",
        "title": "Call Gather Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallGatherEnded"
          }
        }
      },
      "CallHangup": {
        "type": "object",
        "title": "Call Hangup",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.hangup",
            "enum": [
              "call.hangup"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "start_time": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when the call started."
              },
              "state": {
                "type": "string",
                "example": "hangup",
                "enum": [
                  "hangup"
                ],
                "description": "State received from a command."
              },
              "hangup_cause": {
                "type": "string",
                "example": "call_rejected",
                "enum": [
                  "call_rejected",
                  "normal_clearing",
                  "originator_cancel",
                  "timeout",
                  "time_limit",
                  "user_busy",
                  "not_found",
                  "unspecified"
                ],
                "description": "The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`)."
              },
              "hangup_source": {
                "type": "string",
                "example": "caller",
                "enum": [
                  "caller",
                  "callee",
                  "unknown"
                ],
                "description": "The party who ended the call (`callee`, `caller`, `unknown`)."
              },
              "sip_hangup_cause": {
                "type": "string",
                "example": "603",
                "description": "The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.hangup",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "start_time": "2018-02-02T22:20:27.521992Z",
            "state": "hangup",
            "hangup_cause": "call_rejected",
            "hangup_source": "caller",
            "sip_hangup_cause": "603"
          }
        }
      },
      "CallHangupEvent": {
        "type": "object",
        "title": "Call Hangup Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallHangup"
          }
        }
      },
      "CallInitiated": {
        "type": "object",
        "title": "Call Initiated",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.initiated",
            "enum": [
              "call.initiated"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "direction": {
                "type": "string",
                "example": "incoming",
                "enum": [
                  "incoming",
                  "outgoing"
                ],
                "description": "Whether the call is `incoming` or `outgoing`."
              },
              "state": {
                "type": "string",
                "example": "parked",
                "enum": [
                  "parked",
                  "bridging"
                ],
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.initiated",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "direction": "incoming",
            "state": "parked"
          }
        }
      },
      "CallInitiatedEvent": {
        "type": "object",
        "title": "Call Initiated Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallInitiated"
          }
        }
      },
      "CallLeftQueue": {
        "type": "object",
        "title": "Call Left Queue",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.left.queue",
            "enum": [
              "call.left.queue"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "queue": {
                "type": "string",
                "example": "support",
                "description": "The name of the queue"
              },
              "reason": {
                "type": "string",
                "description": "The reason for leaving the queue",
                "example": "bridged",
                "enum": [
                  "bridged",
                  "bridging-in-process",
                  "hangup",
                  "leave",
                  "timeout"
                ]
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.left.queue",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "reason": "leave"
          }
        }
      },
      "CallLeftQueueEvent": {
        "type": "object",
        "title": "Call Left Queue Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallLeftQueue"
          }
        }
      },
      "CallMachineDetectionEnded": {
        "type": "object",
        "title": "Call Machine Detection Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.detection.ended",
            "enum": [
              "call.machine.detection.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "machine",
                "enum": [
                  "human",
                  "machine",
                  "not_sure"
                ],
                "description": "Answering machine detection result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "human"
          }
        }
      },
      "CallMachineDetectionEndedEvent": {
        "type": "object",
        "title": "Call Machine Detection Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineDetectionEnded"
          }
        }
      },
      "CallMachineGreetingEnded": {
        "type": "object",
        "title": "Call Machine Greeting Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.machine.greeting.ended",
            "enum": [
              "call.machine.greeting.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              },
              "result": {
                "type": "string",
                "example": "ended",
                "enum": [
                  "ended",
                  "not_sure"
                ],
                "description": "Answering machine greeting ended result."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "ended"
          }
        }
      },
      "CallMachineGreetingEndedEvent": {
        "type": "object",
        "title": "Call Machine Greeting Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineGreetingEnded"
          }
        }
      },
      "CallPlaybackEnded": {
        "type": "object",
        "title": "Call Playback Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.ended",
            "enum": [
              "call.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the audio is going to be played in overlay mode or not."
              },
              "status": {
                "type": "string",
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup"
                ],
                "example": "valid",
                "description": "Reflects how command ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_name": "my_media_uploaded_to_media_storage_api",
            "overlay": false,
            "status": "valid"
          }
        }
      },
      "CallPlaybackEndedEvent": {
        "type": "object",
        "title": "Call Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackEnded"
          }
        }
      },
      "CallPlaybackStarted": {
        "type": "object",
        "title": "Call Playback Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.playback.started",
            "enum": [
              "call.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "overlay": {
                "type": "boolean",
                "example": false,
                "description": "Whether the audio is going to be played in overlay mode or not."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_url": "http://example.com/audio.wav",
            "overlay": false
          }
        }
      },
      "CallPlaybackStartedEvent": {
        "type": "object",
        "title": "Call Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackStarted"
          }
        }
      },
      "CallRecording": {
        "description": "The call recording settings for a phone number.",
        "type": "object",
        "properties": {
          "inbound_call_recording_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, any inbound call to this number will be recorded."
          },
          "inbound_call_recording_format": {
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "default": "wav",
            "description": "The audio file format for calls being recorded."
          },
          "inbound_call_recording_channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "default": "single",
            "description": "When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B."
          }
        },
        "example": {
          "inbound_call_recording_enabled": true,
          "inbound_call_recording_format": "wav",
          "inbound_call_recording_channels": "single"
        }
      },
      "CallRecordingSaved": {
        "type": "object",
        "title": "Call Recording Saved",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.recording.saved",
            "enum": [
              "call.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "recording_started_at": "2018-02-02T22:20:27.521992Z",
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "channels": "single",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        }
      },
      "CallRecordingSavedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallRecordingSaved"
          }
        }
      },
      "CallReferCompleted": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.completed",
            "enum": [
              "call.refer.completed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 200,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.completed",
          "id": "4ce4366d-8d87-44be-a00b-942154e9c5f5",
          "occurred_at": "2020-03-30T13:29:44.650000Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 200,
            "to": "+13129457420"
          }
        }
      },
      "CallReferCompletedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferCompleted"
          }
        }
      },
      "CallReferFailed": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.failed",
            "enum": [
              "call.refer.failed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 603,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.failed",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 603,
            "to": "+13129457420"
          }
        }
      },
      "CallReferFailedEvent": {
        "type": "object",
        "title": "Call Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferFailed"
          }
        }
      },
      "CallReferStarted": {
        "type": "object",
        "title": "Call Refer Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.refer.started",
            "enum": [
              "call.refer.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
                "description": "Unique ID for controlling the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "from": {
                "type": "string",
                "example": "+35319605860",
                "description": "Number or SIP URI placing the call."
              },
              "sip_notify_response": {
                "type": "integer",
                "example": 100,
                "description": "SIP NOTIFY event status for tracking the REFER attempt."
              },
              "to": {
                "type": "string",
                "example": "+13129457420",
                "description": "Destination number or SIP URI of the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.started",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.130013Z",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 100,
            "to": "+13129457420"
          }
        }
      },
      "CallReferStartedEvent": {
        "type": "object",
        "title": "Call Refer Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferStarted"
          }
        }
      },
      "CallRequest": {
        "type": "object",
        "title": "Dial Request",
        "required": [
          "connection_id",
          "to",
          "from"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "link_to": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg==",
          "sip_auth_username": "username",
          "sip_auth_password": "password"
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out to.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "connection_id": {
            "type": "string",
            "description": "The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination."
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32"
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "billing_group_id": {
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "link_to": {
            "description": "Use another call's control id for sharing the same call session id",
            "type": "string",
            "example": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg=="
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        }
      },
      "CallSpeakEnded": {
        "type": "object",
        "title": "Call Speak Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.ended",
            "enum": [
              "call.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "status": {
                "type": "string",
                "example": "completed",
                "enum": [
                  "completed",
                  "call_hangup"
                ],
                "description": "Reflects how `speak` ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "status": "completed"
          }
        }
      },
      "CallSpeakEndedEvent": {
        "type": "object",
        "title": "Call Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakEnded"
          }
        }
      },
      "CallSpeakStarted": {
        "type": "object",
        "title": "Call Speak Started",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.speak.started",
            "enum": [
              "call.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "CallSpeakStartedEvent": {
        "type": "object",
        "title": "Call Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakStarted"
          }
        }
      },
      "CallerName": {
        "type": "object",
        "properties": {
          "caller_name": {
            "type": "string",
            "description": "The name of the requested phone number's owner as per the CNAM database",
            "example": "TELNYX LLC"
          },
          "error_code": {
            "type": "string",
            "description": "A caller-name lookup specific error code, expressed as a stringified 5-digit integer",
            "example": "10001"
          }
        }
      },
      "Carrier": {
        "type": "object",
        "properties": {
          "mobile_country_code": {
            "type": "string",
            "description": "Region code that matches the specific country calling code if the requested phone number type is mobile",
            "example": "US"
          },
          "mobile_network_code": {
            "type": "string",
            "description": "National destination code (NDC), with a 0 prefix, if an NDC is found and the requested phone number type is mobile",
            "example": "0866"
          },
          "name": {
            "type": "string",
            "description": "SPID (Service Provider ID) name, if the requested phone number has been ported; otherwise, the name of carrier who owns the phone number block",
            "example": "Telnyx/4"
          },
          "type": {
            "type": "string",
            "description": "A phone number type that identifies the type of service associated with the requested phone number",
            "enum": [
              "fixed line",
              "mobile",
              "voip",
              "fixed line or mobile",
              "toll free",
              "premium rate",
              "shared cost",
              "personal number",
              "pager",
              "uan",
              "voicemail",
              "unknown"
            ],
            "example": "voip"
          },
          "error_code": {
            "type": "string",
            "description": "Unused",
            "example": null
          }
        }
      },
      "CdrGetSyncUsageReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CdrUsageReportResponse"
          }
        }
      },
      "CdrUsageReportResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource",
            "format": "uuid"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "connections": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "example": "[1234567890L, 9876543210L]",
            "items": {
              "type": "integer",
              "pattern": "^\\d{10}"
            }
          },
          "aggregation_type": {
            "type": "string",
            "enum": [
              "NO_AGGREGATION",
              "CONNECTION",
              "TAG",
              "BILLING_GROUP"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ]
          },
          "report_url": {
            "type": "string",
            "example": "http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv"
          },
          "result": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "record_type": {
            "type": "string",
            "example": "cdr_usage_report"
          },
          "product_breakdown": {
            "type": "string",
            "enum": [
              "NO_BREAKDOWN",
              "DID_VS_TOLL_FREE",
              "COUNTRY",
              "DID_VS_TOLL_FREE_PER_COUNTRY"
            ]
          }
        }
      },
      "CheckContact": {
        "title": "Check Contact",
        "description": "",
        "type": "object",
        "example": {
          "record_type": "whatsapp_contact",
          "input": "+1 (512) 555-1234",
          "status": "valid",
          "id": "15125551234"
        },
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "whatsapp_contact"
            ],
            "readOnly": true
          },
          "input": {
            "description": "The value you sent in the contacts field of the JSON request.",
            "type": "string"
          },
          "status": {
            "description": "Status of the user.",
            "enum": [
              "processing",
              "valid",
              "invalid"
            ],
            "type": "string",
            "x-enum-descriptions": [
              "processing: Input is still being processed.",
              "valid: Input determined to be a valid WhatsApp user.",
              "invalid: Input determined to not be a valid WhatsApp user or the phone number is in a bad format."
            ]
          },
          "id": {
            "description": "WhatsApp user identifier that can be used in other API calls. Only returned if the status is valid.",
            "type": "string"
          }
        }
      },
      "CheckContactRequestBody": {
        "title": "Check Contact Request Body",
        "required": [
          "whatsapp_user_id",
          "contacts"
        ],
        "type": "object",
        "properties": {
          "whatsapp_user_id": {
            "description": "The sender's WhatsApp ID.",
            "type": "string"
          },
          "blocking": {
            "description": "Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).",
            "default": "no_wait",
            "enum": [
              "no_wait",
              "wait"
            ],
            "type": "string"
          },
          "contacts": {
            "description": "Array of contact phone numbers. The numbers can be in any standard telephone number format.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "whatsapp_user_id": "15125551212",
          "blocking": "wait",
          "contacts": [
            "15125551000",
            "+1 512 555 1001",
            "5125551002",
            "+1 (512) 555-1004",
            "1-512-555-1005"
          ]
        }
      },
      "CnamListing": {
        "description": "The CNAM listing settings for a phone number.",
        "type": "object",
        "properties": {
          "cnam_listing_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enables CNAM listings for this number. Requires cnam_listing_details to also be set."
          },
          "cnam_listing_details": {
            "type": "string",
            "description": "The CNAM listing details for this number. Must be alphanumeric characters or spaces with a maximum length of 15. Requires cnam_listing_enabled to also be set to true."
          }
        },
        "example": {
          "cnam_listing_enabled": true,
          "cnam_listing_details": "example"
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "body": {
            "type": "string",
            "description": "Body of comment",
            "example": "Great experience so far"
          },
          "porting_order_id": {
            "type": "string",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "user_id": {
            "type": "string",
            "description": "identifies the user who created the comment. Will be null if created by a Telnyx Admin",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2021-03-19T10:07:15.527Z"
          }
        }
      },
      "CompleteOTAUpdate": {
        "type": "object",
        "title": "OTAUpdate",
        "description": "This object represents an Over the Air (OTA) update request. It allows tracking the current status of a operation that apply settings in a particular SIM card. <br/><br/>",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "example": "ota_update",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identification UUID of the related SIM card resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "type": "string",
            "description": "Represents the type of the operation requested. This will relate directly to the source of the request.",
            "enum": [
              "sim_card_network_preferences"
            ],
            "example": "sim_card_network_preferences"
          },
          "status": {
            "type": "string",
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "example": "in-progress"
          },
          "settings": {
            "type": "object",
            "description": "A JSON object representation of the operation. The information present here will relate directly to the source of the OTA request.",
            "properties": {
              "mobile_operator_networks_preferences": {
                "$ref": "#/components/schemas/MobileOperatorNetworksPreferencesResponse"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "created_at": "2018-02-02T22:25:27.521Z",
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ota_update",
          "settings": {
            "mobile_operator_networks_preferences": [
              {
                "mobile_operator_network_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
                "mobile_operator_network_name": "AT&T Mobility (USACG)",
                "priority": 0
              }
            ]
          },
          "sim_card_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "status": "in-progress",
          "type": "sim_card_network_preferences",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "Conference": {
        "type": "object",
        "title": "Conference",
        "required": [
          "record_type",
          "id",
          "name",
          "created_at",
          "expires_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "conference"
            ],
            "example": "conference"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the conference",
            "example": "All hands meeting"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference will expire",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "sv1"
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "in_progress",
              "completed"
            ],
            "description": "Status of the conference",
            "example": "completed"
          },
          "end_reason": {
            "type": "string",
            "enum": [
              "all_left",
              "ended_via_api",
              "host_left",
              "time_exceeded"
            ],
            "description": "Reason why the conference ended",
            "example": "all_left"
          },
          "ended_by": {
            "type": "object",
            "description": "IDs related to who ended the conference. It is expected for them to all be there or all be null",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call Control ID which ended the conference",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
              },
              "call_session_id": {
                "type": "string",
                "description": "Call Session ID which ended the conference",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            }
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection (Call Control App) associated with the conference",
            "example": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
          }
        },
        "example": {
          "record_type": "conference",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "All hands meeting",
          "created_at": "2019-01-23T18:10:02.574Z",
          "expires_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "region": "sv1",
          "status": "completed",
          "end_reason": "all_left",
          "ended_by": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "call_session_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          },
          "connection_id": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
        }
      },
      "ConferenceCallRequest": {
        "required": [
          "call_control_id",
          "from",
          "to"
        ],
        "type": "object",
        "title": "Conference Dial Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number).",
            "type": "string",
            "example": "+18005550101"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. If media_name is also supplied, this is currently ignored. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference.",
            "example": false,
            "type": "boolean",
            "default": false
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "to": {
            "description": "The DID or SIP URI to dial out and bridge to the given call.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "from": "+18005550101",
          "to": "+18005550100",
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "ConferenceCommandResult": {
        "type": "object",
        "title": "Conference Command Result",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        },
        "example": {
          "result": "ok"
        }
      },
      "ConferenceCreated": {
        "type": "object",
        "title": "Conference Created",
        "example": {
          "record_type": "event",
          "event_type": "conference.created",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.created",
            "enum": [
              "conference.created"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceCreatedEvent": {
        "type": "object",
        "title": "Conference Created Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceCreated"
          }
        }
      },
      "ConferenceDetailRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "name": {
            "type": "string",
            "description": "Conference name",
            "example": "My Conference"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "started_at": {
            "type": "string",
            "description": "Conference start time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "ended_at": {
            "type": "string",
            "description": "Conference end time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "expires_at": {
            "type": "string",
            "description": "Conference expiry time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "ch1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection id",
            "example": "1583941447772537867"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "participant_count": {
            "type": "integer",
            "description": "Number of participants that joined the conference call",
            "example": 5
          },
          "participant_call_sec": {
            "type": "integer",
            "description": "Sum of the conference call duration for all participants in seconds",
            "example": 100
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": false
          },
          "record_type": {
            "type": "string",
            "example": "conference_detail_record",
            "default": "conference_detail_record"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "ConferenceEnded": {
        "type": "object",
        "title": "Conference Ended",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.ended",
            "enum": [
              "conference.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              },
              "reason": {
                "type": "string",
                "enum": [
                  "all_left",
                  "host_left",
                  "time_exceeded"
                ],
                "description": "Reason the conference ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z",
            "reason": "host_left"
          }
        }
      },
      "ConferenceEndedEvent": {
        "type": "object",
        "title": "Conference Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceEnded"
          }
        }
      },
      "ConferenceFloorChangedEvent": {
        "type": "object",
        "title": "Conference Floor Changed",
        "example": {
          "record_type": "event",
          "event_type": "conference.floor.changed",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.floor.changed",
            "enum": [
              "conference.floor.changed"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call Control ID of the new speaker."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "Call Leg ID of the new speaker."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Call Session ID of the new speaker."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that had a speaker change event."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceHoldRequest": {
        "type": "object",
        "title": "Conference Hold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ],
          "audio_url": "http://example.com/message.wav"
        }
      },
      "ConferenceMuteRequest": {
        "type": "object",
        "title": "Conference Mute Request",
        "properties": {
          "call_control_ids": {
            "description": "Array of unique identifiers and tokens for controlling the call. When empty all participants will be muted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "ConferenceParticipantDetailRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "conference_id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "joined_at": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "left_at": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "destination_number": {
            "type": "string",
            "description": "Number called by the participant to join the conference",
            "example": "+18005550199"
          },
          "originating_number": {
            "type": "string",
            "description": "Participant origin number used in the conference call",
            "example": "+18005550199"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "billed_sec": {
            "type": "integer",
            "description": "Duration of the conference call for billing purposes",
            "example": 120
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": true
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.002"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "minutes"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "example": "conference_participant_detail_record",
            "default": "conference_participant_detail_record"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "ConferenceParticipantJoined": {
        "type": "object",
        "title": "Conference Participant Joined",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.joined",
            "enum": [
              "conference.participant.joined"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.joined",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        }
      },
      "ConferenceParticipantJoinedEvent": {
        "type": "object",
        "title": "Conference Participant Joined Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantJoined"
          }
        }
      },
      "ConferenceParticipantLeft": {
        "type": "object",
        "title": "Conference Participant Left",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.left",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.left",
            "enum": [
              "conference.participant.left"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Call ID used to issue commands via Call Control API."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "Conference ID that the participant joined."
              }
            }
          }
        }
      },
      "ConferenceParticipantLeftEvent": {
        "type": "object",
        "title": "Conference Participant Left Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantLeft"
          }
        }
      },
      "ConferenceParticipantPlaybackEnded": {
        "type": "object",
        "title": "Conference Participant Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.ended",
            "enum": [
              "conference.participant.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackEnded"
          }
        }
      },
      "ConferenceParticipantPlaybackStarted": {
        "type": "object",
        "title": "Conference Participant Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.playback.started",
            "enum": [
              "conference.participant.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantPlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Participant Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackStarted"
          }
        }
      },
      "ConferenceParticipantSpeakEnded": {
        "type": "object",
        "title": "Conference Participant Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.ended",
            "enum": [
              "conference.participant.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakEnded"
          }
        }
      },
      "ConferenceParticipantSpeakStarted": {
        "type": "object",
        "title": "Conference Participant Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.participant.speak.started",
            "enum": [
              "conference.participant.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
                "description": "State received from a command."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceParticipantSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Participant Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakStarted"
          }
        }
      },
      "ConferencePlayRequest": {
        "type": "object",
        "title": "Conference Play Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "example": "infinity",
            "default": 1,
            "$ref": "#/components/schemas/Loopcount"
          },
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav"
        }
      },
      "ConferencePlaybackEnded": {
        "type": "object",
        "title": "Conference Playback Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.ended",
            "enum": [
              "conference.playback.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackEndedEvent": {
        "type": "object",
        "title": "Conference Playback Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackEnded"
          }
        }
      },
      "ConferencePlaybackStarted": {
        "type": "object",
        "title": "Conference Playback Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.playback.started",
            "enum": [
              "conference.playback.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "media_url": {
                "type": "string",
                "example": "http://example.com/audio.wav",
                "description": "The audio URL being played back, if audio_url has been used to start."
              },
              "media_name": {
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api",
                "description": "The name of the audio media file being played back, if media_name has been used to start."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferencePlaybackStartedEvent": {
        "type": "object",
        "title": "Conference Playback Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackStarted"
          }
        }
      },
      "ConferenceRecordingSaved": {
        "type": "object",
        "title": "Conference Recording Saved",
        "example": {
          "record_type": "event",
          "event_type": "conference.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "channels": "single",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "format": "mp3",
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "recording_ended_at": "2018-02-02T22:20:27.521992Z",
            "recording_id": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
            "recording_started_at": "2021-05-11T10:17:03.692107Z",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.recording.saved",
            "enum": [
              "conference.recording.saved"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
                "description": "Participant's call ID used to issue commands via Call Control API."
              },
              "channels": {
                "type": "string",
                "example": "single",
                "enum": [
                  "single",
                  "dual"
                ],
                "description": "Whether recording was recorded in `single` or `dual` channel."
              },
              "conference_id": {
                "type": "string",
                "format": "uuid",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference that is being recorded."
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "format": {
                "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
                "type": "string",
                "enum": [
                  "wav",
                  "mp3"
                ],
                "example": "mp3"
              },
              "public_recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              },
              "recording_ended_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when recording ended."
              },
              "recording_id": {
                "type": "string",
                "format": "uuid",
                "example": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
                "description": "ID of the conference recording."
              },
              "recording_started_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.521992Z",
                "description": "ISO 8601 datetime of when recording started."
              },
              "recording_urls": {
                "type": "object",
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3",
                    "description": "Recording URL in requested `mp3` format."
                  },
                  "wav": {
                    "type": "string",
                    "nullable": true,
                    "example": "http://example.com/recording.wav",
                    "description": "Recording URL in requested `wav` format."
                  }
                }
              }
            }
          }
        }
      },
      "ConferenceRecordingSavedEvent": {
        "type": "object",
        "title": "Conference Recording Saved Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceRecordingSaved"
          }
        }
      },
      "ConferenceSpeakEnded": {
        "type": "object",
        "title": "Conference Speak Ended",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.ended",
            "enum": [
              "conference.speak.ended"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakEndedEvent": {
        "type": "object",
        "title": "Conference Speak Ended Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakEnded"
          }
        }
      },
      "ConferenceSpeakRequest": {
        "type": "object",
        "title": "Conference Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "call_control_ids": {
            "description": "Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this to participants"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "voice": {
            "description": "The gender of the voice used to speak the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language used to speak the text.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ],
          "payload": "Say this to participants",
          "payload_type": "text",
          "voice": "female",
          "language": "en-US",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ConferenceSpeakStarted": {
        "type": "object",
        "title": "Conference Speak Started",
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.521Z"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "conference.speak.started",
            "enum": [
              "conference.speak.started"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call."
              },
              "creator_call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session that started the conference."
              },
              "conference_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID of the conference the text was spoken in."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521Z",
                "description": "ISO 8601 datetime of when the event occurred."
              }
            }
          }
        }
      },
      "ConferenceSpeakStartedEvent": {
        "type": "object",
        "title": "Conference Speak Started Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakStarted"
          }
        }
      },
      "ConferenceStopRequest": {
        "type": "object",
        "title": "Conference Stop Request",
        "properties": {
          "call_control_ids": {
            "description": "List of call control ids identifying participants the audio file should stop be played to. If not given, the audio will be stoped to the entire conference.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConferenceUnholdRequest": {
        "required": [
          "call_control_ids"
        ],
        "type": "object",
        "title": "Conference Unhold Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unheld.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "ConferenceUnmuteRequest": {
        "type": "object",
        "title": "Conference Unmute Request",
        "properties": {
          "call_control_ids": {
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unmuted. When empty all participants will be unmuted.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_ids": [
            "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          ]
        }
      },
      "Connection": {
        "type": "object",
        "title": "Connection",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the specific resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "webhook_event_url": {
            "description": "The URL where webhooks related to this connection will be sent.",
            "type": "string",
            "format": "uri",
            "default": null,
            "nullable": true,
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri",
            "default": "",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "type": "string",
            "enum": [
              "1",
              "2"
            ],
            "default": "1",
            "example": "1"
          },
          "outbound_voice_profile_id": {
            "$ref": "#/components/schemas/OutboundVoiceProfileId"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "outbound_voice_profile_id": "1293384261075731499"
        }
      },
      "ConnectionActive": {
        "title": "Connection Active",
        "type": "boolean",
        "description": "Specifies whether the connection can be used.",
        "default": true,
        "example": false
      },
      "ConnectionName": {
        "title": "Connection Name",
        "type": "string",
        "description": "A user-assigned name to help manage the connection.",
        "example": "office-connection"
      },
      "ConnectionRtcpSettings": {
        "type": "object",
        "title": "Connection RTCP Settings",
        "properties": {
          "port": {
            "enum": [
              "rtcp-mux",
              "rtp+1"
            ],
            "default": "rtp+1",
            "description": "RTCP port by default is rtp+1, it can also be set to rtcp-mux"
          },
          "capture_enabled": {
            "type": "boolean",
            "default": false,
            "description": "BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.",
            "example": true
          },
          "report_frequency_secs": {
            "type": "integer",
            "default": 5,
            "description": "RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.",
            "example": 10
          }
        },
        "example": {
          "port": "rtcp-mux",
          "capture_enabled": true,
          "report_frequency_secs": 10
        }
      },
      "ConsumedData": {
        "type": "object",
        "title": "ConsumedData",
        "description": "Represents the amount of data consumed.",
        "properties": {
          "unit": {
            "type": "string",
            "example": "B",
            "default": "B"
          },
          "amount": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "Contact": {
        "title": "Contact",
        "type": "object",
        "properties": {
          "addresses": {
            "description": "Full contact address(es)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhatsAppContactAddress"
            }
          },
          "birthday": {
            "description": "YYYY-MM-DD formatted string",
            "type": "string"
          },
          "emails": {
            "description": "Contact email address(es)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "ims": {
            "description": "",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "org": {
            "$ref": "#/components/schemas/Organization"
          },
          "phones": {
            "description": "Contact phone number(s)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Phone"
            }
          },
          "urls": {
            "description": "Contact URL(s)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Url"
            }
          }
        },
        "example": {
          "addresses": [
            {
              "city": "Menlo Park",
              "country": "United States",
              "country_code": "us",
              "state": "CA",
              "street": "1 Hacker Way",
              "type": "HOME",
              "zip": "94025"
            },
            {
              "city": "Menlo Park",
              "country": "United States",
              "country_code": "us",
              "state": "CA",
              "street": "200 Jefferson Dr",
              "type": "WORK",
              "zip": "94025"
            }
          ],
          "birthday": "2012-08-18",
          "emails": [
            {
              "email": "test@fb.com",
              "type": "WORK"
            },
            {
              "email": "test@whatsapp.com",
              "type": "WORK"
            }
          ],
          "name": {
            "first_name": "John",
            "formatted_name": "John Smith",
            "last_name": "Smith"
          },
          "org": {
            "company": "WhatsApp",
            "department": "Design",
            "title": "Manager"
          },
          "phones": [
            {
              "phone": "+1 (940) 555-1234",
              "type": "HOME"
            },
            {
              "phone": "+1 (650) 555-1234",
              "type": "WORK",
              "id": "16505551234"
            }
          ],
          "urls": [
            {
              "url": "https://www.facebook.com",
              "type": "WORK"
            }
          ]
        }
      },
      "CostInformation": {
        "type": "object",
        "properties": {
          "upfront_cost": {
            "type": "string",
            "example": "3.21"
          },
          "monthly_cost": {
            "type": "string",
            "example": "6.54"
          },
          "currency": {
            "type": "string",
            "description": "The ISO 4217 code for the currency.",
            "example": "USD"
          }
        },
        "example": {
          "upfront_cost": "3.21",
          "monthly_cost": "6.54",
          "currency": "USD"
        }
      },
      "CreateCallControlApplicationRequest": {
        "type": "object",
        "title": "Create Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25
        }
      },
      "CreateConferenceRequest": {
        "required": [
          "call_control_id",
          "name"
        ],
        "type": "object",
        "title": "Create Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "name": {
            "description": "Name of the conference",
            "example": "Business",
            "type": "string"
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when participants join and/or leave the conference.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "default": "never",
            "example": "on_exit",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "comfort_noise": {
            "description": "Toggle background comfort noise.",
            "example": false,
            "type": "boolean",
            "default": true
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "duration_minutes": {
            "description": "Time length (minutes) after which the conference will end.",
            "example": 5,
            "type": "integer"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\"."
          },
          "start_conference_on_create": {
            "description": "Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".",
            "example": false,
            "type": "boolean"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "name": "Business",
          "beep_enabled": "always",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "duration_minutes": 5,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "start_conference_on_create": false
        }
      },
      "CreateCredentialConnectionRequest": {
        "type": "object",
        "title": "Create Credential Connection Request",
        "required": [
          "user_name",
          "password",
          "connection_name"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "sip_uri_calling_preference": {
            "type": "string",
            "default": "disabled",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).",
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ]
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "active": true,
          "password": "my123secure456password789",
          "user_name": "myusername123",
          "anchorsite_override": "Latency",
          "connection_name": "my name",
          "sip_uri_calling_preference": " disabled",
          "default_on_hold_comfort_noise_enabled": false,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": "G722",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "US",
            "t38_reinvite_source": "telnyx",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateDocServiceDocumentRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DocServiceDocumentUploadURL"
          },
          {
            "$ref": "#/components/schemas/DocServiceDocumentUploadInline"
          }
        ]
      },
      "CreateFaxApplicationRequest": {
        "type": "object",
        "title": "Create Fax Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "$ref": "#/components/schemas/WebhookEventUrl"
          },
          "webhook_event_failover_url": {
            "$ref": "#/components/schemas/WebhookEventFailoverUrl"
          },
          "webhook_timeout_secs": {
            "$ref": "#/components/schemas/WebhookTimeoutSecs"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          }
        },
        "example": {
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateFqdnConnectionRequest": {
        "title": "Create FQDN Connection Request",
        "required": [
          "connection_name"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "default": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10
          }
        }
      },
      "CreateFqdnRequest": {
        "title": "Create FQDN Request",
        "type": "object",
        "required": [
          "fqdn",
          "dns_record_type",
          "connection_id"
        ],
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this IP should be attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "example": 5060,
            "nullable": true
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          }
        },
        "example": {
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 8080,
          "dns_record_type": "a"
        }
      },
      "CreateInboundIpRequest": {
        "type": "object",
        "title": "Create Inbound Ip Request",
        "properties": {
          "ani_number_format": {
            "type": "string",
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "default": "E.164-national",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls."
          },
          "dnis_number_format": {
            "type": "string",
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_routing_method": {
            "type": "string",
            "enum": [
              "sequential",
              "round-robin"
            ],
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed."
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)"
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "privacy_zone_enabled": {
            "type": "boolean",
            "description": "By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "type": "string",
            "default": "US",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "enum": [
              "US",
              "Europe",
              "Australia"
            ]
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls."
          },
          "sip_subdomain_receive_settings": {
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "enum": [
              "only_my_connections",
              "from_anyone"
            ]
          },
          "timeout_1xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "minimum": 1,
            "maximum": 120,
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": "G722",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "privacy_zone_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20
        }
      },
      "CreateIpConnectionRequest": {
        "title": "Create IP Connection Request",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "transport_protocol": {
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP",
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "example": "UDP"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "example": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "example": true
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "example": false
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CreateInboundIpRequest"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": false,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound:": {
            "ani_number_format": "+E.164",
            "dns_number_format": "+e164",
            "codecs": "G722",
            "default_primary_ip_id": "192.168.0.0",
            "default_tertiary_ip_id": "192.168.0.0",
            "default_secondary_ip_id": "192.168.0.0",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "test",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "telnyx",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateIpRequest": {
        "title": "Create Ip Request",
        "type": "object",
        "required": [
          "ip_address"
        ],
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          }
        },
        "example": {
          "connection_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "ip_address": "192.168.0.0",
          "port": 5060
        }
      },
      "CreateLongCodeMessageRequest": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "Phone number, in +E.164 format, used to send the message."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "uri"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+13125550002",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateManagedAccountRequest": {
        "title": "Create Managed Account Request",
        "required": [
          "business_name"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address for the managed account. If not provided, the email address will be generated based on the email address of the manager account.",
            "example": "new_managed_account@customer.org"
          },
          "password": {
            "type": "string",
            "description": "Password for the managed account. If a password is not supplied, the account will not be able to be signed into directly. (A password reset may still be performed later to enable sign-in via password.)",
            "example": "3jVjLq!tMuWKyWx4NN*CvhnB"
          },
          "business_name": {
            "type": "string",
            "description": "The name of the business for which the new managed account is being created, that will be used as the managed accounts's organization's name.",
            "example": "Larry's Cat Food Inc"
          }
        },
        "example": {
          "email": "larry_cat_food@customer.org",
          "password": "3jVjLq!tMuWKyWx4NN*CvhnB",
          "business_name": "Larry's Cat Food Inc"
        }
      },
      "CreateMessageRequest": {
        "type": "object",
        "required": [
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).\n\n**Required if sending with a phone number, short code, or alphanumeric sender ID.**\n"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.\n\n**Required if sending via number pool or with an alphanumeric sender ID.**\n"
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "uri"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateMessagingHostedNumberOrderRequest": {
        "type": "object",
        "example": {
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "phone_numbers": [
            "+18665550001",
            "+18665550002"
          ]
        },
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^\\+1\\d{10}"
            },
            "description": "Phone numbers to be used for hosted messaging."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Automatically associate the number with this messaging profile ID when the order is complete."
          }
        }
      },
      "CreateMessagingProfileRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean",
            "default": true
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "uri",
            "default": "",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri",
            "default": "",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ],
            "default": "2"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "name": "My name",
          "enabled": true,
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "webhook_api_version": "2",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 1,
            "skip_unhealthy": true,
            "sticky_sender": false,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "",
            "replace_blacklist_only": true,
            "send_webhooks": false
          }
        }
      },
      "CreateMultiPartDocServiceDocumentRequest": {
        "type": "object",
        "properties": {
          "file": {
            "description": "The file you are uploading.",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "CreateNumberOrderDocumentRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "387d1e31-a218-4375-8151-103f2d5e2d2c",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order_document",
            "readOnly": true
          },
          "file_id": {
            "type": "string",
            "description": "The id of the file to associate as a number order document.",
            "example": "1e3c5822-0362-4702-8e46-5a129f0d3976"
          },
          "requirements_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "example": "36aaf27d-986b-493c-bd1b-de16af2e4292"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "requirement_type": {
            "type": "string",
            "enum": [
              "address_proof",
              "identification",
              "reg_form"
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order document was uploaded.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          }
        },
        "example": {
          "id": "387d1e31-a218-4375-8151-103f2d5e2d2c",
          "record_type": "number_order_document",
          "file_id": "1e3c5822-0362-4702-8e46-5a129f0d3976",
          "requirements_id": "36aaf27d-986b-493c-bd1b-de16af2e4292",
          "customer_reference": "MY REF 001",
          "requirement_type": "address_proof",
          "created_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "CreateNumberOrderRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "writeOnly": true
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "example": 1,
            "readOnly": true
          },
          "connection_id": {
            "type": "string",
            "example": "346789098765567",
            "description": "Identifies the connection associated with this phone number."
          },
          "messaging_profile_id": {
            "type": "string",
            "example": "abc85f64-5717-4562-b3fc-2c9600",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "example": "abc85f64-5717-4562-b3fc-2c9600",
            "description": "Identifies the billing group associated with the phone number."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "example": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "phone_numbers": [
            {
              "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "record_type": "number_order_phone_number",
              "phone_number": "+19705555098",
              "regulatory_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "regulatory_requirements": [
                {
                  "record_type": "phone_number_regulatory_requirement",
                  "requirement_id": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576",
                  "field_value": "45f45a04-b4be-4592-95b1-9306b9db2b21",
                  "field_type": "address_id"
                }
              ],
              "requirements_met": true,
              "status": "success"
            }
          ],
          "record_type": "number_order",
          "phone_numbers_count": 1,
          "connection_id": "346789098765567",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600",
          "billing_group_id": "abc85f64-5717-4562-b3fc-2c9600",
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "requirements_met": true
        }
      },
      "CreateNumberPoolMessageRequest": {
        "type": "object",
        "required": [
          "to",
          "messaging_profile_id"
        ],
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "uri"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": [
            "+13125550002"
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateNumberReservationRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_reservation",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedPhoneNumber"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the entire reservation.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the numbers reservation was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the number reservation was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "number_reservation",
          "phone_numbers": [
            {
              "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
              "record_type": "reserved_phone_number",
              "phone_number": "+19705555098",
              "status": "pending",
              "created_at": "2018-01-01T00:00:00.000000Z",
              "updated_at": "2018-01-01T00:00:00.000000Z",
              "expired_at": "2018-01-01T00:00:00.000000Z"
            }
          ],
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "CreateOutboundVoiceProfileRequest": {
        "type": "object",
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "example": {
          "name": "office",
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office",
            "minLength": 3
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "example": 10,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "example": true,
            "default": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "office-profile"
            ]
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "example": [
              "US",
              "BR",
              "AU"
            ],
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "example": true,
            "default": false
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
            "default": null,
            "nullable": true
          }
        }
      },
      "CreatePortingOrder": {
        "type": "object",
        "title": "CreatePortingOrder",
        "required": [
          "phone_numbers"
        ],
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of +E.164 formatted phone numbers",
            "example": [
              "+13035550000",
              "+13035550001",
              "+13035550002"
            ]
          }
        }
      },
      "CreateRoomClientTokenRequest": {
        "type": "object",
        "properties": {
          "token_ttl_secs": {
            "description": "The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
            "type": "integer",
            "example": 600,
            "default": 600,
            "minimum": 10,
            "maximum": 3600
          },
          "refresh_token_ttl_secs": {
            "description": "The time to live in seconds of the Refresh Token, after that time the Refresh Token is invalid and can't be used to refresh Client Token.",
            "type": "integer",
            "example": 3600,
            "default": 3600,
            "minimum": 60,
            "maximum": 86400
          }
        }
      },
      "CreateRoomRequest": {
        "type": "object",
        "properties": {
          "unique_name": {
            "description": "The unique (within the Telnyx account scope) name of the room.",
            "type": "string",
            "example": "My room"
          },
          "max_participants": {
            "description": "The maximum amount of participants allowed in a room. If new participants try to join after that limit is reached, their request will be rejected.",
            "type": "integer",
            "example": 10,
            "default": 10,
            "minimum": 2,
            "maximum": 50
          }
        }
      },
      "CreateShortCodeMessageRequest": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "Phone number, in +E.164 format, used to send the message."
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this message will be sent.",
            "type": "string",
            "format": "uri"
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "description": "The protocol for sending the message, either SMS or MMS.",
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "auto_detect": {
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "type": "boolean",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateTexmlApplicationRequest": {
        "type": "object",
        "title": "Create Texml Application Request",
        "required": [
          "friendly_name",
          "voice_url"
        ],
        "properties": {
          "friendly_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "$ref": "#/components/schemas/FirstCommandTimeout"
          },
          "first_command_timeout_secs": {
            "$ref": "#/components/schemas/FirstCommandTimeoutSecs"
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "uri",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "default": null,
            "format": "uri",
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "default": null,
            "format": "uri",
            "example": "https://example.com"
          },
          "status_callback_method": {
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          }
        },
        "example": {
          "friendly_name": "call-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateVerificationRequestCall": {
        "title": "CreateVerificationRequestCall",
        "description": "The request body when creating a verification.",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "timeout_secs": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds the verification code is valid for."
          },
          "call_timeout_secs": {
            "type": "integer",
            "example": 30,
            "description": "Must be less than the profile's default_verification_timeout_secs or timeout_secs, whichever is lesser."
          }
        }
      },
      "CreateVerificationRequestFlashcall": {
        "title": "CreateVerificationRequestFlashcall",
        "description": "The request body when creating a verification.",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "timeout_secs": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds the verification code is valid for."
          }
        }
      },
      "CreateVerificationRequestPSD2": {
        "title": "CreateVerificationRequestPSD2",
        "description": "The request body when creating a verification.",
        "required": [
          "phone_number",
          "verify_profile_id",
          "currency",
          "amount",
          "payee"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "currency": {
            "$ref": "#/components/schemas/Currencies"
          },
          "amount": {
            "type": "string",
            "example": "99.99"
          },
          "payee": {
            "type": "string",
            "example": "Acme Corp Inc. LTD"
          },
          "timeout_secs": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds the verification code is valid for."
          }
        }
      },
      "CreateVerificationRequestSMS": {
        "title": "CreateVerificationRequestSMS",
        "description": "The request body when creating a verification.",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "timeout_secs": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds the verification code is valid for."
          }
        }
      },
      "CreateVerificationRequestWhatsapp": {
        "title": "CreateVerificationRequestWhatsapp",
        "description": "The request body when creating a verification.",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "timeout_secs": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds the verification code is valid for."
          }
        }
      },
      "CreateVerificationResponse": {
        "title": "CreateVerifyVerificationResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Verification"
          }
        }
      },
      "CreateVerifyProfileCallRequest": {
        "title": "CreateVerifyProfileCallRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "speech_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "default_call_timeout_secs": {
            "type": "integer",
            "example": 30,
            "default": 45,
            "description": "Must be less than default_verification_timeout_secs"
          }
        }
      },
      "CreateVerifyProfileFlashcallRequest": {
        "title": "CreateVerifyProfileFlashcallRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "CreateVerifyProfilePSD2Request": {
        "title": "CreateVerifyProfilePSD2Request",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "CreateVerifyProfileSMSRequest": {
        "title": "CreateVerifyProfileSMSRequest",
        "type": "object",
        "properties": {
          "messaging_enabled": {
            "example": true,
            "description": "Enables SMS text messaging for the Verify profile.",
            "type": "boolean"
          },
          "rcs_enabled": {
            "example": true,
            "description": "Enables RCS messaging for the Verify profile.",
            "type": "boolean"
          },
          "messaging_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "vsms_enabled": {
            "example": true,
            "description": "Enables VSMS for the Verify profile.",
            "type": "boolean"
          }
        }
      },
      "CreateVerifyProfileWhatsappRequest": {
        "title": "CreateVerifyProfileWhatsappRequest",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "app_name": {
            "example": "Example Secure App",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "type": "string"
          }
        }
      },
      "CreateWhatsAppMessageRequest": {
        "title": "Send Message Request Body",
        "required": [
          "to",
          "whatsapp_user_id"
        ],
        "type": "object",
        "properties": {
          "whatsapp_user_id": {
            "description": "The sender's WhatsApp ID.",
            "type": "string"
          },
          "to": {
            "description": "The WhatsApp ID (phone number) returned from contacts endpoint.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "text": {
            "$ref": "#/components/schemas/Text"
          },
          "audio": {
            "$ref": "#/components/schemas/Audio"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "video": {
            "$ref": "#/components/schemas/Video"
          },
          "hsm": {
            "$ref": "#/components/schemas/Hsm"
          },
          "contacts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "preview_url": {
            "description": "Specifying preview_url in the request is optional when not including a URL in your message.\nTo include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://.",
            "type": "boolean"
          },
          "template": {
            "$ref": "#/components/schemas/Template"
          }
        },
        "example": {
          "preview_url": true,
          "to": "15125557878",
          "type": "text",
          "text": {
            "body": "Check out this site: http://www.telnyx.com"
          }
        }
      },
      "CreatedAt": {
        "title": "Created At",
        "type": "string",
        "description": "ISO 8601 formatted date indicating when the resource was created.",
        "example": "2020-02-02T22:25:27.521Z"
      },
      "CredentialConnection": {
        "type": "object",
        "title": "Credential Connection",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the type of resource.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "credential_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "created_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "sip_uri_calling_preference": {
            "type": "string",
            "default": null,
            "example": "disabled",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).",
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ]
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "credential_connection",
          "active": true,
          "user_name": "myusername123",
          "password": "my123secure456password789",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "sip_uri_calling_preference": "disabled",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtp+1",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": "15"
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "telnyx",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CredentialInbound": {
        "type": "object",
        "title": "Credential Inbound",
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": "G722",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "privacy_zone_enabled": true,
          "sip_compact_headers_enabled": true,
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20
        },
        "properties": {
          "ani_number_format": {
            "type": "string",
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "default": "E.164-national",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls."
          },
          "dnis_number_format": {
            "type": "string",
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)"
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "privacy_zone_enabled": {
            "type": "boolean",
            "description": "By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "timeout_1xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "minimum": 1,
            "maximum": 120,
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "string",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "minimum": 1,
            "maximum": 600,
            "default": "90"
          }
        }
      },
      "CredentialOutbound": {
        "type": "object",
        "title": "Credential Outbound",
        "example": {
          "call_parking_enabled": true,
          "ani_override": "always",
          "channel_limit": 10,
          "instant_ringback_enabled": true,
          "generate_ringback_tone": true,
          "localization": "US",
          "t38_reinvite_source": "telnyx",
          "outbound_voice_profile_id": "1293384261075731499"
        },
        "properties": {
          "call_parking_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Forces all SIP calls originated on this connection to be \"parked\" instead of \"bridged\" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next."
          },
          "ani_override": {
            "type": "string",
            "description": "Set a phone number as the ani_override value to override caller id number on outbound calls.",
            "default": ""
          },
          "ani_override_type": {
            "type": "string",
            "enum": [
              "always",
              "normal",
              "emergency"
            ],
            "description": "Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.",
            "default": "always"
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection."
          },
          "instant_ringback_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When set, ringback will not wait for indication before sending ringback tone to calling party."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "localization": {
            "type": "string",
            "default": "US",
            "description": "A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.",
            "example": "US"
          },
          "t38_reinvite_source": {
            "type": "string",
            "enum": [
              "telnyx",
              "customer",
              "disabled",
              "passthru",
              "caller-passthru",
              "callee-passthru"
            ],
            "description": "This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.",
            "default": "telnyx"
          },
          "outbound_voice_profile_id": {
            "$ref": "#/components/schemas/OutboundVoiceProfileId"
          }
        }
      },
      "CsvDownload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
            "description": "Identifies the resource.",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "csv_download",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "example": "https://www.telnyx.com/sample/42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
            "description": "The URL at which the CSV file can be retrieved."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed",
              "expired"
            ],
            "default": "pending",
            "example": "pending",
            "description": "Indicates the completion level of the CSV report. Only complete CSV download requests will be able to be retrieved."
          }
        },
        "example": {
          "id": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "record_type": "csv_download",
          "url": "https://www.telnyx.com/sample/42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "status": "pending"
        }
      },
      "Currencies": {
        "title": "Currencies",
        "enum": [
          "USD",
          "EUR",
          "GBP",
          "AUD",
          "CAD"
        ],
        "type": "string",
        "example": "USD",
        "description": "The supported currencies."
      },
      "Currency": {
        "title": "Currency",
        "description": "",
        "required": [
          "amount_1000",
          "currency_code"
        ],
        "type": "object",
        "properties": {
          "currency_code": {
            "type": "string"
          },
          "amount_1000": {
            "format": "int32",
            "type": "integer"
          },
          "fallback_value": {
            "type": "string"
          }
        },
        "example": {
          "currency_code": "USD",
          "amount_1000": 100990
        }
      },
      "CustomSipHeader": {
        "type": "object",
        "title": "Custom SIP Header",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The name of the header to add.",
            "type": "string",
            "example": "head_1"
          },
          "value": {
            "description": "The value of the header.",
            "type": "string",
            "example": "val_1"
          }
        },
        "example": {
          "name": "head_1",
          "value": "val_1"
        }
      },
      "DateTimeComponent": {
        "title": "Date Time by Component",
        "description": "Date/time by component",
        "type": "object",
        "properties": {
          "day_of_week": {
            "format": "int32",
            "description": "Both strings and numbers are accepted. If different from the value derived from the date (if specified), use the derived value.",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "type": "integer",
            "x-enum-descriptions": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ],
            "x-enum-varnames": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "day_of_month": {
            "format": "int32",
            "description": "The day of month",
            "type": "integer"
          },
          "year": {
            "format": "int32",
            "description": "The year",
            "type": "integer"
          },
          "month": {
            "format": "int32",
            "description": "The month",
            "type": "integer"
          },
          "hour": {
            "format": "int32",
            "description": "The hour",
            "type": "integer"
          },
          "minute": {
            "format": "int32",
            "description": "The minute",
            "type": "integer"
          }
        },
        "example": {
          "day_of_week": 5,
          "day_of_month": 25,
          "year": 1977,
          "month": 2,
          "hour": 15,
          "minute": 33
        }
      },
      "DateTimeObject": {
        "title": "Date Time Object",
        "description": "The Whatsapp Business API Client will attempt to format the date/time based on a specified localization.",
        "type": "object",
        "properties": {
          "component": {
            "$ref": "#/components/schemas/DateTimeComponent"
          },
          "unix_epoch": {
            "$ref": "#/components/schemas/DateTimeUnixEpoch"
          }
        },
        "example": {
          "component": {
            "day_of_week": 5,
            "day_of_month": 25,
            "year": 1977,
            "month": 2,
            "hour": 15,
            "minute": 33
          }
        }
      },
      "DateTimeUnixEpoch": {
        "title": "Date Time by Unix Epoch",
        "description": "Date/time by Unix epoch",
        "type": "object",
        "properties": {
          "timestamp": {
            "format": "int32",
            "description": "Epoch timestamp in seconds",
            "type": "integer"
          }
        },
        "example": {
          "timestamp": 123456789
        }
      },
      "DetailRecord": {
        "type": "object",
        "description": "An object following one of the schemas published in https://developers.telnyx.com/docs/api/v2/detail-records",
        "oneOf": [
          {
            "$ref": "#/components/schemas/MessageDetailRecord"
          },
          {
            "$ref": "#/components/schemas/ConferenceDetailRecord"
          },
          {
            "$ref": "#/components/schemas/ConferenceParticipantDetailRecord"
          }
        ],
        "required": [
          "record_type"
        ],
        "discriminator": {
          "propertyName": "record_type"
        }
      },
      "DetailRecordsSearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailRecord"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Direction": {
        "type": "string",
        "enum": [
          "INBOUND",
          "OUTBOUND"
        ]
      },
      "DocReqsRequirement": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "readOnly": true,
            "example": "requirement"
          },
          "country_code": {
            "description": "The 2-character (ISO 3166-1 alpha-2) country code where this requirement applies",
            "type": "string",
            "readOnly": false,
            "example": "FR"
          },
          "locality": {
            "description": "The locality where this requirement applies",
            "type": "string",
            "readOnly": false,
            "example": "Nice"
          },
          "phone_number_type": {
            "description": "Indicates the phone_number_type this requirement applies to. Leave blank if this requirement applies to all number_types.",
            "type": "string",
            "enum": [
              "local",
              "national",
              "toll_free"
            ],
            "example": "local",
            "readOnly": false
          },
          "action": {
            "description": "Indicates whether this requirement applies to ordering, porting, or both",
            "type": "string",
            "enum": [
              "both",
              "ordering",
              "porting"
            ],
            "example": "ordering",
            "readOnly": false
          },
          "requirements_types": {
            "description": "Lists the requirement types necessary to fulfill this requirement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocReqsRequirementType"
            },
            "readOnly": true
          },
          "id": {
            "description": "Identifies the associated document",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2021-04-09T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2021-04-12T20:20:20.020Z"
          }
        }
      },
      "DocReqsRequirementList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DocReqsRequirement"
        }
      },
      "DocReqsRequirementType": {
        "type": "object",
        "properties": {
          "acceptance_criteria": {
            "description": "Specifies objective criteria for acceptance",
            "type": "object",
            "properties": {
              "time_limit": {
                "description": "Specifies time-based acceptance criteria",
                "example": "Current and not expired",
                "type": "string",
                "readOnly": false
              },
              "locality_limit": {
                "description": "Specifies geography-based acceptance criteria",
                "example": "Issued by the same country that the phone number belongs to",
                "type": "string",
                "readOnly": false
              }
            }
          },
          "description": {
            "description": "Describes the requirement type",
            "example": "Proves the customer has a physical address in the same locality as the phone number",
            "type": "string",
            "readOnly": false
          },
          "example": {
            "description": "Provides one or more examples of acceptable documents",
            "example": "Utility bill, internet bill, phone bill, or lease",
            "type": "string",
            "readOnly": false
          },
          "type": {
            "description": "Defines the type of this requirement type",
            "example": "document",
            "type": "string",
            "enum": [
              "document",
              "address",
              "textual"
            ],
            "readOnly": false
          },
          "name": {
            "description": "A short descriptive name for this requirement_type",
            "example": "Proof of Address",
            "type": "string",
            "readOnly": true
          },
          "record_type": {
            "description": "Identifies the type of the resource",
            "example": "requirement_type",
            "type": "string",
            "readOnly": true
          },
          "id": {
            "description": "Identifies the associated document",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2021-04-09T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2021-04-12T20:20:20.020Z"
          }
        }
      },
      "DocReqsRequirementTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DocReqsRequirementType"
        }
      },
      "DocServiceDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocServiceRecord"
          },
          {
            "type": "object",
            "properties": {
              "record_type": {
                "description": "Identifies the type of the resource.",
                "type": "string",
                "readOnly": true,
                "example": "document"
              },
              "content_type": {
                "description": "The document's content_type.",
                "type": "string",
                "readOnly": true,
                "example": "application/pdf"
              },
              "size": {
                "description": "Indicates the document's filesize",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "unit": {
                    "description": "Identifies the unit",
                    "type": "string",
                    "readOnly": true,
                    "example": "bytes"
                  },
                  "amount": {
                    "description": "The number of bytes",
                    "type": "integer",
                    "readOnly": true,
                    "example": 123456
                  }
                }
              },
              "status": {
                "type": "string",
                "description": "Indicates the current document reviewing status",
                "readOnly": true,
                "enum": [
                  "pending",
                  "verified",
                  "denied"
                ],
                "example": "pending"
              },
              "sha256": {
                "description": "The document's SHA256 hash provided for optional verification purposes.",
                "type": "string",
                "readOnly": true,
                "example": "08a96c641c3a74e44eb59afb61a24f2cb9f4d7188748e76ba4bb5edfa3cb7d1c"
              },
              "filename": {
                "description": "The filename of the document.",
                "type": "string",
                "example": "test-document.pdf"
              }
            }
          }
        ]
      },
      "DocServiceDocumentLink": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocServiceRecord"
          },
          {
            "type": "object",
            "properties": {
              "record_type": {
                "description": "Identifies the type of the resource.",
                "type": "string",
                "readOnly": true,
                "example": "document_link"
              },
              "document_id": {
                "description": "Identifies the associated document.",
                "type": "string",
                "format": "uuid",
                "readOnly": true,
                "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
              },
              "linked_record_type": {
                "description": "The linked resource's record type.",
                "type": "string",
                "readOnly": true,
                "example": "porting_order"
              },
              "linked_resource_id": {
                "description": "Identifies the linked resource.",
                "type": "string",
                "readOnly": true,
                "example": "132091b4-442b-4a2a-b87f-61e707e46d54"
              }
            }
          }
        ]
      },
      "DocServiceDocumentUploadInline": {
        "type": "object",
        "properties": {
          "file": {
            "description": "The Base64 encoded contents of the file you are uploading.",
            "type": "string",
            "format": "byte",
            "example": "[Base64 encoded content]"
          }
        },
        "required": [
          "file"
        ]
      },
      "DocServiceDocumentUploadURL": {
        "type": "object",
        "properties": {
          "url": {
            "description": "If the file is already hosted publicly, you can provide a URL and have the documents service fetch it for you.",
            "type": "string",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          }
        },
        "required": [
          "url"
        ]
      },
      "DocServiceRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sample_record_type"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "Document": {
        "title": "Document",
        "description": "The media object containing a document reference",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The media object ID returned when the media is successfully uploaded to the media endpoint.",
            "example": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
          },
          "link": {
            "type": "string",
            "description": "The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.",
            "example": "http://www.example.com/file"
          },
          "caption": {
            "type": "string",
            "description": "Describes the specified media.",
            "example": "My cool media!"
          },
          "filename": {
            "type": "string",
            "description": "Describes the filename for the specific document.",
            "example": "example.pdf"
          }
        },
        "example": {
          "caption": "Very important document",
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68",
          "filename": "example.pdf"
        }
      },
      "DownlinkData": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Downlink data",
            "example": 1
          },
          "unit": {
            "description": "Transmission unit",
            "type": "string",
            "enum": [
              "B",
              "KB",
              "MB"
            ],
            "default": "MB"
          }
        }
      },
      "DtmfType": {
        "title": "DTMF Type",
        "type": "string",
        "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
        "enum": [
          "RFC 2833",
          "Inband",
          "SIP INFO"
        ],
        "default": "RFC 2833",
        "example": "Inband"
      },
      "Email": {
        "title": "Email",
        "required": [
          "email",
          "type"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "example": {
          "email": "<Contact's Email>",
          "type": "<Contact's Email Type>"
        }
      },
      "EmergencySettings": {
        "description": "The emergency services settings for a phone number.",
        "type": "object",
        "properties": {
          "emergency_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Allows you to enable or disable emergency services on the phone number. In order to enable emergency services, you must also set an emergency_address_id."
          },
          "emergency_address_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the address to be used with emergency services."
          },
          "emergency_status": {
            "type": "string",
            "description": "Represents the state of the number regarding emergency activation.",
            "default": "disabled",
            "enum": [
              "disabled",
              "active",
              "provisioning",
              "deprovisioning"
            ]
          }
        },
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019"
        }
      },
      "EncryptedMedia": {
        "type": "string",
        "enum": [
          "SRTP",
          "ZRTP"
        ],
        "nullable": true,
        "example": "SRTP",
        "description": "Enable use of SRTP or ZRTP for encryption. Valid values are those listed or null. Cannot be set to non-null if the transport_portocol is TLS."
      },
      "EnqueueRequest": {
        "type": "object",
        "title": "Enqueue Request",
        "properties": {
          "queue_name": {
            "description": "The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.",
            "type": "string",
            "example": "tier_1_support"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "max_wait_time_secs": {
            "description": "The number of seconds after which the call will be removed from the queue.",
            "type": "integer",
            "example": 600
          },
          "max_size": {
            "description": "The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.",
            "type": "integer",
            "default": 100,
            "example": 200
          }
        },
        "example": {
          "queue": "support",
          "max_wait_time_secs": 600,
          "max_size": 20,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Error": {
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^\\d{4}"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "type": "string",
                "format": "json-pointer"
              },
              "parameter": {
                "description": "Indicates which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "description": "JSON pointer (RFC6901) to the offending entity."
          },
          "parameter": {
            "type": "string",
            "description": "Indicates which query parameter caused the error."
          }
        }
      },
      "Errors": {
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ExternalMessageDetailRecordDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Message sent time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "outbound_profile_name": {
            "type": "string",
            "description": "Configured profile name. New profiles can be created and configured on Telnyx portal",
            "example": "configured-profile-name"
          },
          "outbound_profile_id": {
            "type": "string",
            "description": "Configured profile id. New profiles can be created and configured on Telnyx portal",
            "example": "30ef55db-c4a2-4c4a-9804-a68077973d07"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "parts": {
            "type": "integer",
            "description": "Number of parts this message has. Max number of character is 160. If message contains more characters then that it will be broken down in multiple parts",
            "example": 2
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "cld": {
            "type": "string",
            "description": "The destination number for a call, or the callee",
            "example": "+1555123456"
          },
          "cli": {
            "type": "string",
            "description": "The number associated with the person initiating the call, or the caller",
            "example": "+1555123456"
          },
          "rate": {
            "$ref": "#/components/schemas/MessageRate"
          },
          "cost": {
            "$ref": "#/components/schemas/MessageCost"
          },
          "country_iso": {
            "type": "string",
            "description": "Cld number ISO country code.",
            "example": "US"
          },
          "message_type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "errors": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "description": "Error returned by the gateway in case sending of message failed.",
            "example": "US",
            "items": {
              "type": "string",
              "description": "Error returned by the gateway in case sending of message failed.",
              "example": "40001"
            }
          },
          "normalized_carrier": {
            "type": "string",
            "description": "Cld carrier.",
            "example": "T-Mobile"
          },
          "pass_through_fee": {
            "$ref": "#/components/schemas/PassThroughFee"
          },
          "tags": {
            "type": "string",
            "description": "User tag.",
            "example": "tag1"
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code.",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code.",
            "example": "01"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "record_type": {
            "type": "string",
            "example": "message_detail_record",
            "default": "message_detail_record"
          }
        }
      },
      "ExternalWdrDetailRecordDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "WDR id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Record created time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "cost": {
            "$ref": "#/components/schemas/WirelessCost"
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code.",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code.",
            "example": "01"
          },
          "downlink_data": {
            "$ref": "#/components/schemas/DownlinkData"
          },
          "duration_seconds": {
            "type": "number",
            "description": "Session duration in seconds.",
            "example": 1
          },
          "imsi": {
            "type": "string",
            "description": "International mobile subscriber identity",
            "example": "123"
          },
          "rate": {
            "$ref": "#/components/schemas/WirelessRate"
          },
          "sim_group_name": {
            "type": "string",
            "description": "Defined sim group name",
            "example": "sim name"
          },
          "sim_group_id": {
            "type": "string",
            "description": "Sim group unique identifier",
            "example": "f05a189f-7c46-4531-ac56-1460dc465a42"
          },
          "sim_card_id": {
            "type": "string",
            "description": "Sim card unique identifier",
            "example": "877f80a6-e5b2-4687-9a04-88076265720f"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number",
            "example": "+12345678910"
          },
          "uplink_data": {
            "$ref": "#/components/schemas/UplinkData"
          },
          "record_type": {
            "type": "string",
            "example": "wdr"
          }
        }
      },
      "ExternalWdrGetDetailResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalWdrDetailRecordDto"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "Fax": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "example": "fax",
            "enum": [
              "fax"
            ]
          },
          "id": {
            "description": "Identifies the fax.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "connection_id": {
            "description": "The connection ID to send the fax with.",
            "type": "string",
            "example": "234423"
          },
          "direction": {
            "description": "The direction of the fax.",
            "type": "string",
            "example": "outbound",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "media_url": {
            "description": "The URL to the PDF used for the fax's media. If media_name was supplied, this is omitted.",
            "type": "string",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          },
          "media_name": {
            "description": "The media_name of a file used for the fax's media.",
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "to": {
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
            "type": "string",
            "example": "+13127367276"
          },
          "from": {
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "type": "string",
            "example": "+13125790015"
          },
          "quality": {
            "description": "The quality of the fax. Can be normal, high, very_high",
            "type": "string",
            "example": "high",
            "default": "high"
          },
          "status": {
            "description": "Status of the fax",
            "type": "string",
            "example": "queued",
            "enum": [
              "queued",
              "media.processed",
              "sending",
              "delivered",
              "failed",
              "initiated",
              "receiving",
              "media.processing",
              "received"
            ]
          },
          "webhook_url": {
            "description": "URL that will receive fax webhooks",
            "type": "string"
          },
          "webhook_failover_url": {
            "description": "Optional failover URL that will receive fax webhooks if webhook_url doesn't return a 2XX response",
            "type": "string"
          },
          "store_media": {
            "description": "Should fax media be stored on temporary URL.",
            "type": "boolean"
          },
          "stored_media_url": {
            "description": "If store_media was set to true, this is a link to temporary location. Link expires after 7 days.",
            "type": "string"
          },
          "created_at": {
            "description": "ISO 8601 timestamp when resource was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "ISO 8601 timestamp when resource was updated",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "record_type": "fax",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "connection_id": "c-1",
          "direction": "outbound",
          "from": "+123",
          "to": "+456",
          "media_url": "http://www.example.com/fax.pdf",
          "store_media": true,
          "stored_media_url": "https://s3.amazonaws.com/faxes-dev/user-1/cf4a6b52-bf8e-4945-9f49-611d0d2b083b.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=xxxxxxxxxx%2F20200505%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200505T095917Z&X-Amz-Expires=7200&X-Amz-SignedHeaders=host&X-Amz-Signature=fac2af40464fcc77673ad762db86e34f9c1b91a82699b5578c5327f53874df51",
          "quality": "high",
          "webhook_url": "http://www.example.com/webhooks",
          "webhook_failover_url": "",
          "status": "queued",
          "created_at": "2020-05-05T09:59:12",
          "updated_at": "2020-05-05T09:59:12"
        }
      },
      "FaxApplication": {
        "type": "object",
        "title": "Fax Application",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IntId"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fax_application"
          },
          "application_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "$ref": "#/components/schemas/WebhookEventUrl"
          },
          "webhook_event_failover_url": {
            "$ref": "#/components/schemas/WebhookEventFailoverUrl"
          },
          "webhook_timeout_secs": {
            "$ref": "#/components/schemas/WebhookTimeoutSecs"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fax_application",
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "FaxDelivered": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.delivered",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "call_duration_secs": 25,
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "page_count": 2,
              "status": "delivered",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "fax.delivered",
            "enum": [
              "fax.delivered"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_duration_secs": {
                "description": "The duration of the call in seconds.",
                "type": "integer",
                "example": 25
              },
              "connection_id": {
                "description": "The ID of the connection that was used to send the fax.",
                "type": "string",
                "example": "234423"
              },
              "direction": {
                "description": "The direction of the fax.",
                "type": "string",
                "example": "outbound",
                "enum": [
                  "inbound",
                  "outbound"
                ]
              },
              "fax_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the fax."
              },
              "original_media_url": {
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "type": "string",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "type": "string",
                "example": "+13127367276"
              },
              "from": {
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "type": "string",
                "example": "+13125790015"
              },
              "user_id": {
                "description": "Identifier of the user to whom the fax belongs",
                "type": "string",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "page_count": {
                "description": "Number of transferred pages",
                "type": "integer",
                "example": 2
              },
              "status": {
                "type": "string",
                "example": "delivered",
                "enum": [
                  "delivered"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxFailed": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.failed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "failure_reason": "rejected",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "failed",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "fax.failed",
            "enum": [
              "fax.failed"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "description": "The ID of the connection that was used to send the fax.",
                "type": "string",
                "example": "234423"
              },
              "direction": {
                "description": "The direction of the fax.",
                "type": "string",
                "example": "outbound",
                "enum": [
                  "inbound",
                  "outbound"
                ]
              },
              "fax_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the fax."
              },
              "original_media_url": {
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "type": "string",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "type": "string",
                "example": "+13127367276"
              },
              "from": {
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "type": "string",
                "example": "+13125790015"
              },
              "user_id": {
                "description": "Identifier of the user to whom the fax belongs",
                "type": "string",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "failure_reason": {
                "type": "string",
                "enum": [
                  "rejected"
                ],
                "description": "Cause of the sending failure"
              },
              "status": {
                "type": "string",
                "example": "failed",
                "enum": [
                  "failed"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxMediaProcessed": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.media.processed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "media.processed",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "fax.media.processed",
            "enum": [
              "fax.media.processed"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "description": "The ID of the connection that was used to send the fax.",
                "type": "string",
                "example": "234423"
              },
              "direction": {
                "description": "The direction of the fax.",
                "type": "string",
                "example": "outbound",
                "enum": [
                  "inbound",
                  "outbound"
                ]
              },
              "fax_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the fax."
              },
              "original_media_url": {
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "type": "string",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "type": "string",
                "example": "+13127367276"
              },
              "from": {
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "type": "string",
                "example": "+13125790015"
              },
              "user_id": {
                "description": "Identifier of the user to whom the fax belongs",
                "type": "string",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "type": "string",
                "example": "media.processed",
                "enum": [
                  "media.processed"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxQueued": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.queued",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "queued",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "fax.queued",
            "enum": [
              "fax.queued"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "description": "The ID of the connection that was used to send the fax.",
                "type": "string",
                "example": "234423"
              },
              "direction": {
                "description": "The direction of the fax.",
                "type": "string",
                "example": "outbound",
                "enum": [
                  "inbound",
                  "outbound"
                ]
              },
              "fax_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the fax."
              },
              "original_media_url": {
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "type": "string",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "type": "string",
                "example": "+13127367276"
              },
              "from": {
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "type": "string",
                "example": "+13125790015"
              },
              "user_id": {
                "description": "Identifier of the user to whom the fax belongs",
                "type": "string",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "type": "string",
                "example": "queued",
                "enum": [
                  "queued"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "FaxSendingStarted": {
        "type": "object",
        "example": {
          "data": {
            "event_type": "fax.sending.started",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.039204Z",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "sending",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "fax.sending.started",
            "enum": [
              "fax.sending.started"
            ],
            "description": "The type of event being delivered."
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "description": "The ID of the connection that was used to send the fax.",
                "type": "string",
                "example": "234423"
              },
              "direction": {
                "description": "The direction of the fax.",
                "type": "string",
                "example": "outbound",
                "enum": [
                  "inbound",
                  "outbound"
                ]
              },
              "fax_id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the fax."
              },
              "original_media_url": {
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "type": "string",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
                "type": "string",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "type": "string",
                "example": "+13127367276"
              },
              "from": {
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "type": "string",
                "example": "+13125790015"
              },
              "user_id": {
                "description": "Identifier of the user to whom the fax belongs",
                "type": "string",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "type": "string",
                "example": "sending",
                "enum": [
                  "sending"
                ],
                "description": "The status of the fax."
              }
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "filter_type": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ]
          },
          "cli": {
            "type": "string",
            "example": "+13129457420"
          },
          "cli_filter": {
            "type": "string",
            "enum": [
              "contains",
              "starts_with",
              "ends_with"
            ]
          },
          "cld": {
            "type": "string",
            "example": "+13129457420"
          },
          "cld_filter": {
            "type": "string",
            "enum": [
              "contains",
              "starts_with",
              "ends_with"
            ]
          },
          "tags_list": {
            "type": "string",
            "example": "tag1"
          },
          "billing_group": {
            "type": "string",
            "example": "adfaa016-f921-4b6c-97bb-e4c1dad231c5"
          }
        }
      },
      "FirstCommandTimeout": {
        "title": "First Command Timeout",
        "type": "boolean",
        "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
        "default": false,
        "example": true
      },
      "FirstCommandTimeoutSecs": {
        "title": "First Command Timeout Secs",
        "type": "integer",
        "description": "Specifies how many seconds to wait before timing out a dial command.",
        "default": 30,
        "example": 10
      },
      "Fqdn": {
        "type": "object",
        "title": "Fqdn",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the resource.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fqdn"
          },
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this FQDN is attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "example": 5060
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fqdn",
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 5060,
          "dns_record_type": "a",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "FqdnConnection": {
        "type": "object",
        "title": "FQDN Connection",
        "required": [
          "connection_name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the resource.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fqdn_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fqdn_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10
          }
        }
      },
      "FqdnConnectionTransportProtocol": {
        "type": "string",
        "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
        "default": "UDP",
        "enum": [
          "UDP",
          "TCP",
          "TLS"
        ]
      },
      "GatherUsingAudioRequest": {
        "type": "object",
        "title": "Gather Using Audio Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back at the beginning of each prompt. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back at the beginning of each prompt. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "invalid_audio_url": {
            "type": "string",
            "description": "The URL of a file to play when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file. invalid_media_name and invalid_audio_url cannot be used together in one request.",
            "example": "http://example.com/invalid.wav"
          },
          "invalid_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times the file should be played if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after file playback ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://example.com/message.wav",
          "invalid_audio_url": "http://example.com/message.wav",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "timeout_millis": 10000,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GatherUsingSpeakRequest": {
        "type": "object",
        "title": "Gather Using Speak Request",
        "required": [
          "voice",
          "language",
          "payload"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "invalid_payload": {
            "description": "The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "minimum_digits": {
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "default": 1,
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "maximum_digits": {
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "default": 128,
            "type": "integer",
            "example": 10,
            "format": "int32"
          },
          "maximum_tries": {
            "description": "The maximum number of times that a file should be played back if there is no input from the user on the call.",
            "default": 3,
            "type": "integer",
            "example": 3,
            "format": "int32"
          },
          "timeout_millis": {
            "description": "The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.",
            "default": 60000,
            "type": "integer",
            "example": 60000,
            "format": "int32"
          },
          "terminating_digit": {
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "type": "string",
            "example": "#"
          },
          "valid_digits": {
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "type": "string",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "description": "The number of milliseconds to wait for input between digits.",
            "default": 5000,
            "type": "integer",
            "example": 10000,
            "format": "int32"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "say this on call",
          "invalid_payload": "say this on call",
          "payload_type": "text",
          "service_level": "premium",
          "voice": "male",
          "language": "arb",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "HangupRequest": {
        "type": "object",
        "title": "Hangup Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "HostedNumber": {
        "example": [
          {
            "record_type": "messaging_hosted_number",
            "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
            "phone_number": "+18665550001",
            "status": "successful"
          }
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_hosted_number"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "The messaging hosted phone number (+E.164 format)"
          },
          "status": {
            "type": "string",
            "enum": [
              "deleted",
              "failed",
              "pending",
              "successful"
            ]
          }
        }
      },
      "Hsm": {
        "title": "Hsm",
        "description": "The containing element for the message content \u2014 Indicates that the message is highly structured. Parameters contained within provide the structure.",
        "required": [
          "namespace",
          "element_name",
          "language",
          "localizable_params"
        ],
        "type": "object",
        "properties": {
          "namespace": {
            "description": "The namespace that will be used",
            "type": "string"
          },
          "element_name": {
            "description": "The element name that indicates which template to use within the namespace",
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "localizable_params": {
            "description": "This field is an array of values to apply to variables in the template",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableParam"
            }
          }
        },
        "example": {
          "namespace": "business_a_namespace",
          "element_name": "hello_world",
          "language": {
            "policy": "deterministic",
            "code": "en"
          },
          "localizable_params": [
            {
              "default": "1234"
            }
          ]
        }
      },
      "Image": {
        "title": "Image",
        "description": "The media object containing an image",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The media object ID returned when the media is successfully uploaded to the media endpoint.",
            "example": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
          },
          "link": {
            "type": "string",
            "description": "The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.",
            "example": "http://www.example.com/file"
          },
          "caption": {
            "type": "string",
            "description": "Describes the specified media.",
            "example": "My cool media!"
          }
        },
        "example": {
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68",
          "caption": "My cool media!"
        }
      },
      "ImmutableListString": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "description": "Error returned by the gateway in case sending of message failed.",
        "example": "US",
        "items": {
          "type": "string",
          "description": "Error returned by the gateway in case sending of message failed.",
          "example": "US"
        }
      },
      "ImmutableSetLong": {
        "type": "array",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        },
        "example": "[1234567890L, 9876543210L]",
        "items": {
          "type": "integer",
          "pattern": "^\\d{10}"
        }
      },
      "InboundFqdn": {
        "type": "object",
        "title": "Inbound FQDN",
        "properties": {
          "ani_number_format": {
            "type": "string",
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "default": "E.164-national",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls."
          },
          "dnis_number_format": {
            "type": "string",
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_routing_method": {
            "type": "string",
            "enum": [
              "sequential",
              "round-robin"
            ],
            "nullable": true,
            "default": null,
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or null, other values are not allowed."
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "nullable": true,
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)"
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "privacy_zone_enabled": {
            "type": "boolean",
            "description": "By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "type": "string",
            "default": "US",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "enum": [
              "US",
              "Europe",
              "Australia"
            ]
          },
          "sip_subdomain": {
            "type": "string",
            "default": null,
            "nullable": true,
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls."
          },
          "sip_subdomain_receive_settings": {
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "default": "from_anyone"
          },
          "timeout_1xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "minimum": 1,
            "maximum": 120,
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": [
            "G722"
          ],
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "privacy_zone_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20
        }
      },
      "InboundIp": {
        "type": "object",
        "title": "Inbound Ip",
        "example": {
          "ani_number_format": "+E.164",
          "dns_number_format": "+e164",
          "codecs": "G722",
          "default_primary_ip_id": "192.168.0.0",
          "default_tertiary_ip_id": "192.168.0.0",
          "default_secondary_ip_id": "192.168.0.0",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "privacy_zone_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20
        },
        "properties": {
          "ani_number_format": {
            "type": "string",
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "default": "E.164-national",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls."
          },
          "dnis_number_format": {
            "type": "string",
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_primary_ip_id": {
            "type": "string",
            "description": "The default primary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_secondary_ip_id": {
            "type": "string",
            "description": "The default secondary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_tertiary_ip_id": {
            "type": "string",
            "description": "The default tertiary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_routing_method": {
            "type": "string",
            "enum": [
              "sequential",
              "round-robin"
            ],
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed."
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "example": 10
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)"
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "privacy_zone_enabled": {
            "type": "boolean",
            "description": "By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "type": "string",
            "default": "US",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "enum": [
              "US",
              "Europe",
              "Australia"
            ]
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls."
          },
          "sip_subdomain_receive_settings": {
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "enum": [
              "only_my_connections",
              "from_anyone"
            ]
          },
          "timeout_1xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "minimum": 1,
            "maximum": 120,
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          }
        }
      },
      "InboundMessage": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "message.received",
            "enum": [
              "message.received"
            ],
            "description": "The type of event being delivered."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "payload": {
            "$ref": "#/components/schemas/InboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
          "event_type": "message.received",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "inbound",
            "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
            "type": "SMS",
            "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18665550001",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            },
            "to": [
              {
                "phone_number": "+18445550001",
                "status": "delivered",
                "carrier": "TELNYX LLC",
                "line_type": "VoIP"
              }
            ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": null,
            "received_at": "2019-01-23T18:10:02.574Z",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": []
          }
        }
      },
      "InboundMessageEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboundMessage"
          }
        }
      },
      "InboundMessagePayload": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "message",
            "enum": [
              "message"
            ],
            "description": "Identifies the type of the resource."
          },
          "direction": {
            "type": "string",
            "example": "inbound",
            "enum": [
              "inbound"
            ],
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "type": {
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ],
            "description": "The type of message. This value can be either 'sms' or 'mms'."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "pattern": "^\\+1\\d{10}",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed",
                    "webhook_delivered"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "pattern": "^\\+1\\d{10}",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "pattern": "^\\+1\\d{10}",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
              },
              "status": {
                "type": "string",
                "enum": [
                  "received",
                  "delivered"
                ]
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the sender."
              },
              "line_type": {
                "type": "string",
                "description": "The line-type of the sender.",
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless",
                  ""
                ]
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "The url of the media requested to be sent."
                },
                "content_type": {
                  "type": "string",
                  "description": "The MIME type of the requested media."
                },
                "size": {
                  "type": "integer",
                  "description": "The size of the requested media."
                },
                "hash_sha256": {
                  "type": "string",
                  "minLength": 32,
                  "maxLength": 32,
                  "desc/ription": "The SHA256 hash of the requested media."
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The URL where webhooks related to this message will be sent."
          },
          "webhook_failover_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails."
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the resource.",
            "items": {
              "type": "string"
            }
          },
          "cost": {
            "type": "object",
            "nullable": true,
            "properties": {
              "amount": {
                "type": "string",
                "pattern": "^d{3}.d{2}",
                "description": "The amount deducted from your account."
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "The ISO 4217 currency identifier."
              }
            }
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Not used for inbound messages."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Not used for inbound messages."
          },
          "valid_until": {
            "type": "string",
            "description": "Not used for inbound messages.",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "record_type": "message",
          "direction": "inbound",
          "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "type": "SMS",
          "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18665550001",
            "status": "delivered",
            "carrier": "T-MOBILE USA, INC.",
            "line_type": "Wireless"
          },
          "to": [
            {
              "phone_number": "+18445550001",
              "status": "delivered",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            }
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": null,
          "received_at": "2019-01-23T18:10:02.574Z",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": []
        }
      },
      "IntId": {
        "title": "Int ID",
        "type": "string",
        "pattern": "^\\d{10}",
        "description": "Uniquely identifies the resource.",
        "example": "1293384261075731499"
      },
      "Ip": {
        "type": "object",
        "title": "Ip",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the type of resource.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip"
          },
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip",
          "connection_id": "3456789987654",
          "ip_address": "192.168.0.0",
          "port": 5060,
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "IpConnection": {
        "type": "object",
        "title": "Ip Connection",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the type of resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "transport_protocol": {
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP",
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "example": "UDP"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "example": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "example": true
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "example": false
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundIp"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_primary_ip_id": "192.0.2.1",
            "default_secondary_ip_id": "198.51.100.1",
            "default_tertiary_ip_id": "203.0.113.1",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "telnyx",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "JoinConferenceRequest": {
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "title": "Join Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "end_conference_on_exit": {
            "description": "Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "soft_end_conference_on_exit": {
            "description": "Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold": {
            "description": "Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "hold_audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "hold_media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\"."
          },
          "mute": {
            "description": "Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "start_conference_on_enter": {
            "description": "Whether the conference should be started after the participant joins the conference. Defaults to \"false\".",
            "example": true,
            "type": "boolean"
          },
          "supervisor_role": {
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "beep_enabled": {
            "description": "Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.",
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "example": "on_exit",
            "type": "string"
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "end_conference_on_exit": true,
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "beep_enabled": "always"
        }
      },
      "Language": {
        "title": "Language",
        "required": [
          "policy",
          "code"
        ],
        "type": "object",
        "properties": {
          "policy": {
            "description": "The language policy the message should follow",
            "enum": [
              "fallback",
              "deterministic"
            ],
            "type": "string"
          },
          "code": {
            "description": "The code of the language or locale to use \u2014 Accepts both language and language_locale formats (e.g., en and en_US).",
            "type": "string"
          }
        },
        "example": {
          "policy": "deterministic",
          "code": "en"
        }
      },
      "LeaveQueueRequest": {
        "type": "object",
        "title": "Leave Queue Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "LedgerBillingGroupReport": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "ledger_billing_group_report",
            "enum": [
              "ledger_billing_group_report"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the organization that owns the resource."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed",
              "deleted"
            ],
            "description": "Status of the ledger billing group report"
          },
          "report_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "External url of the ledger billing group report, if the status is complete"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated."
          }
        },
        "example": {
          "record_type": "ledger_billing_group_report",
          "id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "organization_id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "report_url": "https://example.com",
          "created_at": "2019-10-15T10:07:15.527Z",
          "updated_at": "2019-10-15T10:07:15.527Z"
        }
      },
      "ListVerificationsResponse": {
        "title": "ListVerificationsResponse",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Verification"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ListVerifyProfilesResponse": {
        "title": "ListVerifyProfilesResponse",
        "description": "A paginated list of Verify profiles",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifyProfileResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "LocalizableParam": {
        "title": "LocalizableParam",
        "required": [
          "default"
        ],
        "type": "object",
        "properties": {
          "default": {
            "description": "Default text if localization fails",
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "date_time": {
            "$ref": "#/components/schemas/DateTimeObject"
          }
        },
        "example": {
          "default": "<param value>"
        }
      },
      "Location": {
        "title": "Location",
        "required": [
          "longitude",
          "latitude",
          "name",
          "address"
        ],
        "type": "object",
        "properties": {
          "longitude": {
            "description": "Longitude of the location",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude of the location",
            "type": "string"
          },
          "name": {
            "description": "Name of the location",
            "type": "string"
          },
          "address": {
            "description": "Address of the location. Only displayed if name is present.",
            "type": "string"
          }
        },
        "example": {
          "longitude": "<Longitude>",
          "latitude": "<Latitude>",
          "name": "<Location Name>",
          "address": "<Location's Address>"
        }
      },
      "Loopcount": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "ManagedAccount": {
        "type": "object",
        "title": "ManagedAccount",
        "required": [
          "record_type",
          "id",
          "email",
          "api_key",
          "api_user",
          "api_token",
          "manager_account_id",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "example": "managed_account",
            "enum": [
              "managed_account"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies the managed account.",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The managed account's email.",
            "example": "user@example.com"
          },
          "api_key": {
            "type": "string",
            "description": "The managed account's V2 API access key",
            "example": "KEY0174227C1D16D1B180A8FF742AD37F70_1bA4vlJKHpZcJGaSXaadFu"
          },
          "api_user": {
            "type": "string",
            "description": "The manager account's email, which serves as the V1 API user identifier",
            "example": "managed_account@example.com"
          },
          "api_token": {
            "type": "string",
            "description": "The managed account's V1 API token",
            "example": "x6oexQNHTs-fZ7-QsDMOeg"
          },
          "organization_name": {
            "type": "string",
            "description": "The organization the managed account is associated with.",
            "example": "Example Company LLC"
          },
          "manager_account_id": {
            "type": "string",
            "description": "The ID of the manager account associated with the managed account.",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "balance": {
            "$ref": "#/components/schemas/ManagedAccountBalance"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "ManagedAccountBalance": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "balance",
            "enum": [
              "balance"
            ],
            "description": "Identifies the type of the resource."
          },
          "balance": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "The account's current balance.",
            "example": "300.00"
          },
          "credit_limit": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "The account's credit limit.",
            "example": "100.00"
          },
          "available_credit": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "Available amount to spend (balance + credit limit)",
            "example": "400.00"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD"
            ],
            "description": "The ISO 4217 currency identifier.",
            "example": "USD"
          }
        },
        "example": {
          "record_type": "balance",
          "balance": "300.00",
          "credit_limit": "100.00",
          "available_credit": "400.00",
          "currency": "USD"
        }
      },
      "MarkMessageAsReadRequestBody": {
        "title": "Mark Message As Read Request Body",
        "required": [
          "whatsapp_user_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "whatsapp_user_id": {
            "type": "string",
            "description": "The user's WhatsApp ID.",
            "example": "15125551212"
          },
          "status": {
            "default": "read",
            "type": "string"
          }
        },
        "example": {
          "whatsapp_user_id": "15125551212",
          "status": "read"
        }
      },
      "MdrDeleteDetailReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrDetailReportResponse"
          }
        }
      },
      "MdrDeleteUsageReportsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrDetailReportResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "directions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INBOUND",
                "OUTBOUND"
              ]
            }
          },
          "record_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INCOMPLETE",
                "COMPLETED",
                "ERRORS"
              ]
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "integer",
              "pattern": "^\\d{10}"
            }
          },
          "report_name": {
            "type": "string",
            "example": "report_name_8hvb45Gu"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ]
          },
          "report_url": {
            "type": "string",
            "example": "http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          },
          "record_type": {
            "type": "string",
            "example": "mdr_report"
          }
        }
      },
      "MdrDetailResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Message sent time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "profile_name": {
            "type": "string",
            "description": "Configured profile name. New profiles can be created and configured on Telnyx portal",
            "example": "configured-profile-name"
          },
          "direction": {
            "type": "string",
            "description": "Direction of message - inbound or outbound.",
            "example": "outbound"
          },
          "parts": {
            "type": "number",
            "description": "Number of parts this message has. Max number of character is 160. If message contains more characters then that it will be broken down in multiple parts",
            "example": 2
          },
          "status": {
            "type": "string",
            "description": "Message status",
            "example": "DELIVERED",
            "enum": [
              "GW_TIMEOUT",
              "DELIVERED",
              "DLR_UNCONFIRMED",
              "DLR_TIMEOUT",
              "RECEIVED",
              "GW_REJECT",
              "FAILED"
            ]
          },
          "cld": {
            "type": "string",
            "description": "The destination number for a call, or the callee",
            "example": "+1555123456"
          },
          "cli": {
            "type": "string",
            "description": "The number associated with the person initiating the call, or the caller",
            "example": "+1555123456"
          },
          "rate": {
            "type": "string",
            "description": "Rate applied to the message",
            "example": "0.05"
          },
          "cost": {
            "type": "string",
            "description": "Final cost. Cost is calculated as rate * parts",
            "example": "0.1"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD",
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ]
          },
          "id": {
            "type": "string",
            "description": "Id of message detail record",
            "example": "99b637f3-07fd-45ac-b9ca-b87208c24650"
          },
          "message_type": {
            "type": "string",
            "description": "Type of message",
            "example": "SMS",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "record_type": {
            "type": "string",
            "example": "mdr_report"
          }
        }
      },
      "MdrGetDetailReportByIdResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrDetailReportResponse"
          }
        }
      },
      "MdrGetDetailReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrDetailReportResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "MdrGetDetailResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrDetailResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "MdrGetSyncUsageReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrGetUsageReportsByIdResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrGetUsageReportsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrUsageReportResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "MdrMessageBodyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessageBody"
          }
        }
      },
      "MdrPostDetailReportRequest": {
        "required": [
          "end_date",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "directions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INBOUND",
                "OUTBOUND"
              ]
            }
          },
          "record_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INCOMPLETE",
                "COMPLETED",
                "ERRORS"
              ]
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "integer",
              "pattern": "^\\d{10}"
            }
          },
          "report_name": {
            "type": "string"
          },
          "include_message_body": {
            "type": "boolean",
            "example": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          }
        }
      },
      "MdrPostDetailReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrDetailReportResponse"
          }
        }
      },
      "MdrPostUsageReportRequest": {
        "required": [
          "aggregation_type",
          "end_date",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "aggregation_type": {
            "type": "string",
            "enum": [
              "NO_AGGREGATION",
              "PROFILE",
              "TAGS"
            ]
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          }
        }
      },
      "MdrPostUsageReportsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrUsageRecord": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "string",
            "example": "0"
          },
          "direction": {
            "type": "string",
            "example": "outbound"
          },
          "product": {
            "type": "string",
            "example": "outbound"
          },
          "connection": {
            "type": "string",
            "example": "all"
          },
          "received": {
            "type": "string",
            "example": "0"
          },
          "delivered": {
            "type": "string",
            "example": "0"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "parts": {
            "type": "string",
            "example": "0"
          },
          "sent": {
            "type": "string",
            "example": "0"
          },
          "profile_id": {
            "type": "string",
            "example": "All"
          },
          "tags": {
            "type": "string",
            "example": "All"
          },
          "message_type": {
            "type": "string",
            "example": "SMS"
          },
          "tn_type": {
            "type": "string",
            "example": "TF"
          },
          "carrier_passthrough_fee": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "MdrUsageReportResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "integer",
              "pattern": "^\\d{10}"
            }
          },
          "aggregation_type": {
            "type": "string",
            "enum": [
              "NO_AGGREGATION",
              "PROFILE",
              "TAGS"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ]
          },
          "report_url": {
            "type": "string",
            "example": "http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrUsageRecord"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00-06:00"
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          },
          "record_type": {
            "type": "string",
            "example": "mdr_usage_report"
          }
        }
      },
      "MediaFeatures": {
        "description": "The media features settings for a phone number.",
        "type": "object",
        "properties": {
          "rtp_auto_adjust_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When RTP Auto-Adjust is enabled, the destination RTP address port will be automatically changed to match the source of the incoming RTP packets."
          },
          "media_handling_mode": {
            "type": "string",
            "default": "default",
            "enum": [
              "default",
              "proxy"
            ],
            "description": "Controls how media is handled for the phone number. default: media routed through Telnyx with transcode support. proxy: media routed through Telnyx with no transcode support."
          },
          "accept_any_rtp_packets_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, Telnyx will accept RTP packets from any customer-side IP address and port, not just those to which Telnyx is sending RTP."
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether Telnyx will accept a T.38 re-INVITE for this phone number. Note that Telnyx will not send a T.38 re-INVITE; this option only controls whether one will be accepted."
          }
        },
        "example": {
          "rtp_auto_adjust_enabled": true,
          "media_handling_mode": "default",
          "accept_any_rtp_packets_enabled": true,
          "t38_fax_gateway_enabled": true
        }
      },
      "MediaRequestBody": {
        "title": "Media Request Body",
        "description": "",
        "required": [
          "whatsapp_user_id",
          "media_content_type",
          "upload_file"
        ],
        "type": "object",
        "properties": {
          "whatsapp_user_id": {
            "type": "string",
            "description": "The user's WhatsApp ID."
          },
          "media_content_type": {
            "type": "string",
            "description": "The content-type of the uplaoded media."
          },
          "upload_file": {
            "type": "string",
            "format": "binary",
            "description": "The media to store with WhatsApp."
          }
        }
      },
      "MediaResource": {
        "type": "object",
        "title": "Media Resource",
        "properties": {
          "media_name": {
            "description": "Uniquely identifies a media resource.",
            "type": "string"
          },
          "expires_at": {
            "description": "ISO 8601 formatted date of when the media resource will expire and be deleted.",
            "type": "string",
            "example": "2020-01-23T18:10:02.574Z"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          }
        },
        "example": {
          "media_name": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "expires_at": "2020-01-23T18:10:02.574Z",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z"
        }
      },
      "Message": {
        "title": "Message",
        "description": "",
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "whatsapp_message_id"
            ],
            "readOnly": true
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "whatsapp_message_id",
          "id": "gBEGkYiEB1VXAglK1ZEqA1YKPrU"
        }
      },
      "MessageBody": {
        "type": "object",
        "properties": {
          "message_body": {
            "type": "string",
            "description": "Text of the message. This is available only for last 7 days",
            "example": "This is message text"
          },
          "record_type": {
            "type": "string",
            "example": "message_body",
            "default": "message_body"
          }
        }
      },
      "MessageCost": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Final cost. Cost is calculated as rate * parts",
            "example": 0.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "MessageDetailRecord": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the message",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "user_id": {
            "type": "string",
            "description": "Identifier of the Telnyx account who owns the message",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "completed_at": {
            "type": "string",
            "description": "Message completion time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00Z"
          },
          "created_at": {
            "type": "string",
            "description": "Message creation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Message updated time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00Z"
          },
          "sent_at": {
            "type": "string",
            "description": "Time when the message was sent",
            "format": "date-time",
            "example": "2020-07-01T00:00:00Z"
          },
          "carrier": {
            "type": "string",
            "description": "Country-specific carrier used to send or receive the message",
            "example": "T-Mobile USA"
          },
          "carrier_fee": {
            "type": "string",
            "description": "Fee charged by certain carriers in order to deliver certain message types. Telnyx passes this fee on to the customer according to our pricing table",
            "example": "0.003"
          },
          "cld": {
            "type": "string",
            "description": "The recipient of the message (to parameter in the Messaging API)",
            "example": "+1555123456"
          },
          "cli": {
            "type": "string",
            "description": "The sender of the message (from parameter in the Messaging API). For Alphanumeric ID messages, this is the sender ID value",
            "example": "+1555123456"
          },
          "country_code": {
            "type": "string",
            "description": "Two-letter representation of the country of the cld property using the ISO 3166-1 alpha-2 format",
            "example": "US"
          },
          "delivery_status": {
            "type": "string",
            "description": "Final webhook delivery status",
            "example": "success: webhook succeeded"
          },
          "delivery_status_failover_url": {
            "type": "string",
            "description": "Failover customer-provided URL which Telnyx posts delivery status webhooks to",
            "example": "https://api.example.com/sms/telnyx/inbound"
          },
          "delivery_status_webhook_url": {
            "type": "string",
            "description": "Primary customer-provided URL which Telnyx posts delivery status webhooks to",
            "example": "https://api.example.com/sms/telnyx/inbound"
          },
          "direction": {
            "type": "string",
            "description": "Logical direction of the message from the Telnyx customer's perspective. It's inbound when the Telnyx customer receives the message, or outbound otherwise",
            "example": "outbound",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          "fteu": {
            "type": "boolean",
            "description": "Indicates whether this is a Free-To-End-User (FTEU) short code message",
            "example": false
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID",
            "example": "01"
          },
          "message_type": {
            "type": "string",
            "description": "Describes the Messaging service used to send the message. Available services are: Short Message Service (SMS), Multimedia Messaging Service (MMS), and Rich Communication Services (RCS)",
            "example": "SMS",
            "enum": [
              "SMS",
              "MMS",
              "RCS"
            ]
          },
          "on_net": {
            "type": "boolean",
            "description": "Indicates whether both sender and recipient numbers are Telnyx-managed",
            "example": true
          },
          "profile_id": {
            "type": "string",
            "description": "Unique identifier of the Messaging Profile used to send or receive the message",
            "example": "30ef55db-c4a2-4c4a-9804-a68077973d07"
          },
          "profile_name": {
            "type": "string",
            "description": "Name of the Messaging Profile used to send or receive the message",
            "example": "My Messaging Profile"
          },
          "source_country_code": {
            "type": "string",
            "description": "Two-letter representation of the country of the cli property using the ISO 3166-1 alpha-2 format",
            "example": "US"
          },
          "status": {
            "type": "string",
            "description": "Final status of the message after the delivery attempt",
            "example": "delivered",
            "enum": [
              "gw_timeout",
              "delivered",
              "dlr_unconfirmed",
              "dlr_timeout",
              "received",
              "gw_reject",
              "failed"
            ]
          },
          "tags": {
            "type": "string",
            "description": "Comma-separated tags assigned to the Telnyx number associated with the message",
            "example": "tag1,tag2,tag3"
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.003"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "cost": {
            "type": "string",
            "description": "Amount, in the user currency, for the Telnyx billing cost",
            "example": "0.003"
          },
          "errors": {
            "type": "array",
            "description": "Telnyx API error codes returned by the Telnyx gateway",
            "items": {
              "type": "string",
              "example": "40001"
            }
          },
          "parts": {
            "type": "integer",
            "description": "Number of message parts. The message is broken down in multiple parts when its length surpasses the limit of 160 characters",
            "example": 2
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the record schema",
            "example": "message_detail_record",
            "default": "message_detail_record"
          }
        },
        "required": [
          "record_type"
        ]
      },
      "MessageRate": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Rate applied to the message",
            "example": 0.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "MessageStatus": {
        "type": "string",
        "description": "Message status",
        "example": "DELIVERED",
        "enum": [
          "GW_TIMEOUT",
          "DELIVERED",
          "DLR_UNCONFIRMED",
          "DLR_TIMEOUT",
          "RECEIVED",
          "GW_REJECT",
          "FAILED"
        ]
      },
      "MessageType": {
        "title": "Message Type",
        "description": "type of the message",
        "default": "text",
        "enum": [
          "audio",
          "contacts",
          "document",
          "hsm",
          "image",
          "location",
          "template",
          "text",
          "video",
          "voice",
          "unknown"
        ],
        "type": "string"
      },
      "MessagingFeatureSet": {
        "type": "object",
        "nullable": true,
        "required": [
          "domestic_two_way",
          "international_inbound",
          "international_outbound"
        ],
        "description": "The set of features available for a specific messaging use case (SMS or MMS). Features\ncan vary depending on the characteristics the phone number, as well as its current\nproduct configuration.\n",
        "properties": {
          "domestic_two_way": {
            "type": "boolean",
            "description": "Send messages to and receive messages from numbers in the same country."
          },
          "international_inbound": {
            "type": "boolean",
            "description": "Receive messages from numbers in other countries."
          },
          "international_outbound": {
            "type": "boolean",
            "description": "Send messages to numbers in other countries."
          }
        },
        "example": {
          "domestic_two_way": true,
          "international_inbound": false,
          "international_outbound": true
        }
      },
      "MessagingHostedNumberOrder": {
        "type": "object",
        "example": {
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "record_type": "messaging_hosted_number_order",
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "status": "pending",
          "phone_numbers": [
            {
              "record_type": "messaging_hosted_number",
              "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
              "phone_number": "+18665550001",
              "status": "pending"
            },
            {
              "record_type": "messaging_hosted_number",
              "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
              "phone_number": "+18665550002",
              "status": "pending"
            }
          ]
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_hosted_number_order",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Resource unique identifier.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Automatically associate the number with this messaging profile ID when the order is complete."
          },
          "status": {
            "type": "string",
            "enum": [
              "failed",
              "pending",
              "successful"
            ]
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostedNumber"
            }
          }
        }
      },
      "MessagingProfile": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "messaging_profile"
            ],
            "readOnly": true
          },
          "id": {
            "description": "Identifies the type of resource.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean"
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ]
          },
          "whitelisted_destinations": {
            "description": "Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `[\"*\"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.",
            "type": "array",
            "nullable": true,
            "items": {
              "description": "ISO 3166-1 alpha-2 country code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "created_at": {
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "description": "Secret used to authenticate with v1 endpoints.",
            "type": "string"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "record_type": "messaging_profile",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c"
        }
      },
      "MessagingProfileDetailedMetric": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the aggregated data.",
            "example": "2019-01-23T18:10:02.574Z",
            "readOnly": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileMessageTypeMetrics"
            }
          }
        }
      },
      "MessagingProfileDetailedMetrics": {
        "type": "object",
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
          },
          "detailed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileDetailedMetric"
            }
          }
        },
        "example": {
          "detailed": [
            {
              "metrics": [
                {
                  "label": "longcode",
                  "sent": 1000,
                  "delivered": 990,
                  "errors": 0.01,
                  "received": 750
                }
              ],
              "timestamp": "2019-01-23T18:10:02.574Z"
            }
          ],
          "overview": {
            "record_type": "messaging_profile_metrics",
            "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "phone_numbers": 250,
            "outbound": {
              "sent": 1000,
              "delivered": 990,
              "errors": 0.01
            },
            "inbound": {
              "received": 850
            }
          }
        }
      },
      "MessagingProfileHighLevelMetrics": {
        "type": "object",
        "example": {
          "record_type": "messaging_profile_metrics",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "phone_numbers": 250,
          "outbound": {
            "sent": 1000,
            "delivered": 990,
            "errors": 0.01
          },
          "inbound": {
            "received": 850
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_profile_metrics",
            "enum": [
              "messaging_profile_metrics"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "number",
            "description": "The number of phone numbers associated with the messaging profile.",
            "readOnly": true
          },
          "outbound": {
            "type": "object",
            "properties": {
              "sent": {
                "type": "number",
                "description": "The number of outbound messages sent.",
                "readOnly": true
              },
              "delivered": {
                "type": "number",
                "description": "The number of outbound messages successfully delivered.",
                "readOnly": true
              },
              "error_ratio": {
                "type": "number",
                "description": "The ratio of messages sent that resulted in errors.",
                "readOnly": true
              }
            }
          },
          "inbound": {
            "type": "object",
            "properties": {
              "received": {
                "type": "number",
                "description": "The number of inbound messages received.",
                "readOnly": true
              }
            }
          }
        }
      },
      "MessagingProfileMessageTypeMetrics": {
        "type": "object",
        "example": {
          "label": "longcode",
          "sent": 1000,
          "delivered": 990,
          "errors": 0.01,
          "received": 750
        },
        "properties": {
          "label": {
            "type": "string",
            "description": "The metric type.",
            "readOnly": true
          },
          "sent": {
            "type": "number",
            "description": "The number of outbound messages sent.",
            "readOnly": true
          },
          "delivered": {
            "type": "number",
            "description": "The number of outbound messages successfully delivered.",
            "readOnly": true
          },
          "outbound_error_ratio": {
            "type": "number",
            "description": "The ratio of outbound messages sent that resulted in errors.",
            "readOnly": true
          },
          "received": {
            "type": "number",
            "description": "The number of inbound messages received.",
            "readOnly": true
          }
        }
      },
      "MessagingUrlDomain": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "url_domain": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "messaging_url_domain",
          "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
          "url_domain": "http://example.com",
          "use_case": "test"
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "Metadata": {
        "type": "object",
        "title": "Metadata",
        "properties": {
          "total_pages": {
            "type": "number",
            "description": "Total number of pages based on pagination settings",
            "example": 13,
            "format": "double"
          },
          "total_results": {
            "type": "number",
            "description": "Total number of results",
            "example": 13,
            "format": "double"
          },
          "page_number": {
            "type": "number",
            "description": "Current Page based on pagination settings (included when defaults are used.)",
            "example": 3,
            "format": "double"
          },
          "page_size": {
            "type": "number",
            "description": "Number of results to return per page based on pagination settings (included when defaults are used.)",
            "example": 1,
            "format": "double"
          }
        }
      },
      "MobileOperatorNetwork": {
        "type": "object",
        "title": "MobileOperatorNetwork",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "mobile_operator_network"
          },
          "name": {
            "description": "The operator network name.",
            "type": "string",
            "example": "AT&T Mobility (USACG)"
          },
          "tadig": {
            "type": "string",
            "description": "TADIG stands for Transferred Account Data Interchange Group. The TADIG code is a unique identifier for network operators in GSM mobile networks.",
            "example": "USACG"
          },
          "country_code": {
            "type": "string",
            "description": "The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
            "example": "US"
          },
          "mcc": {
            "type": "string",
            "description": "MCC stands for Mobile Country Code. It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "example": "310"
          },
          "mnc": {
            "type": "string",
            "description": "MNC stands for Mobile Network Code. It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "example": "410"
          }
        }
      },
      "MobileOperatorNetworkPreferencesRequest": {
        "description": "",
        "type": "object",
        "properties": {
          "mobile_operator_network_id": {
            "type": "string",
            "format": "uuid",
            "description": "The mobile operator network resource identification UUID.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "priority": {
            "type": "integer",
            "description": "It determines what is the priority of a specific operator network that should be assumed by a SIM card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.",
            "example": 0
          }
        }
      },
      "MobileOperatorNetworkPreferencesResponse": {
        "description": "",
        "type": "object",
        "properties": {
          "mobile_operator_network_id": {
            "type": "string",
            "format": "uuid",
            "description": "The mobile operator network resource identification UUID.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "mobile_operator_network_name": {
            "type": "string",
            "description": "The mobile operator network resource name.",
            "example": "AT&T Mobility (USACG)"
          },
          "priority": {
            "type": "integer",
            "description": "It determines what is the priority of a specific operator network that should be assumed by a SIM card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.",
            "example": 0
          }
        }
      },
      "MobileOperatorNetworksPreferencesRequest": {
        "type": "array",
        "description": "A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.",
        "items": {
          "$ref": "#/components/schemas/MobileOperatorNetworkPreferencesRequest"
        }
      },
      "MobileOperatorNetworksPreferencesResponse": {
        "type": "array",
        "description": "A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.",
        "items": {
          "$ref": "#/components/schemas/MobileOperatorNetworkPreferencesResponse"
        }
      },
      "Money": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "example": "0.06"
          },
          "currency": {
            "type": "string",
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ]
          }
        }
      },
      "Name": {
        "title": "Name",
        "description": "Full contact name",
        "required": [
          "formatted_name"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "description": "First name",
            "type": "string"
          },
          "formatted_name": {
            "description": "Full name as it normally appears",
            "type": "string"
          },
          "last_name": {
            "description": "Last name",
            "type": "string"
          },
          "suffix": {
            "description": "Name suffix",
            "type": "string"
          },
          "prefix": {
            "description": "Name preffix",
            "type": "string"
          }
        },
        "example": {
          "first_name": "John",
          "formatted_name": "John Smith",
          "last_name": "Smith"
        }
      },
      "NewBillingGroup": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the billing group"
          }
        },
        "example": {
          "name": "string"
        }
      },
      "NewLedgerBillingGroupReport": {
        "properties": {
          "year": {
            "type": "integer",
            "example": 2019,
            "description": "Year of the ledger billing group report"
          },
          "month": {
            "type": "integer",
            "example": 10,
            "description": "Month of the ledger billing group report"
          }
        },
        "example": {
          "year": 2019,
          "month": 10
        }
      },
      "NotificationChannel": {
        "description": "A Notification Channel",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "notification_profile_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Profile.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "channel_type_id": {
            "type": "string",
            "description": "A Channel Type ID",
            "enum": [
              "sms",
              "voice",
              "email",
              "webhook"
            ]
          },
          "channel_destination": {
            "type": "string",
            "description": "The destination associated with the channel type.",
            "example": "+13125550000"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          }
        }
      },
      "NotificationEvent": {
        "description": "An object representing the available notifications.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "d5c395cd-9864-4609-b5e2-3f9fd4ce201a"
          },
          "name": {
            "type": "string",
            "description": "A human readable name.",
            "example": "Emergency Number Dialed"
          },
          "notification_category": {
            "type": "string",
            "example": "Calls"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z"
          }
        }
      },
      "NotificationEventCondition": {
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "70c7c5cb-dce2-4124-accb-870d39dbe852"
          },
          "name": {
            "type": "string",
            "example": "from phone number"
          },
          "description": {
            "type": "string",
            "example": "When emergency number dialed from phone number X"
          },
          "notification_event_id": {
            "type": "string",
            "example": "d5c395cd-9864-4609-b5e2-3f9fd4ce201a"
          },
          "associated_record_type": {
            "type": "string",
            "enum": [
              "account",
              "phone_number"
            ],
            "example": "phone_number"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "phone_number"
                },
                "optional": {
                  "type": "boolean",
                  "example": false
                },
                "data_type": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "allow_multiple_channels": {
            "description": "Dictates whether a notification channel id needs to be provided when creating a notficiation setting.",
            "type": "boolean",
            "example": false
          },
          "asynchronous": {
            "description": "Dictates whether a notification setting will take effect immediately.",
            "type": "boolean",
            "example": true
          },
          "supported_channels": {
            "description": "Dictates the supported notification channel types that can be emitted.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "webhook",
              "sms",
              "email",
              "voice"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z"
          }
        }
      },
      "NotificationProfile": {
        "description": "A Collection of Notification Channels",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "name": {
            "type": "string",
            "description": "A human readable name."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          }
        }
      },
      "NotificationSetting": {
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "8eb5b5f9-5893-423c-9f15-b487713d44d4"
          },
          "notification_event_condition_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Event Condition.",
            "example": "70c7c5cb-dce2-4124-accb-870d39dbe852"
          },
          "notification_profile_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Profile.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "associated_record_type": {
            "type": "string",
            "example": "phone_number",
            "readOnly": true
          },
          "associated_record_type_value": {
            "type": "string",
            "example": "+13125550000",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Most preferences apply immediately; however, other may needs to propagate.",
            "enum": [
              "enabled",
              "enable-received",
              "enable-pending",
              "enable-submtited",
              "delete-received",
              "delete-pending",
              "delete-submitted",
              "deleted"
            ],
            "example": "enable-received",
            "readOnly": true
          },
          "notification_channel_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Channel.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "phone_number"
                },
                "value": {
                  "type": "string",
                  "example": "+13125550000"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2019-10-15T10:07:15.527Z",
            "readOnly": true
          }
        }
      },
      "NumberHealthMetrics": {
        "type": "object",
        "nullable": false,
        "required": [
          "message_count",
          "inbound_outbound_ratio",
          "success_ratio",
          "spam_ratio"
        ],
        "description": "High level health metrics about the number and it's messaging sending patterns.\n",
        "properties": {
          "message_count": {
            "type": "integer",
            "description": "The number of messages analyzed for the health metrics."
          },
          "inbound_outbound_ratio": {
            "type": "number",
            "pattern": "^d{3}.d{2}",
            "description": "The ratio of messages received to the number of messages sent."
          },
          "success_ratio": {
            "type": "number",
            "pattern": "^d{3}.d{2}",
            "description": "The ratio of messages sucessfully delivered to the number of messages attempted."
          },
          "spam_ratio": {
            "type": "number",
            "pattern": "^d{3}.d{2}",
            "description": "The ratio of messages blocked for spam to the number of messages attempted."
          }
        },
        "example": {
          "message_count": 10,
          "inbound_outbound_ratio": 1,
          "success_ratio": 2,
          "spam_ratio": 10
        }
      },
      "NumberLookupRecord": {
        "type": "object",
        "title": "NumberLookup",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of record",
            "example": "number_lookup"
          },
          "country_code": {
            "type": "string",
            "description": "Region code that matches the specific country calling code",
            "example": "US"
          },
          "national_format": {
            "type": "string",
            "description": "Hyphen-separated national number, preceded by the national destination code (NDC), with a 0 prefix, if an NDC is found",
            "example": "(0312) 945-7420"
          },
          "phone_number": {
            "type": "string",
            "description": "E164-formatted phone number",
            "example": "+13129457420"
          },
          "fraud": {
            "type": "string",
            "description": "Unused",
            "example": null
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "caller_name": {
            "$ref": "#/components/schemas/CallerName"
          },
          "portability": {
            "$ref": "#/components/schemas/Portability"
          }
        }
      },
      "NumberOrder": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "writeOnly": true
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "example": 1,
            "readOnly": true
          },
          "connection_id": {
            "type": "string",
            "example": "346789098765567",
            "description": "Identifies the connection associated with this phone number."
          },
          "messaging_profile_id": {
            "type": "string",
            "example": "abc85f64-5717-4562-b3fc-2c9600",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "example": "abc85f64-5717-4562-b3fc-2c9600",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "example": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "phone_numbers": [
            {
              "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "record_type": "number_order_phone_number",
              "phone_number": "+19705555098",
              "regulatory_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "regulatory_requirements": [
                {
                  "record_type": "phone_number_regulatory_requirement",
                  "requirement_id": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576",
                  "field_value": "45f45a04-b4be-4592-95b1-9306b9db2b21",
                  "field_type": "address_id"
                }
              ],
              "requirements_met": true,
              "status": "success"
            }
          ],
          "record_type": "number_order",
          "connection_id": "346789098765567",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600",
          "billing_group_id": "abc85f64-5717-4562-b3fc-2c9600",
          "phone_numbers_count": 1,
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "requirements_met": true
        }
      },
      "NumberOrderDocument": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "387d1e31-a218-4375-8151-103f2d5e2d2c",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order_document",
            "readOnly": true
          },
          "file_id": {
            "type": "string",
            "description": "The id of the file to associate as a number order document.",
            "example": "1e3c5822-0362-4702-8e46-5a129f0d3976"
          },
          "requirements_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "example": "36aaf27d-986b-493c-bd1b-de16af2e4292"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "requirement_type": {
            "type": "string",
            "enum": [
              "address_proof",
              "identification",
              "reg_form"
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order document was uploaded.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          }
        },
        "example": {
          "id": "387d1e31-a218-4375-8151-103f2d5e2d2c",
          "record_type": "number_order_document",
          "file_id": "1e3c5822-0362-4702-8e46-5a129f0d3976",
          "requirements_id": "36aaf27d-986b-493c-bd1b-de16af2e4292",
          "customer_reference": "MY REF 001",
          "requirement_type": "address_proof",
          "created_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "NumberOrdered": {
        "type": "object",
        "title": "Number Order Event Data",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "number_order.complete",
            "description": "The type of event being delivered."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "payload": {
            "$ref": "#/components/schemas/NumberOrder"
          }
        }
      },
      "NumberOrderedEvent": {
        "type": "object",
        "title": "Number Order Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NumberOrdered"
          }
        }
      },
      "NumberPoolSettings": {
        "type": "object",
        "nullable": true,
        "required": [
          "toll_free_weight",
          "long_code_weight",
          "skip_unhealthy"
        ],
        "description": "Number Pool allows you to send messages from a pool of numbers of different types, assigning\nweights to each type. The pool consists of all the long code and toll free numbers\nassigned to the messaging profile.\n\nTo disable this feature, set the object field to `null`.\n",
        "properties": {
          "toll_free_weight": {
            "type": "number",
            "example": 10,
            "description": "Defines the probability weight for a Toll Free number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100. Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n"
          },
          "long_code_weight": {
            "type": "number",
            "example": 1,
            "description": "Defines the probability weight for a Long Code number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100.  Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n"
          },
          "skip_unhealthy": {
            "type": "boolean",
            "example": true,
            "description": "If set to true all unhealthy numbers will be automatically excluded from the pool.\nHealth metrics per number are calculated on a regular basis, taking into account the deliverability\nrate and the amount of messages marked as spam by upstream carriers.\nNumbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy.\n"
          },
          "sticky_sender": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, Number Pool will try to choose the same sending number for all messages to a particular\nrecipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new\nnumber will be chosen.\n"
          },
          "geomatch": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, Number Pool will try to choose a sending number with the same area code as the destination\nnumber. If there are no such numbers available, a nunber with a different area code will be chosen. Currently\nonly NANP numbers are supported.\n"
          }
        },
        "example": {
          "toll_free_weight": 10,
          "long_code_weight": 1,
          "skip_unhealthy": true,
          "sticky_sender": false,
          "geomatch": false
        }
      },
      "NumberReservation": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_reservation",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedPhoneNumber"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the entire reservation.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the numbers reservation was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the number reservation was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "number_reservation",
          "phone_numbers": [
            {
              "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
              "record_type": "reserved_phone_number",
              "phone_number": "+19705555098",
              "status": "pending",
              "created_at": "2018-01-01T00:00:00.000000Z",
              "updated_at": "2018-01-01T00:00:00.000000Z",
              "expired_at": "2018-01-01T00:00:00.000000Z",
              "errors": ""
            }
          ],
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "Organization": {
        "title": "Organization",
        "description": "Contact organization information",
        "required": [
          "company"
        ],
        "type": "object",
        "properties": {
          "company": {
            "description": "Name of the contact's company",
            "type": "string"
          },
          "department": {
            "description": "Name of the contact's department",
            "type": "string"
          },
          "title": {
            "description": "Contact's business title",
            "type": "string"
          }
        },
        "example": {
          "company": "WhatsApp",
          "department": "Design",
          "title": "Manager"
        }
      },
      "OutboundCallRecording": {
        "type": "object",
        "example": {
          "call_recording_type": "by_caller_phone_number",
          "call_recording_caller_phone_numbers": [
            "+19705555098"
          ],
          "call_recording_channels": "dual",
          "call_recording_format": "mp3"
        },
        "properties": {
          "call_recording_type": {
            "type": "string",
            "description": "Specifies which calls are recorded.",
            "enum": [
              "all",
              "none",
              "by_caller_phone_number"
            ]
          },
          "call_recording_caller_phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "When call_recording_type is 'by_caller_phone_number', only outbound calls using one of these numbers will be recorded. Numbers must be specified in E164 format.",
            "example": [
              "+19705555098"
            ]
          },
          "call_recording_channels": {
            "type": "string",
            "description": "When using 'dual' channels, the final audio file will be a stereo recording with the first leg on channel A, and the rest on channel B.",
            "example": "dual",
            "default": "single",
            "enum": [
              "single",
              "dual"
            ]
          },
          "call_recording_format": {
            "type": "string",
            "description": "The audio file format for calls being recorded.",
            "example": "mp3",
            "default": "wav",
            "enum": [
              "wav",
              "mp3"
            ]
          }
        }
      },
      "OutboundIp": {
        "type": "object",
        "title": "Outband Ip",
        "properties": {
          "call_parking_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Forces all SIP calls originated on this connection to be \"parked\" instead of \"bridged\" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next."
          },
          "ani_override": {
            "type": "string",
            "description": "Set a phone number as the ani_override value to override caller id number on outbound calls.",
            "default": ""
          },
          "ani_override_type": {
            "type": "string",
            "enum": [
              "always",
              "normal",
              "emergency"
            ],
            "description": "Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.",
            "default": "always"
          },
          "channel_limit": {
            "type": "integer",
            "default": null,
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection."
          },
          "instant_ringback_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When set, ringback will not wait for indication before sending ringback tone to calling party."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "default": false,
            "description": "Generate ringback tone through 183 session progress message with early media."
          },
          "localization": {
            "type": "string",
            "default": null,
            "description": "A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default."
          },
          "t38_reinvite_source": {
            "type": "string",
            "enum": [
              "telnyx",
              "customer",
              "disabled",
              "passthru",
              "caller-passthru",
              "callee-passthru"
            ],
            "description": "This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.",
            "default": "telnyx"
          },
          "tech_prefix": {
            "type": "string",
            "description": "Numerical chars only, exactly 4 characters.",
            "default": ""
          },
          "ip_authentication_method": {
            "type": "string",
            "default": "tech-prefixp-charge-info",
            "example": "tech-prefixp-charge-info",
            "enum": [
              "tech-prefixp-charge-info",
              "token"
            ]
          },
          "ip_authentication_token": {
            "type": "string",
            "default": null
          },
          "outbound_voice_profile_id": {
            "$ref": "#/components/schemas/OutboundVoiceProfileId"
          }
        },
        "example": {
          "call_parking_enabled": true,
          "ani_override": "string",
          "ani_override_type": "always",
          "channel_limit": 10,
          "instant_ringback_enabled": true,
          "generate_ringback_tone": true,
          "localization": "string",
          "t38_reinvite_source": "telnyx",
          "tech_prefix": "string",
          "ip_authentication_method": "token",
          "ip_authentication_token": "string",
          "outbound_voice_profile_id": "1293384261075731499"
        }
      },
      "OutboundMessage": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "event_type": {
            "type": "string",
            "example": "message.sent",
            "enum": [
              "message.sent",
              "message.finalized"
            ],
            "description": "The type of event being delivered."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created."
          },
          "payload": {
            "$ref": "#/components/schemas/OutboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "event_type": "message.sent",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "outbound",
            "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
            "type": "MMS",
            "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18445550001",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            },
            "to": [
              {
                "phone_number": "+18665550001",
                "status": "queued",
                "carrier": "T-MOBILE USA, INC.",
                "line_type": "Wireless"
              }
            ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [
              {
                "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
                "content_type": null,
                "sha256": null,
                "size": null
              }
            ],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": null,
            "received_at": "2019-01-23T18:10:02.574Z",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": []
          }
        }
      },
      "OutboundMessageEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutboundMessage"
          },
          "meta": {
            "type": "object",
            "properties": {
              "attempt": {
                "type": "integer",
                "example": 1,
                "description": "Number of attempts to deliver the webhook event."
              },
              "delivered_to": {
                "type": "string",
                "format": "uri",
                "example": "https://www.example.com/hooks",
                "description": "The webhook URL the event was delivered to."
              }
            }
          }
        }
      },
      "OutboundMessagePayload": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "message",
            "enum": [
              "message"
            ],
            "description": "Identifies the type of the resource."
          },
          "direction": {
            "type": "string",
            "example": "outbound",
            "enum": [
              "outbound"
            ],
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource."
          },
          "type": {
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ],
            "description": "The type of message."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the organization the messaging profile belongs to."
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "pattern": "^\\+1\\d{10}",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the receiver."
              },
              "line_type": {
                "type": "string",
                "description": "The line-type of the receiver.",
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless",
                  ""
                ]
              }
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "pattern": "^\\+1\\d{10}",
                  "description": "Receiving address (+E.164 formatted phone number or short code)."
                },
                "status": {
                  "type": "string",
                  "description": "The delivery status of the message.",
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "expired",
                    "sending_failed",
                    "delivery_unconfirmed",
                    "delivered",
                    "delivery_failed"
                  ]
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "type": "string",
                  "description": "The line-type of the receiver.",
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless",
                    ""
                  ]
                }
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject of multimedia message"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "The url of the media requested to be sent."
                },
                "content_type": {
                  "type": "string",
                  "nullable": true,
                  "description": "The MIME type of the requested media."
                },
                "sha256": {
                  "type": "string",
                  "nullable": true,
                  "description": "The SHA256 hash of the requested media."
                },
                "size": {
                  "type": "integer",
                  "nullable": true,
                  "description": "The size of the requested media."
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The URL where webhooks related to this message will be sent."
          },
          "webhook_failover_url": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails."
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "description": "Tags associated with the resource.",
            "items": {
              "type": "string"
            }
          },
          "cost": {
            "type": "object",
            "nullable": true,
            "properties": {
              "amount": {
                "type": "string",
                "pattern": "^d{3}.d{2}",
                "description": "The amount deducted from your account."
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "The ISO 4217 currency identifier."
              }
            }
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message was sent."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message was finalized."
          },
          "valid_until": {
            "type": "string",
            "description": "Message must be out of the queue by this time or else it will be discarded and marked as 'sending_failed'. Once the message moves out of the queue, this field will be nulled",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "record_type": "message",
          "direction": "outbound",
          "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
          "type": "MMS",
          "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18445550001",
            "carrier": "TELNYX LLC",
            "line_type": "VoIP"
          },
          "to": [
            {
              "phone_number": "+18665550001",
              "status": "queued",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            }
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [
            {
              "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
              "content_type": null,
              "sha256": null,
              "size": null
            }
          ],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": null,
          "received_at": "2019-01-23T18:10:02.574Z",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": []
        }
      },
      "OutboundVoiceProfile": {
        "type": "object",
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "example": {
          "id": "1293384261075731499",
          "record_type": "outbound_voice_profile",
          "name": "office",
          "connections_count": 12,
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "call_recording": {
            "call_recording_type": "by_caller_phone_number",
            "call_recording_caller_phone_numbers": [
              "+19705555098"
            ],
            "call_recording_channels": "dual",
            "call_recording_format": "mp3"
          },
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        },
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the resource.",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "outbound_voice_profile"
          },
          "name": {
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office",
            "minLength": 3
          },
          "connections_count": {
            "type": "integer",
            "description": "Amount of connections associated with this outbound voice profile.",
            "example": 12
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "example": 10,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "example": true,
            "default": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "office-profile"
            ]
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "example": [
              "US",
              "BR",
              "AU"
            ],
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "example": true,
            "default": false
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
            "default": null,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "OutboundVoiceProfileId": {
        "title": "Outbound Voice Profile ID",
        "type": "string",
        "description": "Identifies the associated outbound voice profile.",
        "pattern": "^\\d{10}",
        "example": "1293384261075731499"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "PaginationMetaSimple": {
        "type": "object",
        "properties": {
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          },
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          }
        }
      },
      "Participant": {
        "type": "object",
        "title": "Participant",
        "required": [
          "record_type",
          "id",
          "call_leg_id",
          "call_control_id",
          "conference",
          "whisper_call_control_ids",
          "created_at",
          "updated_at",
          "end_conference_on_exit",
          "soft_end_conference_on_exit",
          "status",
          "muted",
          "on_hold"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "participant"
            ],
            "example": "participant"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies the call leg associated with the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_control_id": {
            "type": "string",
            "description": "Call Control ID associated with the partiipant of the conference",
            "example": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ"
          },
          "conference": {
            "type": "object",
            "description": "Info about the conference that the participant is in",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the conference",
                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              },
              "name": {
                "type": "string",
                "description": "Name of the conference",
                "example": "All hands meeting"
              }
            }
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the participant can whisper to..",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.",
            "example": true
          },
          "soft_end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end after the participant leaves the conference.",
            "example": true
          },
          "status": {
            "type": "string",
            "enum": [
              "joining",
              "joined",
              "left"
            ],
            "description": "The status of the participant with respect to the lifecycle within the conference",
            "example": "joining"
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": true
          },
          "on_hold": {
            "type": "boolean",
            "description": "Whether the participant is put on_hold.",
            "example": true
          }
        },
        "example": {
          "record_type": "participant",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "end_conference_on_exit": true,
          "soft_end_conference_on_exit": true,
          "status": "joining",
          "muted": false,
          "on_hold": true,
          "call_control_id": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "call_leg_id": "3a15df2d-c801-4729-adf5-b56dd42e2abb",
          "conference": {
            "id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
            "name": "1"
          }
        }
      },
      "PassThroughFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Normalized carrier pass through fee",
            "example": 0.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "PauseRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "Phone": {
        "title": "Phone Number",
        "type": "object",
        "properties": {
          "phone": {
            "type": "string"
          },
          "type": {
            "description": "Standard Values: CELL, MAIN, IPHONE, HOME, WORK",
            "type": "string"
          },
          "id": {
            "description": "WhatsApp ID",
            "type": "string"
          }
        },
        "example": {
          "phone": "+1 (650) 555-1234",
          "type": "WORK",
          "id": "16505551234"
        }
      },
      "PhoneNumber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order_phone_number",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "example": "+19705555098"
          },
          "regulatory_group_id": {
            "type": "string",
            "example": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
            "readOnly": true
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberRegulatoryRequirement"
            }
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for a phone number, false otherwise.",
            "example": true,
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the phone number in the order.",
            "readOnly": true
          }
        },
        "example": {
          "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "record_type": "number_order_phone_number",
          "phone_number": "+19705555098",
          "regulatory_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "regulatory_requirements": [
            {
              "record_type": "phone_number_regulatory_requirement",
              "requirement_id": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576",
              "field_value": "45f45a04-b4be-4592-95b1-9306b9db2b21",
              "field_type": "address_id"
            }
          ],
          "requirements_met": true,
          "status": "success"
        }
      },
      "PhoneNumberDeletedDetailed": {
        "type": "object",
        "example": {
          "id": "1293384261075731499",
          "record_type": "phone_number",
          "phone_number": "+19705555098",
          "status": "deleted",
          "tags": [
            "tag_1",
            "tag_2"
          ],
          "external_pin": "1234",
          "connection_id": "1293384261075731499",
          "connection_name": "connection-name",
          "customer_reference": "customer-reference",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "messaging_profile_name": "regional-customers",
          "billing_group_id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "call_forwarding_enabled": true,
          "cnam_listing_enabled": true,
          "caller_id_name_enabled": true,
          "call_recording_enabled": true,
          "t38_fax_gateway_enabled": true,
          "phone_number_type": "longcode",
          "purchased_at": "2019-10-23T18:10:00.000Z",
          "created_at": "2019-10-23T18:10:00.000Z",
          "updated_at": "2019-10-24T18:10:00.000Z"
        },
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IntId"
          },
          "record_type": {
            "type": "string",
            "example": "phone_number",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164-formatted phone number associated with this record.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The phone number's current status.",
            "enum": [
              "purchase-pending",
              "purchase-failed",
              "port-pending",
              "port-failed",
              "active",
              "deleted",
              "emergency-only",
              "ported-out",
              "port-out-pending"
            ],
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "description": "A list of user-assigned tags to help manage the phone number.",
            "items": {
              "type": "string"
            }
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "connection_name": {
            "type": "string",
            "description": "The user-assigned name of the connection to be associated with this phone number.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "messaging_profile_name": {
            "type": "string",
            "description": "The name of the messaging profile associated with the phone number.",
            "example": "regional-customers"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether emergency services are enabled for this number.",
            "readOnly": true
          },
          "emergency_address_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the emergency address associated with the phone number.",
            "readOnly": true
          },
          "call_forwarding_enabled": {
            "type": "boolean",
            "default": true,
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "readOnly": true
          },
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Indicates whether a CNAM listing is enabled for this number.",
            "readOnly": true
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Indicates whether caller ID is enabled for this number.",
            "readOnly": true
          },
          "call_recording_enabled": {
            "type": "boolean",
            "description": "Indicates whether call recording is enabled for this number.",
            "readOnly": true
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Indicates whether T38 Fax Gateway for inbound calls to this number.",
            "readOnly": true
          },
          "phone_number_type": {
            "type": "string",
            "description": "The phone number's type.",
            "enum": [
              "longcode",
              "tollfree"
            ],
            "readOnly": true
          },
          "purchased_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating the time the request was made to purchase the number.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the time it took to activate after the purchase.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          }
        }
      },
      "PhoneNumberDetailed": {
        "type": "object",
        "example": {
          "id": "1293384261075731499",
          "record_type": "phone_number",
          "phone_number": "+19705555098",
          "status": "active",
          "tags": [
            "tag_1",
            "tag_2"
          ],
          "external_pin": "1234",
          "connection_id": "1293384261075731499",
          "connection_name": "connection-name",
          "customer_reference": "customer-reference",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "messaging_profile_name": "regional-customers",
          "billing_group_id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "call_forwarding_enabled": true,
          "cnam_listing_enabled": true,
          "caller_id_name_enabled": true,
          "call_recording_enabled": true,
          "t38_fax_gateway_enabled": true,
          "phone_number_type": "longcode",
          "purchased_at": "2019-10-23T18:10:00.000Z",
          "created_at": "2019-10-23T18:10:00.000Z",
          "updated_at": "2019-10-24T18:10:00.000Z"
        },
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IntId"
          },
          "record_type": {
            "type": "string",
            "example": "phone_number",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164-formatted phone number associated with this record.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The phone number's current status.",
            "enum": [
              "purchase-pending",
              "purchase-failed",
              "port-pending",
              "port-failed",
              "active",
              "deleted",
              "emergency-only",
              "ported-out",
              "port-out-pending"
            ],
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "description": "A list of user-assigned tags to help manage the phone number.",
            "items": {
              "type": "string"
            }
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "connection_name": {
            "type": "string",
            "description": "The user-assigned name of the connection to be associated with this phone number.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "messaging_profile_name": {
            "type": "string",
            "description": "The name of the messaging profile associated with the phone number.",
            "example": "regional-customers"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether emergency services are enabled for this number.",
            "readOnly": true
          },
          "emergency_status": {
            "type": "string",
            "description": "Represents the state of the number regarding emergency activation.",
            "default": "disabled",
            "enum": [
              "disabled",
              "active",
              "provisioning",
              "deprovisioning"
            ]
          },
          "emergency_address_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the emergency address associated with the phone number.",
            "readOnly": true
          },
          "call_forwarding_enabled": {
            "type": "boolean",
            "default": true,
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "readOnly": true
          },
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Indicates whether a CNAM listing is enabled for this number.",
            "readOnly": true
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Indicates whether caller ID is enabled for this number.",
            "readOnly": true
          },
          "call_recording_enabled": {
            "type": "boolean",
            "description": "Indicates whether call recording is enabled for this number.",
            "readOnly": true
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Indicates whether T38 Fax Gateway for inbound calls to this number.",
            "readOnly": true
          },
          "phone_number_type": {
            "type": "string",
            "description": "The phone number's type.",
            "enum": [
              "longcode",
              "tollfree"
            ],
            "readOnly": true
          },
          "purchased_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was purchased.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          }
        }
      },
      "PhoneNumberEnableEmergencyRequest": {
        "type": "object",
        "required": [
          "emergency_enabled",
          "emergency_address_id"
        ],
        "properties": {
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether to enable emergency services on this number."
          },
          "emergency_address_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the address to be used with emergency services."
          }
        },
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "53829456729313"
        }
      },
      "PhoneNumberRegulatoryGroup": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "phone_number_regulatory_requirement",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "example": "+19705555098"
          },
          "regulatory_group_id": {
            "type": "string",
            "format": "uuid",
            "example": "d70873cd-7c98-401a-81b6-b1ae08246995"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegulatoryRequirement"
            }
          }
        },
        "example": {
          "record_type": "phone_number_regulatory_requirement",
          "phone_number": "+19705555098",
          "regulatory_group_id": "d70873cd-7c98-401a-81b6-b1ae08246995",
          "regulatory_requirements": [
            {
              "record_type": "regulatory_requirement",
              "requirement_type": "end user proof of address",
              "label": "Proof of Address",
              "field_type": "address",
              "description": "Requirement for providing Proof of Address."
            }
          ]
        }
      },
      "PhoneNumberRegulatoryRequirement": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "phone_number_regulatory_requirement",
            "readOnly": true
          },
          "requirement_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique id for a requirement.",
            "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
          },
          "field_value": {
            "type": "string",
            "description": "The value of the requirement, this could be an id to a resource or a string value.",
            "example": "45f45a04-b4be-4592-95b1-9306b9db2b21"
          },
          "field_type": {
            "type": "string",
            "enum": [
              "string",
              "datetime",
              "address_id",
              "number_order_document_id"
            ],
            "example": "address_id",
            "readOnly": true
          }
        },
        "example": {
          "record_type": "phone_number_regulatory_requirement",
          "requirement_id": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576",
          "field_value": "45f45a04-b4be-4592-95b1-9306b9db2b21",
          "field_type": "address_id"
        }
      },
      "PhoneNumberWithMessagingSettings": {
        "type": "object",
        "example": {
          "record_type": "messaging_settings",
          "id": "1293384261075731499",
          "phone_number": "+18005550001",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "country_code": "US",
          "type": "toll-free",
          "health": {
            "message_count": 122,
            "inbound_outbound_ratio": 0.43,
            "success_ratio": 0.94,
            "spam_ratio": 0.06
          },
          "eligible_messaging_products": [
            "A2P"
          ],
          "traffic_type": "A2P",
          "messaging_product": "A2P",
          "features": {
            "sms": {
              "domestic_two_way": true,
              "international_inbound": true,
              "international_outbound": true
            },
            "mms": null
          }
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_settings",
            "enum": [
              "messaging_phone_number",
              "messaging_settings"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "+E.164 formatted phone number.",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier for a messaging profile."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "pattern": "^[A-Z]{2}$",
            "example": "US",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of the phone number",
            "enum": [
              "long-code",
              "toll-free",
              "short-code",
              "longcode",
              "tollfree",
              "shortcode"
            ],
            "readOnly": true
          },
          "health": {
            "$ref": "#/components/schemas/NumberHealthMetrics"
          },
          "eligible_messaging_products": {
            "type": "array",
            "description": "The messaging products that this number can be registered to use",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "traffic_type": {
            "type": "string",
            "description": "The messaging traffic or use case for which the number is currently configured.",
            "example": "P2P",
            "readOnly": true
          },
          "messaging_product": {
            "type": "string",
            "description": "The messaging product that the number is registered to use",
            "example": "P2P"
          },
          "features": {
            "type": "object",
            "readOnly": true,
            "properties": {
              "sms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              },
              "mms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              }
            }
          }
        }
      },
      "PhoneNumberWithVoiceSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1293384261075731499",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "voice_settings",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "example": "+13035551234",
            "description": "The phone number in +E164 format.",
            "readOnly": true
          },
          "connection_id": {
            "type": "string",
            "example": "1d0e6cb8-8668-462e-94c6-49ae0f0ed48b",
            "description": "Identifies the connection associated with this phone number."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "tech_prefix_enabled": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "Controls whether a tech prefix is enabled for this phone number."
          },
          "translated_number": {
            "type": "string",
            "example": "+13035559999",
            "default": "",
            "description": "This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed."
          },
          "call_forwarding": {
            "$ref": "#/components/schemas/CallForwarding"
          },
          "cnam_listing": {
            "$ref": "#/components/schemas/CnamListing"
          },
          "emergency": {
            "$ref": "#/components/schemas/EmergencySettings"
          },
          "usage_payment_method": {
            "type": "string",
            "enum": [
              "pay-per-minute",
              "channel"
            ],
            "default": "pay-per-minute",
            "example": "pay-per-minute",
            "description": "Controls whether a number is billed per minute or uses your concurrent channels."
          },
          "media_features": {
            "$ref": "#/components/schemas/MediaFeatures"
          },
          "call_recording": {
            "$ref": "#/components/schemas/CallRecording"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "voice_settings",
          "connection_id": "1d0e6cb8-8668-462e-94c6-49ae0f0ed48b",
          "customer_reference": "customer_reference",
          "tech_prefix_enabled": false,
          "translated_number": "+13035559999",
          "call_forwarding": {
            "call_forwarding_enabled": true,
            "forwards_to": "+13035559123",
            "forwarding_type": "always"
          },
          "cnam_listing": {
            "cnam_listing_enabled": true,
            "cnam_listing_details": "example"
          },
          "emergency": {
            "emergency_enabled": true,
            "emergency_address_id": "1315261609962112019"
          },
          "usage_payment_method": "pay-per-minute",
          "media_features": {
            "rtp_auto_adjust_enabled": true,
            "media_handling_mode": "default",
            "accept_any_rtp_packets_enabled": true,
            "t38_fax_gateway_enabled": true
          },
          "call_recording": {
            "inbound_call_recording_enabled": true,
            "inbound_call_recording_format": "wav",
            "inbound_call_recording_channels": "single"
          }
        }
      },
      "PhoneNumbersJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
            "description": "Identifies the resource.",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "phone_numbers_job",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed",
              "expired"
            ],
            "default": "pending",
            "example": "pending",
            "description": "Indicates the completion status of the background update.",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "update_emergency_settings",
              "delete_phone_numbers",
              "update_phone_numbers"
            ],
            "example": "update_emergency_settings",
            "description": "Identifies the type of the background job.",
            "readOnly": true
          },
          "etc": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the estimated time of completion of the background job.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
            "description": "Identifies the user which created the resource.",
            "readOnly": true
          },
          "successful_operations": {
            "type": "array",
            "items": {
              "description": "The phone numbers successfully updated.",
              "$ref": "#/components/schemas/PhoneNumbersJobSuccessfulOperation"
            },
            "readOnly": true
          },
          "pending_operations": {
            "type": "array",
            "items": {
              "description": "The phone numbers pending confirmation on update results. Entries in this list are transient, and will be moved to either successful_operations or failed_operations once the processing is done.",
              "$ref": "#/components/schemas/PhoneNumbersJobPendingOperation"
            },
            "readOnly": true
          },
          "failed_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobFailedOperation"
            },
            "readOnly": true
          }
        },
        "example": {
          "id": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "record_type": "phone_numbers_job",
          "status": "pending",
          "type": "update_emergency_settings",
          "etc": "2020-10-30T18:10:00.000Z",
          "created_at": "2020-10-23T18:10:00.000Z",
          "updated_at": "2020-10-23T18:10:01.000Z",
          "created_by": "015e81fc-11b7-4170-974d-5592ce987da7",
          "successful_operations": [
            {
              "id": "2637816387126861836",
              "phone_number": "+19705555098"
            },
            {
              "id": "33081887126861837",
              "phone_number": "+19715555099"
            }
          ],
          "pending_operations": [
            {
              "id": "2637816387126861835",
              "phone_number": "+19705555095"
            }
          ],
          "failed_operations": [
            {
              "id": "3388768018273",
              "phone_number": "+19705551234",
              "errors": [
                {
                  "code": "10015",
                  "title": "Bad Request",
                  "detail": "The field is invalid.",
                  "source": "/emergency_address_id"
                }
              ]
            }
          ]
        }
      },
      "PhoneNumbersJobDeletePhoneNumbersRequest": {
        "type": "object",
        "required": [
          "phone_numbers"
        ],
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The phone numbers or IDs to be updated."
            }
          }
        },
        "example": {
          "phone_numbers": [
            "+19705555098",
            "+19715555098",
            "32873127836"
          ]
        }
      },
      "PhoneNumbersJobFailedOperation": {
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "pattern": "^\\+1\\d{10}"
          },
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "The phone number's ID"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PhoneNumbersJobPendingOperation": {
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "pattern": "^\\+1\\d{10}"
          },
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "The phone number's ID"
          }
        }
      },
      "PhoneNumbersJobSuccessfulOperation": {
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "pattern": "^\\+1\\d{10}"
          },
          "id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "The phone number's ID"
          }
        }
      },
      "PhoneNumbersJobUpdateEmergencySettingsRequest": {
        "type": "object",
        "required": [
          "emergency_enabled",
          "emergency_address_id",
          "phone_numbers"
        ],
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The phone numbers or IDs to be updated."
            }
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether to enable emergency services on this number."
          },
          "emergency_address_id": {
            "type": "string",
            "pattern": "^\\d{10}",
            "description": "Identifies the address to be used with emergency services."
          }
        },
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "53829456729313",
          "phone_numbers": [
            "+19705555098",
            "+19715555098",
            "32873127836"
          ]
        }
      },
      "PhoneNumbersJobUpdatePhoneNumbersRequest": {
        "type": "object",
        "required": [
          "phone_numbers"
        ],
        "properties": {
          "phone_numbers": {
            "type": "array",
            "description": "Array of phone number ids and/or phone numbers in E164 format to update",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "A list of user-assigned tags to help organize phone numbers.",
            "items": {
              "type": "string"
            }
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          }
        },
        "example": {
          "phone_numbers": [
            "1583466971586889004",
            "+13127367254"
          ],
          "tags": [
            "tag"
          ],
          "external_pin": "123456",
          "customer_reference": "customer-reference",
          "connection_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "billing_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494"
        }
      },
      "PlayAudioUrlRequest": {
        "type": "object",
        "title": "Play Audio URL Request",
        "properties": {
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "loop": {
            "description": "The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.",
            "$ref": "#/components/schemas/Loopcount",
            "example": "infinity",
            "default": 1
          },
          "overlay": {
            "description": "When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "stop": {
            "description": "When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "example": "current",
            "default": "all"
          },
          "target_legs": {
            "description": "Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.",
            "type": "string",
            "default": "self",
            "example": "self"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "loop": "infinity",
          "overlay": true,
          "stop": "current",
          "target_legs": "self",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "PlaybackStopRequest": {
        "type": "object",
        "title": "Playback Stop Request",
        "properties": {
          "stop": {
            "description": "Use `current` to stop only the current audio or `all` to stop all audios in the queue.",
            "type": "string",
            "default": "all",
            "example": "current"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "stop": "all",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "Portability": {
        "type": "object",
        "properties": {
          "lrn": {
            "type": "string",
            "description": "Local Routing Number, if assigned to the requested phone number",
            "example": "2245701999"
          },
          "ported_status": {
            "type": "string",
            "description": "Indicates whether or not the requested phone number has been ported",
            "enum": [
              "Y",
              "N",
              ""
            ],
            "example": "Y"
          },
          "ported_date": {
            "type": "string",
            "description": "ISO-formatted date when the requested phone number has been ported",
            "example": "2017-10-20"
          },
          "ocn": {
            "type": "string",
            "description": "Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database",
            "example": "073H"
          },
          "line_type": {
            "type": "string",
            "description": "Type of number",
            "example": "voip"
          },
          "spid": {
            "type": "string",
            "description": "SPID (Service Provider ID)",
            "example": "073H"
          },
          "spid_carrier_name": {
            "type": "string",
            "description": "Service provider name",
            "example": "Telnyx/4"
          },
          "spid_carrier_type": {
            "type": "string",
            "description": "Service provider type",
            "example": "3"
          },
          "altspid": {
            "type": "string",
            "description": "Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another carrier",
            "example": "073H"
          },
          "altspid_carrier_name": {
            "type": "string",
            "description": "Alternative service provider name",
            "example": "Telnyx/4"
          },
          "altspid_carrier_type": {
            "type": "string",
            "description": "Alternative service provider type",
            "example": "3"
          },
          "city": {
            "type": "string",
            "description": "City name extracted from the locality in the Local Exchange Routing Guide (LERG) database",
            "example": "WAUKEGAN"
          },
          "state": {
            "type": "string",
            "example": "Illinois"
          }
        }
      },
      "PortabilityCheckDetails": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portability_check_result"
          },
          "fast_portable": {
            "type": "boolean",
            "description": "Indicates whether this phone number is FastPort eligible",
            "example": true,
            "readOnly": true
          },
          "not_portable_reason": {
            "type": "string",
            "description": "If this phone number is not portable, explains why. Empty string if the number is portable.",
            "example": "No coverage",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164 formatted phone number this result is about",
            "example": "+13125550123",
            "readOnly": true
          },
          "portable": {
            "type": "boolean",
            "description": "Indicates whether this phone number is portable",
            "example": true,
            "readOnly": true
          }
        }
      },
      "PortabilityStatus": {
        "type": "string",
        "description": "Specifies whether Telnyx is able to confirm portability this number in the United States & Canada. International phone numbers are provisional by default.",
        "enum": [
          "pending",
          "confirmed",
          "provisional"
        ],
        "example": "confirmed"
      },
      "PortingEndUser": {
        "type": "object",
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/PortingOrderEndUserAdmin"
          },
          "location": {
            "$ref": "#/components/schemas/PortingOrderEndUserLocation"
          }
        }
      },
      "PortingOrder": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Uniquely identifies this porting order",
            "type": "string",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2021-03-19T10:07:15.527Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2021-03-19T10:07:15.527Z",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/PortingOrderStatus"
          },
          "support_key": {
            "type": "string",
            "description": "A key to reference this porting order when contacting Telnyx customer support",
            "example": "123abc",
            "readOnly": true
          },
          "porting_phone_numbers_count": {
            "type": "integer",
            "description": "Count of phone numbers associated with this porting order",
            "example": 1,
            "readOnly": true
          },
          "old_service_provider_ocn": {
            "type": "string",
            "description": "Identifies the old service provider",
            "example": "Unreal Communications",
            "readOnly": true
          },
          "misc": {
            "$ref": "#/components/schemas/PortingOrderMisc"
          },
          "end_user": {
            "$ref": "#/components/schemas/PortingEndUser"
          },
          "activation_settings": {
            "$ref": "#/components/schemas/PortingOrderActivationSettings"
          },
          "phone_number_configuration": {
            "$ref": "#/components/schemas/PortingOrderPhoneNumberConfiguration"
          },
          "documents": {
            "$ref": "#/components/schemas/PortingOrderDocuments"
          },
          "user_feedback": {
            "$ref": "#/components/schemas/PortingOrderUserFeedback"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/porting_webhooks"
          },
          "user_reference": {
            "type": "string",
            "description": "A customer-specified reference number for customer bookkeeping purposes",
            "example": "Acct 123abc"
          },
          "record_type": {
            "type": "string",
            "example": "porting_order",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          }
        }
      },
      "PortingOrderActivationSettings": {
        "type": "object",
        "properties": {
          "foc_datetime_requested": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted Date/Time requested for the FOC date",
            "example": "2021-03-19T10:07:15.527Z"
          },
          "foc_datetime_actual": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted Date/Time of the FOC date",
            "example": "2021-03-19T10:07:15.527Z"
          },
          "fast_port_eligible": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates whether this porting order is eligible for FastPort",
            "example": true
          },
          "activation_status": {
            "$ref": "#/components/schemas/ActivationStatus"
          }
        }
      },
      "PortingOrderDocuments": {
        "type": "object",
        "properties": {
          "loa": {
            "type": "string",
            "description": "identifies the loa document",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "invoice": {
            "type": "string",
            "description": "identifies the invoice document",
            "example": "35146afd-df93-4963-b1e9-1a085e2ae874"
          }
        }
      },
      "PortingOrderEndUserAdmin": {
        "type": "object",
        "properties": {
          "entity_name": {
            "type": "string",
            "description": "Person Name or Company name requesting the port",
            "example": "Porter McPortersen"
          },
          "auth_person_name": {
            "type": "string",
            "description": "Name of person authorizing the porting order",
            "example": "Porter McPortersen II"
          },
          "billing_phone_number": {
            "type": "string",
            "description": "Billing phone number associated with these phone numbers",
            "example": 13035551234
          },
          "account_number": {
            "type": "string",
            "description": "The authorized person's account number with the current service provider",
            "example": "123abc"
          },
          "tax_identifier": {
            "type": "string",
            "description": "European tax identification number. Applicable only in the European Union",
            "example": "1234abcd"
          },
          "pin_passcode": {
            "type": "string",
            "description": "PIN/passcode possibly required by the old service provider for extra verification",
            "example": 1234
          },
          "business_identifier": {
            "type": "string",
            "description": "European business identification number. Applicable only in the European Union",
            "example": "abc123"
          }
        }
      },
      "PortingOrderEndUserLocation": {
        "type": "object",
        "properties": {
          "street_address": {
            "type": "string",
            "description": "First line of billing address",
            "example": "311 W. Superior St"
          },
          "extended_address": {
            "type": "string",
            "description": "Second line of billing address",
            "example": "Suite 504"
          },
          "locality": {
            "type": "string",
            "description": "City or municipality of billing address",
            "example": "Chicago"
          },
          "administrative_area": {
            "type": "string",
            "description": "State, province, or similar of billing address",
            "example": "IL"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal Code of billing address",
            "example": 60654
          },
          "country_code": {
            "type": "string",
            "description": "ISO3166-1 alpha-2 country code of billing address",
            "example": "US"
          }
        }
      },
      "PortingOrderMisc": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PortingOrderType"
          },
          "remaining_numbers_action": {
            "$ref": "#/components/schemas/RemainingNumbersAction"
          },
          "new_billing_phone_number": {
            "type": "string",
            "description": "New billing phone number for the remaining numbers. Used in case the current billing phone number is being ported to Telnyx. This will be set on your account with your current service provider and should be one of the numbers remaining on that account."
          }
        }
      },
      "PortingOrderPhoneNumberConfiguration": {
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "identifies the connection to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "identifies the messaging profile to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f901"
          },
          "emergency_address_id": {
            "type": "string",
            "description": "identifies the emergency address to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Tag to set on the numbers when ported"
            },
            "example": [
              "abc",
              "123"
            ]
          }
        }
      },
      "PortingOrderStatus": {
        "type": "object",
        "description": "Porting order status",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of 0 or more details about this porting order's status",
            "example": [
              "exception",
              "exception resolved"
            ]
          },
          "value": {
            "type": "string",
            "description": "The current status of the porting order",
            "example": "ported",
            "enum": [
              "draft",
              "in-process",
              "submitted",
              "exception",
              "foc-date-confirmed",
              "ported",
              "canceled",
              "cancel-pending"
            ]
          }
        }
      },
      "PortingOrderType": {
        "type": "string",
        "description": "A port can be either 'full' or 'partial'. When type is 'full' the other attributes should be omitted.",
        "enum": [
          "full",
          "partial"
        ],
        "example": "full"
      },
      "PortingOrderUserFeedback": {
        "type": "object",
        "properties": {
          "user_rating": {
            "type": "integer",
            "description": "Once an order is ported, cancellation is requested or the request is canceled, the user may rate their experience",
            "example": 5
          },
          "user_comment": {
            "type": "string",
            "description": "A comment related to the customer rating.",
            "example": "I loved my experience porting numbers with Telnyx"
          }
        }
      },
      "PortoutComment": {
        "required": [
          "id",
          "body",
          "user_id",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout"
          },
          "body": {
            "type": "string",
            "description": "Comment body",
            "example": "This is a comment"
          },
          "portout_id": {
            "type": "string",
            "description": "Identifies the associated port request",
            "default": null,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user who created the comment. Will be null if created by Telnyx Admin",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "created_at": {
            "type": "string",
            "description": "Comment creation timestamp in ISO 8601 format",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "record_type": "portout",
          "body": "This is a comment",
          "portout_id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "user_id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "created_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "PortoutDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout"
          },
          "phone_numbers": {
            "description": "Phone numbers associated with this portout",
            "type": "array",
            "items": {
              "type": "string",
              "description": "E164 formatted phone number"
            },
            "example": [
              "+35312345678"
            ]
          },
          "carrier_name": {
            "type": "string",
            "description": "Carrier the number will be ported out to",
            "example": "test"
          },
          "foc_date": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time of the FOC date",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "requested_foc_date": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time of the user requested FOC date",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "spid": {
            "type": "string",
            "description": "New service provider spid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "status": {
            "type": "string",
            "description": "Status of portout request",
            "enum": [
              "pending",
              "authorized",
              "ported",
              "rejected",
              "rejected-pending",
              "canceled"
            ],
            "example": "rejected"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the portout was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the portout was last updated",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "record_type": "portout",
          "phone_numbers": [
            "+35312345678"
          ],
          "carrier_name": "test",
          "foc_date": "2018-02-02T22:25:27.521Z",
          "requested_foc_date": "2018-02-02T22:25:27.521Z",
          "spid": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "status": "pending",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "PrivateWirelessGateway": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "network_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identification of the related network resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "private_wireless_gateway"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "name": {
            "description": "The private wireless gateway name.",
            "type": "string",
            "example": "My private wireless gateway"
          },
          "region_code": {
            "description": "The geographical region where the Private Wireless Gateway is deployed to.",
            "type": "string",
            "example": "ashburn-va",
            "default": "ashburn-va"
          },
          "status": {
            "$ref": "#/components/schemas/PrivateWirelessGatewayStatus"
          },
          "ip_range": {
            "type": "string",
            "description": "IP block used to assign IPs to the SIM cards in the Private Wireless Gateway.",
            "example": "100.64.1.0/24",
            "readOnly": true,
            "default": null
          }
        }
      },
      "PrivateWirelessGatewayRequest": {
        "type": "object",
        "properties": {
          "network_id": {
            "description": "The identification of the related network resource.",
            "type": "string",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
            "format": "uuid"
          },
          "name": {
            "description": "The private wireless gateway name.",
            "type": "string",
            "example": "My private wireless gateway"
          }
        },
        "example": {
          "network_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "name": "My private wireless gateway"
        }
      },
      "PrivateWirelessGatewayStatus": {
        "type": "object",
        "description": "The current status or failure details of the Private Wireless Gateway.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The current status or failure details of the Private Wireless Gateway. <ul>\n <li><code>provisioning</code> - the Private Wireless Gateway is being provisioned.</li>\n <li><code>provisioned</code> - the Private Wireless Gateway was provisioned and able to receive connections.</li>\n <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.</li>\n <li><code>decommissioning</code> - the Private Wireless Gateway is being removed from the network.</li>\n </ul>\n Transitioning between the provisioning and provisioned states may take some time.",
            "enum": [
              "provisioning",
              "provisioned",
              "failed",
              "decommissioning"
            ],
            "readOnly": true,
            "default": "provisioning",
            "example": "provisioned"
          },
          "error_description": {
            "type": "string",
            "description": "This attribute provides a human-readable explanation of why a failure happened.",
            "readOnly": true,
            "default": null,
            "example": null
          },
          "error_code": {
            "type": "string",
            "description": "This attribute is an <a href=\"https://developers.telnyx.com/docs/api/v2/overview#errors\">error code</a> related to the failure reason.",
            "readOnly": true,
            "default": null,
            "example": null
          }
        }
      },
      "Product": {
        "type": "string",
        "description": "Used product",
        "example": "LONG_CODE",
        "enum": [
          "LONG_CODE",
          "SHORT_CODE",
          "SHORT_CODE_FTEU",
          "TOLL_FREE",
          "ALPHANUMERIC_ID",
          "RCS"
        ]
      },
      "Queue": {
        "type": "object",
        "title": "Queue",
        "required": [
          "record_type",
          "id",
          "name",
          "current_size",
          "max_size",
          "average_wait_time_secs",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue"
            ],
            "example": "queue"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the queue",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the queue",
            "example": "support"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "current_size": {
            "type": "integer",
            "description": "The number of calls currently in the queue",
            "example": 20
          },
          "max_size": {
            "type": "integer",
            "description": "The maximum number of calls allowed in the queue",
            "example": 50
          },
          "average_wait_time_secs": {
            "type": "integer",
            "description": "The average time that the calls currently in the queue have spent waiting, given in seconds.",
            "example": 175
          }
        },
        "example": {
          "record_type": "queue",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "support",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "current_size": 20,
          "max_size": 50,
          "average_wait_time_secs": 175
        }
      },
      "QueueCall": {
        "type": "object",
        "title": "QueueCall",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type",
          "connection_id",
          "from",
          "to",
          "enqueued_at",
          "wait_time_secs",
          "queue_position",
          "queue_id"
        ],
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "record_type": "queue_call",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "from": "+18005550101",
          "to": "+18005550102",
          "enqueued_at": "2019-01-23T18:10:02.574Z",
          "wait_time_secs": 145,
          "queue_position": 3,
          "queue_id": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "queue_call"
            ],
            "example": "queue_call"
          },
          "call_session_id": {
            "description": "ID that is unique to the call session and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "type": "string",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call.",
            "type": "string",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
          },
          "connection_id": {
            "type": "string",
            "example": "7267xxxxxxxxxxxxxx",
            "description": "Telnyx connection ID used in the call."
          },
          "from": {
            "type": "string",
            "example": "+35319605860",
            "description": "Number or SIP URI placing the call."
          },
          "to": {
            "type": "string",
            "example": "+13129457420",
            "description": "Destination number or SIP URI of the call."
          },
          "enqueued_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the call was put in the queue",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "wait_time_secs": {
            "type": "integer",
            "description": "The time the call has been waiting in the queue, given in seconds",
            "example": 272
          },
          "queue_position": {
            "type": "integer",
            "description": "Current position of the call in the queue",
            "example": 3
          },
          "queue_id": {
            "type": "string",
            "description": "Unique identifier of the queue the call is in.",
            "example": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
          }
        }
      },
      "Recording": {
        "type": "object",
        "title": "Recording",
        "required": [
          "record_type",
          "id",
          "created_at",
          "updated_at",
          "recording_started_at",
          "recording_ended_at",
          "duration_millis",
          "status",
          "channels",
          "source",
          "download_urls"
        ],
        "properties": {
          "record_type": {
            "type": "string",
            "enum": [
              "recording"
            ],
            "example": "recording"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording started",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording ended",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "duration_millis": {
            "description": "The duration of the recording in milliseconds",
            "type": "integer",
            "format": "int32",
            "example": 60000
          },
          "status": {
            "type": "string",
            "enum": [
              "completed"
            ],
            "description": "The status of the recording. Only resources for `completed` recordings are currently supported",
            "example": "completed"
          },
          "channels": {
            "type": "string",
            "enum": [
              "single",
              "dual"
            ],
            "description": "When `dual`, final audio file has the first leg on channel A, and the rest on channel B.",
            "example": "single"
          },
          "source": {
            "type": "string",
            "enum": [
              "conference",
              "call"
            ],
            "description": "The kind of event that led to this recording being created",
            "example": "conference"
          },
          "conference_id": {
            "type": "string",
            "description": "If a conference recording, uniquely identifies the recorded conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call leg",
            "example": "11111111-5717-4562-b3fc-2c963f66afa6"
          },
          "call_session_id": {
            "type": "string",
            "description": "If a call recording, uniquely identifies the recorded call session",
            "example": "22222222-5717-4562-b3fc-2c963f66afa6"
          },
          "download_urls": {
            "type": "object",
            "description": "The links to download the recording files",
            "properties": {
              "mp3": {
                "type": "string",
                "description": "Link to download the recording in mp3 format"
              },
              "wav": {
                "type": "string",
                "description": "Link to download the recording in wav format"
              }
            }
          }
        },
        "example": {
          "record_type": "recording",
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "created_at": "2019-03-29T13:10:00Z",
          "updated_at": "2019-03-29T14:10:00Z",
          "recording_started_at": "2019-03-29T11:10:00Z",
          "recording_ended_at": "2019-03-29T12:10:00Z",
          "duration_millis": 50000,
          "status": "completed",
          "channels": "single",
          "source": "conference",
          "conference_id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
          "call_leg_id": "11111111-5717-4562-b3fc-2c963f66afa6",
          "call_session_id": "22222222-5717-4562-b3fc-2c963f66afa6",
          "download_urls": {
            "mp3": "https://s3.amazonaws.com/some/path"
          }
        }
      },
      "ReferRequest": {
        "type": "object",
        "title": "Refer request",
        "required": [
          "sip_address"
        ],
        "properties": {
          "sip_address": {
            "description": "The SIP URI to which the call will be referred to.",
            "type": "string",
            "example": "sip:username@sip.non-telnyx-address.com"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string"
          }
        },
        "example": {
          "sip_address": "sip:username@sip.non-telnyx-address.com"
        }
      },
      "RefreshRoomClientTokenRequest": {
        "type": "object",
        "properties": {
          "token_ttl_secs": {
            "description": "The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
            "type": "integer",
            "example": 600,
            "default": 600,
            "minimum": 10,
            "maximum": 3600
          },
          "refresh_token": {
            "type": "string",
            "format": "uuid",
            "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "RegionInformation": {
        "properties": {
          "region_type": {
            "type": "string",
            "example": "country_code",
            "enum": [
              "country_code",
              "rate_center",
              "state",
              "location"
            ]
          },
          "region_name": {
            "type": "string",
            "example": "US"
          }
        },
        "example": {
          "region_type": "country_code",
          "region_name": "US"
        }
      },
      "RegulatoryRequirement": {
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "regulatory_requirement",
            "readOnly": true
          },
          "requirement_type": {
            "type": "string",
            "enum": [
              "end user proof of address",
              "entity identification",
              "end user address"
            ]
          },
          "label": {
            "type": "string",
            "example": "Proof of Address"
          },
          "field_type": {
            "type": "string",
            "enum": [
              "file upload",
              "text field",
              "address",
              "datetime"
            ]
          },
          "description": {
            "type": "string",
            "example": "Requirement for providing Proof of Address."
          }
        },
        "example": {
          "record_type": "regulatory_requirement",
          "requirement_type": "end user proof of address",
          "label": "Proof of Address",
          "field_type": "address",
          "description": "Requirement for providing Proof of Address."
        }
      },
      "RegulatoryRequirementCriteria": {
        "properties": {
          "record_type": {
            "type": "string",
            "example": "phone_number_regulatory_requirement_criteria",
            "readOnly": true
          },
          "criteria_type": {
            "type": "string",
            "enum": [
              "country",
              "phone_number_type"
            ],
            "readOnly": true
          },
          "criteria_value": {
            "type": "string",
            "example": "AU",
            "readOnly": true
          }
        },
        "example": {
          "record_type": "phone_number_regulatory_requirement_criteria",
          "criteria_type": "country",
          "criteria_value": "AU"
        }
      },
      "RejectRequest": {
        "type": "object",
        "title": "Reject Request",
        "required": [
          "cause"
        ],
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "cause": {
            "description": "Cause for call rejection.",
            "type": "string",
            "enum": [
              "CALL_REJECTED",
              "USER_BUSY"
            ],
            "example": "USER_BUSY"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "cause": "USER_BUSY"
        }
      },
      "RemainingNumbersAction": {
        "type": "string",
        "description": "Remaining numbers can be either kept with their current service provider or disconnected. 'new_billing_telephone_number' is required when 'remaining_numbers_action' is 'keep'.",
        "enum": [
          "keep",
          "disconnect"
        ],
        "example": "disconnect"
      },
      "ReplacedLinkClick": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "link_clicked",
            "description": "Identifies the type of the resource."
          },
          "url": {
            "type": "string",
            "example": "link_clicked",
            "description": "The original link that was sent in the message."
          },
          "to": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code)."
          },
          "message_id": {
            "type": "string",
            "format": "uuid",
            "description": "The message ID associated with the clicked link."
          },
          "time_clicked": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the message request was received."
          }
        },
        "example": {
          "record_type": "link_clicked",
          "url": "https://telnyx.com",
          "to": "18445550001",
          "message_id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "time_clicked": "2019-04-01T14:45:45.450Z"
        }
      },
      "ReplacedLinkClickEvent": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReplacedLinkClick"
          }
        }
      },
      "ReservedPhoneNumber": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "reserved_phone_number",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+1\\d{10}",
            "example": "+19705555098"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the phone number's reservation.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the individual number reservation was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the the individual number reservation was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "expired_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the individual number reservation is going to expire",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "errors": {
            "type": "string",
            "description": "Errors the reservation could happen upon",
            "example": "Number is already on hold",
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "reserved_phone_number",
          "phone_number": "+19705555098",
          "status": "pending",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "expired_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "ResumeRecordingRequest": {
        "type": "object",
        "title": "Pause Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "RetrieveVerificationResponse": {
        "title": "RetrieveVerificationResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Verification"
          }
        }
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifies the room.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "max_participants": {
            "description": "Maximum participants allowed in the room.",
            "type": "integer",
            "example": 50
          },
          "unique_name": {
            "description": "The unique (within the Telnyx account scope) name of the room.",
            "type": "string",
            "example": "My room"
          },
          "created_at": {
            "description": "ISO 8601 timestamp when the room was created.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "description": "ISO 8601 timestamp when the room was updated.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "active_session_id": {
            "description": "The identifier of the active room session if any.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomSession"
            }
          },
          "record_type": {
            "type": "string",
            "example": "room",
            "readOnly": true
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "max_participants": 50,
          "unique_name": "My Room",
          "created_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "active_session_id": "7b61621f-62e0-4aad-ab11-9fd19e272e74",
          "sessions": [
            {
              "id": "7b61621f-62e0-4aad-ab11-9fd19e272e74",
              "room_id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
              "active": true,
              "created_at": "2021-04-16T09:46:20.954863Z",
              "updated_at": "2021-04-16T10:24:55.962200Z",
              "participants": [],
              "record_type": "room_session"
            }
          ],
          "record_type": "room"
        }
      },
      "RoomParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifies the room participant.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "session_id": {
            "description": "Identify the room session that participant is part of.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "context": {
            "description": "Context provided to the given participant through the client SDK",
            "type": "string",
            "example": "Alice"
          },
          "joined_at": {
            "description": "ISO 8601 timestamp when the participant joined the session.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "description": "ISO 8601 timestamp when the participant was updated.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "left_at": {
            "description": "ISO 8601 timestamp when the participant left the session.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "record_type": {
            "type": "string",
            "example": "room_participant",
            "readOnly": true
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "session_id": "7b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "context": "Alice",
          "joined_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "left_at": "2021-04-16T10:24:55.962200Z",
          "record_type": "room_participant"
        }
      },
      "RoomSession": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifies the room session.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "room_id": {
            "description": "Identify the room hosting that room session.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "active": {
            "description": "Shows if the room session is active or not.",
            "type": "boolean",
            "example": false
          },
          "created_at": {
            "description": "ISO 8601 timestamp when the room session was created.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "description": "ISO 8601 timestamp when the room session was updated.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "ended_at": {
            "description": "ISO 8601 timestamp when the room session has ended.",
            "type": "string",
            "format": "date-time",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomParticipant"
            }
          },
          "record_type": {
            "type": "string",
            "example": "room_session",
            "readOnly": true
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "room_id": "7b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "active": false,
          "created_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "ended_at": "2021-04-16T10:24:55.962200Z",
          "participants": [],
          "record_type": "room_session"
        }
      },
      "SIMCard": {
        "type": "object",
        "title": "SIMCard",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "example": "sim_card",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "registering",
              "enabling",
              "enabled",
              "disabling",
              "disabled",
              "data_limit_exceeded"
            ],
            "description": "The current status of the SIM card. It will be one of the following: <br/>\n<ul>\n <li><code>registering</code> - the card is being registered</li>\n <li><code>enabling</code> - the card is being enabled</li>\n <li><code>enabled</code> - the card is enabled and ready for use</li>\n <li><code>disabling</code> - the card is being disabled</li>\n <li><code>disabled</code> - the card has been disabled and cannot be used</li>\n <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>\n</ul>\nTransitioning between the enabled and disabled states may take a period of time.\n",
            "readOnly": true,
            "example": "enabled"
          },
          "iccid": {
            "type": "string",
            "description": "The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
            "readOnly": true,
            "example": "89310410106543789301"
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "msisdn": {
            "type": "string",
            "description": "Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
            "readOnly": true,
            "example": "+13109976224"
          },
          "sim_card_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "description": "Searchable tags associated with the SIM card",
            "items": {
              "type": "string"
            },
            "example": [
              "personal",
              "customers",
              "active-customers"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "ipv4": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "192.168.0.0"
          },
          "ipv6": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "2001:cdba:0000:0000:0000:0000:3257:9652"
          }
        }
      },
      "SIMCardGroup": {
        "title": "SIMCardGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_group"
          },
          "default": {
            "description": "Indicates whether the SIM card group is the users default group.<br/>The default group is created for the user and can not be removed.",
            "type": "boolean",
            "example": true,
            "readOnly": true
          },
          "name": {
            "description": "A user friendly name for the SIM card group.",
            "type": "string",
            "example": "My Test Group"
          },
          "data_limit": {
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use.",
            "type": "integer",
            "example": 2048
          },
          "consumed_data": {
            "$ref": "#/components/schemas/ConsumedData"
          },
          "private_wireless_gateway_id": {
            "description": "The identification of the related Private Wireless Gateway resource.",
            "format": "uuid",
            "type": "string",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
            "default": null
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardGroupAction": {
        "type": "object",
        "title": "SIMCardGroupAction",
        "description": "This object represents a SIM card group action request. It allows tracking the current status of an operation that impacts the SIM card group and SIM card in it.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "example": "sim_card_group_action",
            "readOnly": true
          },
          "sim_card_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The SIM card group identification.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "type": "string",
            "description": "Represents the type of the operation requested.",
            "enum": [
              "set_private_wireless_gateway",
              "remove_private_wireless_gateway"
            ],
            "example": "set_private_wireless_gateway"
          },
          "status": {
            "type": "string",
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "example": "in-progress"
          },
          "settings": {
            "type": "object",
            "description": "A JSON object representation of the action params.",
            "properties": {
              "private_wireless_gateway_id": {
                "description": "The identification of the related Private Wireless Gateway resource.",
                "format": "uuid",
                "type": "string",
                "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardGroupCreate": {
        "title": "SIMCardGroupCreate",
        "type": "object",
        "properties": {
          "name": {
            "description": "A user friendly name for the SIM card group.",
            "type": "string",
            "example": "My Test Group"
          },
          "data_limit": {
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use.",
            "type": "integer",
            "example": 2048
          }
        },
        "required": [
          "name"
        ]
      },
      "SIMCardGroupPatch": {
        "title": "SIMCardGroupPatch",
        "type": "object",
        "properties": {
          "name": {
            "description": "A user friendly name for the SIM card group.",
            "type": "string",
            "example": "My Test Group"
          },
          "data_limit": {
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use.",
            "type": "integer",
            "example": 2048
          }
        }
      },
      "SIMCardNetworkPreference": {
        "type": "object",
        "title": "SIMCardNetworkPreference",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "sim_card_network_preferences",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "example": "6b14e151-8493-4fa1-8664-1cc4e6d14158"
          },
          "mobile_operator_networks_preferences": {
            "$ref": "#/components/schemas/MobileOperatorNetworksPreferencesResponse"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardNetworkPreferenceWithOTAUpdates": {
        "type": "object",
        "title": "SIMCardNetworkPreferenceWithOTAUpdates",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "sim_card_network_preferences",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "example": "6b14e151-8493-4fa1-8664-1cc4e6d14158"
          },
          "mobile_operator_networks_preferences": {
            "$ref": "#/components/schemas/MobileOperatorNetworksPreferencesResponse"
          },
          "ota_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompleteOTAUpdate"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardOrder": {
        "title": "SIMCardOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_order"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "description": "The amount of SIM cards requested in the SIM card order.",
            "example": 21
          },
          "cost": {
            "type": "object",
            "description": "An object representing the total cost of the order.",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "Filter by ISO 4217 currency string.",
                "example": "USD"
              }
            },
            "example": {
              "amount": "2.52",
              "currency": "USD"
            }
          },
          "order_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the address for the order.",
                "pattern": "^\\d{10}",
                "example": "1293384261075731499"
              },
              "street_address": {
                "type": "string",
                "description": "The name of the street where the address is located.",
                "example": "311 W Superior St"
              },
              "extended_address": {
                "type": "string",
                "description": "Supplemental field for address information.",
                "example": "Suite 504"
              },
              "locality": {
                "type": "string",
                "description": "The name of the city where the address is located.",
                "example": "Chicago"
              },
              "administrative_area": {
                "type": "string",
                "description": "State or province where the address is located.",
                "example": "IL"
              },
              "country_code": {
                "type": "string",
                "description": "The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
                "example": "US"
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code for the address.",
                "example": "60654"
              }
            },
            "description": "An object representing the address information from when the order was submitted.",
            "readOnly": true,
            "example": {
              "id": "1293384261075731499",
              "street_address": "311 W Superior St",
              "extended_address": "Suite 504",
              "locality": "Chicago",
              "administrative_area": "IL",
              "country_code": "US",
              "postal_code": "60654"
            }
          },
          "tracking_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL used to get tracking information about the order.",
            "example": "http://www.example.com/"
          },
          "status": {
            "type": "string",
            "description": "The current status of the SIM Card order.<ul> <li><code>pending</code> - the order is waiting to be processed.</li> <li><code>processing</code> - the order is currently being processed.</li> <li><code>ready_to_ship</code> - the order is ready to be shipped to the specified <b>address</b>.</li> <li><code>shipped</code> - the order was shipped and is on its way to be delivered to the specified <b>address</b>.</li> <li><code>delivered</code> - the order was delivered to the specified <b>address</b>.</li> </ul>",
            "enum": [
              "pending",
              "processing",
              "ready_to_ship",
              "shipped",
              "delivered"
            ],
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardOrderPreview": {
        "title": "SIMCardOrderPreview",
        "type": "object",
        "properties": {
          "total_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "ISO 4217 currency string.",
                "example": "USD"
              }
            }
          },
          "shipping_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "ISO 4217 currency string.",
                "example": "USD"
              }
            }
          },
          "sim_cards_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "enum": [
                  "USD"
                ],
                "description": "ISO 4217 currency string.",
                "example": "USD"
              }
            }
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "sim_card_order_preview",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "description": "The amount of SIM cards requested in the SIM card order.",
            "example": 21
          }
        }
      },
      "SIMCardPublicIP": {
        "type": "object",
        "title": "SIMCardPublicIP",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "sim_card_public_ip",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "example": "6b14e151-8493-4fa1-8664-1cc4e6d14158"
          },
          "type": {
            "type": "string",
            "enum": [
              "ipv4"
            ],
            "default": "ipv4",
            "example": "ipv4",
            "readOnly": true
          },
          "ip": {
            "type": "string",
            "description": "The provisioned IP address. This attribute will only be available when underlying resource status is in a \"provisioned\" status.",
            "example": "192.168.0.0",
            "readOnly": true,
            "default": null
          },
          "status": {
            "$ref": "#/components/schemas/SIMCardPublicIPStatus"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardPublicIPStatus": {
        "type": "object",
        "description": "The current status or failure details of the SIM card's public IP.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The current status or failure details of the SIM card's public IP. <ul>\n <li><code>provisioning</code> - the IP is being provisioned.</li>\n <li><code>provisioned</code> - the IP was provisioned and the SIM is reachable on the public internet.</li>\n <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.</li>\n <li><code>decommissioning</code> - the public IP is being removed from the SIM card.</li>\n </ul>\n Transitioning between the provisioning and provisioned states may take some time.",
            "enum": [
              "provisioning",
              "provisioned",
              "failed",
              "decommissioning"
            ],
            "readOnly": true,
            "default": "provisioning",
            "example": "provisioned"
          },
          "error_description": {
            "type": "string",
            "description": "This attribute provides a human-readable explanation of why a failure happened.",
            "readOnly": true,
            "default": null,
            "example": null
          },
          "error_code": {
            "type": "string",
            "description": "This attribute is an <a href=\"https://developers.telnyx.com/docs/api/v2/overview#errors\">error code</a> related to the failure reason.",
            "readOnly": true,
            "default": null,
            "example": null
          }
        }
      },
      "SIMCardRegistration": {
        "title": "SIMCardRegistration",
        "type": "object",
        "properties": {
          "sim_card_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "description": "Searchable tags associated with the SIM card",
            "items": {
              "type": "string"
            },
            "example": [
              "personal",
              "customers",
              "active-customers"
            ]
          },
          "registration_codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "0000000001",
              "0000000002",
              "0000000003"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status on which the SIM card will be set after being successful registered.",
            "enum": [
              "enabled",
              "disabled",
              "standby"
            ],
            "example": "standby",
            "default": "enabled"
          }
        },
        "required": [
          "registration_codes"
        ]
      },
      "SIMCardRegistrationCodeValidation": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "sim_card_registration_code_validation"
          },
          "registration_code": {
            "type": "string",
            "description": "The 10-digit SIM card registration code",
            "example": "0123456789"
          },
          "valid": {
            "type": "boolean",
            "description": "The attribute that denotes whether the code is valid or not",
            "example": false
          },
          "invalid_detail": {
            "type": "string",
            "nullable": true,
            "description": "The validation message",
            "example": "This code has already been used."
          }
        }
      },
      "SIMCardRegistrationCodeValidations": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SIMCardRegistrationCodeValidation"
            }
          }
        }
      },
      "SendDTMFRequest": {
        "type": "object",
        "title": "Send DTMF Request",
        "required": [
          "digits"
        ],
        "properties": {
          "digits": {
            "description": "DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W (1s).",
            "type": "string",
            "example": "1www2WABCDw9"
          },
          "duration_millis": {
            "description": "Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100 to 500ms",
            "type": "integer",
            "format": "int32",
            "example": 500,
            "default": 250
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "digits": "1www2WABCDw9",
          "duration_millis": 500,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "SendFaxMultipartRequest": {
        "type": "object",
        "title": "Send fax multipart request",
        "required": [
          "connection_id",
          "contents",
          "from",
          "to"
        ],
        "properties": {
          "connection_id": {
            "description": "The connection ID to send the fax with.",
            "type": "string",
            "example": "234423"
          },
          "contents": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "type": "string",
            "format": "binary"
          },
          "to": {
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI.",
            "type": "string",
            "example": "+13127367276"
          },
          "from": {
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "type": "string",
            "example": "+13125790015"
          },
          "quality": {
            "description": "The quality of the fax. Can be normal, high, very_high.",
            "type": "string",
            "example": "high",
            "default": "high"
          },
          "store_media": {
            "description": "Should fax media be stored on temporary URL.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "SendFaxRequest": {
        "type": "object",
        "title": "Send fax request",
        "required": [
          "connection_id",
          "from",
          "to"
        ],
        "properties": {
          "connection_id": {
            "description": "The connection ID to send the fax with.",
            "type": "string",
            "example": "234423"
          },
          "media_url": {
            "description": "The URL to the PDF used for the fax's media. media_url and media_name can't be submitted together.",
            "type": "string",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          },
          "media_name": {
            "description": "The media_name of a file to be used for the fax's media. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_url and media_name can't be submitted together.",
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "to": {
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI.",
            "type": "string",
            "example": "+13127367276"
          },
          "from": {
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "type": "string",
            "example": "+13125790015"
          },
          "quality": {
            "description": "The quality of the fax. Can be normal, high, very_high.",
            "type": "string",
            "example": "high",
            "default": "high"
          },
          "store_media": {
            "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "ServicePlan": {
        "type": "string",
        "description": "Indicates the coverage of the termination regions. International and Global are the same but International may only be used for high volume/short duration Outbound Voice Profiles.",
        "enum": [
          "us",
          "international",
          "global"
        ],
        "example": "global",
        "default": "global"
      },
      "ShortCode": {
        "type": "object",
        "required": [
          "messaging_profile_id"
        ],
        "example": {
          "record_type": "short_code",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "short_code": "12345",
          "country_code": "US",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z"
        },
        "properties": {
          "record_type": {
            "type": "string",
            "example": "short_code",
            "enum": [
              "short_code"
            ],
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "short_code": {
            "type": "string",
            "description": "Short digit sequence used to address messages.",
            "readOnly": true
          },
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "pattern": "^[A-Z]{2}$",
            "example": "US",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier for a messaging profile."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          }
        }
      },
      "SimCardOrderCreate": {
        "title": "SimCardOrderCreate",
        "type": "object",
        "properties": {
          "address_id": {
            "type": "string",
            "description": "Uniquely identifies the address for the order.",
            "pattern": "^\\d{10}",
            "example": "1293384261075731499"
          },
          "quantity": {
            "description": "The amount of SIM cards to order.",
            "type": "integer",
            "minimum": 1,
            "example": 23
          }
        },
        "required": [
          "address_id",
          "quantity"
        ]
      },
      "SimpleSIMCard": {
        "type": "object",
        "title": "SIMCard",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "example": "sim_card",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "registering",
              "enabling",
              "enabled",
              "disabling",
              "disabled",
              "data_limit_exceeded"
            ],
            "description": "The current status of the SIM card. It will be one of the following: <br/>\n<ul>\n <li><code>registering</code> - the card is being registered</li>\n <li><code>enabling</code> - the card is being enabled</li>\n <li><code>enabled</code> - the card is enabled and ready for use</li>\n <li><code>disabling</code> - the card is being disabled</li>\n <li><code>disabled</code> - the card has been disabled and cannot be used</li>\n <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>\n</ul>\nTransitioning between the enabled and disabled states may take a period of time.\n",
            "readOnly": true,
            "example": "enabled"
          },
          "iccid": {
            "type": "string",
            "description": "The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
            "readOnly": true,
            "example": "89310410106543789301"
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "msisdn": {
            "type": "string",
            "description": "Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
            "readOnly": true,
            "example": "+13109976224"
          },
          "sim_card_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "description": "Searchable tags associated with the SIM card",
            "items": {
              "type": "string"
            },
            "example": [
              "personal",
              "customers",
              "active-customers"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SimplifiedOTAUpdate": {
        "type": "object",
        "title": "OTAUpdate",
        "description": "This object represents an Over the Air (OTA) update request. It allows tracking the current status of a operation that apply settings in a particular SIM card. <br/><br/>",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "example": "ota_update",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identification UUID of the related SIM card resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "type": "string",
            "description": "Represents the type of the operation requested. This will relate directly to the source of the request.",
            "enum": [
              "sim_card_network_preferences"
            ],
            "example": "sim_card_network_preferences"
          },
          "status": {
            "type": "string",
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "example": "in-progress"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SpeakRequest": {
        "type": "object",
        "title": "Speak Request",
        "required": [
          "payload",
          "voice",
          "language"
        ],
        "properties": {
          "payload": {
            "description": "The text or SSML to be converted into speech. There is a 5,000 character limit.",
            "type": "string",
            "example": "Say this on the call"
          },
          "payload_type": {
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "ssml"
            ],
            "example": "ssml"
          },
          "service_level": {
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "type": "string",
            "enum": [
              "basic",
              "premium"
            ],
            "example": "premium"
          },
          "stop": {
            "description": "When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "type": "string",
            "default": null,
            "example": "current"
          },
          "voice": {
            "description": "The gender of the voice used to speak back the text.",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "female"
          },
          "language": {
            "description": "The language you want spoken.",
            "type": "string",
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "example": "en-US"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "Say this on the call",
          "payload_type": "text",
          "service_level": "basic",
          "stop": "current",
          "voice": "female",
          "language": "arb",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartForkingRequest": {
        "type": "object",
        "title": "Start Forking Request",
        "properties": {
          "target": {
            "description": "The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded. Both incoming and outgoing media packets will be delivered to the specified target, and information about the stream will be included in the encapsulation protocol header, including the direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.",
            "type": "string",
            "example": "udp:192.0.2.1:9000"
          },
          "rx": {
            "description": "The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be forwarded.",
            "type": "string",
            "example": "192.0.2.1:9000"
          },
          "stream_type": {
            "description": "Optionally specify a media type to stream. If `decrpyted` selected, Telnyx will decrypt incoming SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.",
            "type": "string",
            "enum": [
              "raw",
              "decrypted"
            ],
            "default": "raw",
            "example": "decrypted"
          },
          "tx": {
            "description": "The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be forwarded.",
            "type": "string",
            "example": "192.0.2.1:9001"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "target": "udp:192.0.2.1:9000",
          "rx": "192.0.2.1:9000",
          "tx": "192.0.2.1:9001",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartRecordingRequest": {
        "type": "object",
        "title": "Start Recording Request",
        "required": [
          "format",
          "channels"
        ],
        "properties": {
          "format": {
            "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
            "type": "string",
            "enum": [
              "wav",
              "mp3"
            ],
            "example": "mp3"
          },
          "channels": {
            "description": "When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "example": "single"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "type": "boolean",
            "example": true
          },
          "max_length": {
            "description": "Defines the maximum length for the recording in seconds. Minimum value is 0. Maximum value is 14400. Default is 0 (infinite)",
            "type": "integer",
            "example": 100,
            "default": 0,
            "format": "int32"
          }
        },
        "example": {
          "format": "wav",
          "channels": "single",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true,
          "max_length": 0
        }
      },
      "StopForkingRequest": {
        "type": "object",
        "title": "Stop Forking Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopGatherRequest": {
        "type": "object",
        "title": "Stop Gather Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopRecordingRequest": {
        "type": "object",
        "title": "Stop Recording Request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TelephonyCredential": {
        "type": "object",
        "title": "On-demand Credential",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "example": "c215ade3-0d39-418e-94be-c5f780760199"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "credential"
          },
          "name": {
            "type": "string"
          },
          "resource_id": {
            "type": "string",
            "description": "Identifies the resource this credential is associated with.",
            "example": "connection:1234567890"
          },
          "expired": {
            "type": "boolean",
            "description": "Defaults to false"
          },
          "sip_username": {
            "type": "string",
            "description": "The randomly generated SIP username for the credential.",
            "example": "gencrednCvHU5IYpSBPPsXI2iQsDX"
          },
          "sip_password": {
            "type": "string",
            "description": "The randomly generated SIP password for the credential.",
            "example": "a92dbcfb60184a8cb330b0acb2f7617b"
          },
          "created_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "c215ade3-0d39-418e-94be-c5f780760199",
          "record_type": "credential",
          "name": "2020-06-18 21:32:38.917732Z",
          "expired": "false",
          "user_id": "user-id",
          "resource_id": "connection:804252963366242252",
          "sip_password": "a92dbcfb60184a8cb330b0acb2f7617b",
          "sip_username": "gencrednCvHU5IYpSBPPsXI2iQsDX",
          "created_at": "2020-06-18T21:32:38",
          "expires_at": "2042-06-18T21:32:38",
          "updated_at": "2020-06-18T21:32:38.000Z"
        }
      },
      "TelephonyCredentialCreateRequest": {
        "type": "object",
        "title": "TelephonyCredentialCreateRequest",
        "required": [
          "connection_id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "description": "Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.",
            "example": "some_tag"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the Credential Connection this credential is associated with.",
            "example": "1234567890"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the credential will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "name": "My-new-credential",
          "connection_id": "1234567890"
        }
      },
      "TelephonyCredentialUpdateRequest": {
        "type": "object",
        "title": "TelephonyCredentialUpdateRequest",
        "properties": {
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "description": "Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.",
            "example": "some_tag"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the Credential Connection this credential is associated with.",
            "example": "987654321"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the credential will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "name": "My-new-updated-credential",
          "connection_id": "987654321"
        }
      },
      "Template": {
        "title": "Template",
        "required": [
          "namespace",
          "name",
          "language"
        ],
        "type": "object",
        "properties": {
          "namespace": {
            "description": "Namespace of the template. This must be the namespace associated with the WhatsApp business account that owns the phone number associated with the current WhatsApp Business API client or the message fails to send.",
            "type": "string"
          },
          "name": {
            "description": "Name of the template.",
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "components": {
            "$ref": "#/components/schemas/TemplateComponents"
          }
        }
      },
      "TemplateComponents": {
        "title": "Template Components",
        "type": "array",
        "items": {
          "title": "Template Components",
          "required": [
            "type"
          ],
          "description": "",
          "type": "object",
          "properties": {
            "type": {
              "description": "Describes the component type.",
              "enum": [
                "header",
                "body",
                "footer"
              ],
              "type": "string"
            },
            "parameters": {
              "$ref": "#/components/schemas/TemplateParameters"
            }
          }
        }
      },
      "TemplateParameters": {
        "title": "Template Component Parameters",
        "type": "array",
        "items": {
          "title": "Template Parameters",
          "required": [
            "type"
          ],
          "description": "Array containing the content of the message.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Describes the parameter type.",
              "enum": [
                "text",
                "currency",
                "date_time",
                "image",
                "document",
                "video"
              ],
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "currency": {
              "$ref": "#/components/schemas/Currency"
            },
            "date_time": {
              "$ref": "#/components/schemas/DateTimeObject"
            },
            "image": {
              "$ref": "#/components/schemas/Image"
            },
            "document": {
              "$ref": "#/components/schemas/Document"
            },
            "video": {
              "$ref": "#/components/schemas/Video"
            }
          }
        }
      },
      "TexmlApplication": {
        "type": "object",
        "title": "Texml Application",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IntId"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "texml_application"
          },
          "friendly_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "$ref": "#/components/schemas/FirstCommandTimeout"
          },
          "first_command_timeout_secs": {
            "$ref": "#/components/schemas/FirstCommandTimeoutSecs"
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "uri",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "default": null,
            "format": "uri",
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "default": null,
            "format": "uri",
            "example": "https://example.com"
          },
          "status_callback_method": {
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          },
          "created_at": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updated_at": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "texml_application",
          "active": false,
          "friendly_name": "call-router",
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "created_at": "2020-02-02T22:25:27.521Z",
          "updated_at": "2020-02-03T22:25:27.521Z"
        }
      },
      "Text": {
        "title": "Text",
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          }
        },
        "example": {
          "body": "<Message Text>"
        }
      },
      "ToNumber": {
        "type": "string",
        "pattern": "^\\+1\\d{10}",
        "description": "Receiving address (+E.164 formatted phone number or short code).",
        "example": "+E.164"
      },
      "TrafficType": {
        "type": "string",
        "description": "Specifies the type of traffic allowed in this profile.",
        "enum": [
          "conversational",
          "short_duration"
        ],
        "example": "conversational",
        "default": "conversational"
      },
      "Transcription": {
        "type": "object",
        "title": "Transcription",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "event",
            "enum": [
              "event"
            ],
            "description": "Identifies the type of the resource."
          },
          "event_type": {
            "type": "string",
            "example": "call.transcription",
            "enum": [
              "call.transcription"
            ],
            "description": "The type of event being delivered."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
            "description": "Identifies the type of resource."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.521992Z",
            "description": "ISO 8601 datetime of when the event occurred."
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "description": "Unique identifier and token for controlling the call.",
                "type": "string",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
              },
              "call_leg_id": {
                "type": "string",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
                "description": "ID that is unique to the call and can be used to correlate webhook events."
              },
              "call_session_id": {
                "type": "string",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "description": "ID that is unique to the call session and can be used to correlate webhook events."
              },
              "client_state": {
                "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
                "type": "string",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "example": "7267xxxxxxxxxxxxxx",
                "description": "Telnyx connection ID used in the call."
              },
              "transcription_data": {
                "type": "object",
                "properties": {
                  "confidence": {
                    "type": "number",
                    "format": "double",
                    "example": 0.977219,
                    "description": "Speech recognition confidence level."
                  },
                  "transcript": {
                    "type": "string",
                    "example": "hello this is a test speech",
                    "description": "Recognized text."
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.transcription",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.521992Z",
          "payload": {
            "call_control_id": "v2:7subYr8fLrXmaAXm8egeAMpoSJ72J3SGPUuome81-hQuaKRf9b7hKA",
            "call_leg_id": "5ca81340-5beb-11eb-ae45-02420a0f8b69",
            "call_session_id": "5ca81eee-5beb-11eb-ba6c-02420a0f8b69",
            "client_state": null,
            "connection_id": "1240401930086254526",
            "transcription_data": {
              "confidence": 0.977219,
              "transcript": "hello this is a test speech"
            }
          }
        }
      },
      "TranscriptionEvent": {
        "type": "object",
        "title": "Transcription Event",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Transcription"
          }
        }
      },
      "TranscriptionStartRequest": {
        "type": "object",
        "title": "Transcription start request",
        "properties": {
          "language": {
            "description": "Language to use for speech recognition",
            "type": "string",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "pl"
            ],
            "default": "en",
            "example": "en"
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "language": "en",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TranscriptionStopRequest": {
        "type": "object",
        "title": "Transcription stop request",
        "properties": {
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TransferCallRequest": {
        "type": "object",
        "title": "Transfer Call Request",
        "required": [
          "to"
        ],
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "sip_auth_username": "username",
          "sip_auth_password": "password"
        },
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out and bridge to the given call.",
            "type": "string",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "from": {
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.",
            "type": "string",
            "example": "+18005550101"
          },
          "from_display_name": {
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "type": "string",
            "example": "Company Name"
          },
          "audio_url": {
            "type": "string",
            "example": "http://example.com/message.wav",
            "description": "The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request."
          },
          "media_name": {
            "type": "string",
            "example": "my_media_uploaded_to_media_storage_api",
            "description": "The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file."
          },
          "timeout_secs": {
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.",
            "default": 30,
            "type": "integer",
            "example": 60,
            "format": "int32"
          },
          "time_limit_secs": {
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "default": 14400,
            "type": "integer",
            "example": 600,
            "format": "int32"
          },
          "answering_machine_detection": {
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled",
            "type": "string",
            "enum": [
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ]
          },
          "answering_machine_detection_config": {
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance.",
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "description": "Maximum timeout threshold for overall detection.",
                "default": 3500,
                "type": "integer",
                "example": 5000,
                "format": "int32"
              },
              "after_greeting_silence_millis": {
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "default": 800,
                "type": "integer",
                "example": 1000,
                "format": "int32"
              },
              "between_words_silence_millis": {
                "description": "Maximum threshold for silence between words.",
                "default": 50,
                "type": "integer",
                "example": 100,
                "format": "int32"
              },
              "greeting_duration_millis": {
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "default": 3500,
                "type": "integer",
                "example": 1500,
                "format": "int32"
              },
              "initial_silence_millis": {
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 1800,
                "format": "int32"
              },
              "maximum_number_of_words": {
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "default": 5,
                "type": "integer",
                "example": 3,
                "format": "int32"
              },
              "maximum_word_length_millis": {
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "default": 3500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              },
              "silence_threshold": {
                "description": "Minimum noise threshold for any analysis.",
                "default": 256,
                "type": "integer",
                "example": 512,
                "format": "int32"
              },
              "greeting_total_analysis_time_millis": {
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "default": 5000,
                "type": "integer",
                "example": 7500,
                "format": "int32"
              },
              "greeting_silence_duration_millis": {
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "default": 1500,
                "type": "integer",
                "example": 2000,
                "format": "int32"
              }
            }
          },
          "custom_headers": {
            "description": "Custom headers to be added to the SIP INVITE.",
            "type": "array",
            "example": [
              {
                "name": "head_1",
                "value": "val_1"
              },
              {
                "name": "head_2",
                "value": "val_2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            }
          },
          "client_state": {
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "target_leg_client_state": {
            "description": "Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.",
            "type": "string",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.",
            "type": "string",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "sip_auth_username": {
            "description": "SIP Authentication username used for SIP challenges.",
            "type": "string",
            "example": "username"
          },
          "sip_auth_password": {
            "description": "SIP Authentication password used for SIP challenges.",
            "type": "string",
            "example": "password"
          },
          "webhook_url": {
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "type": "string",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "type": "string",
            "enum": [
              "POST",
              "GET"
            ],
            "example": "GET"
          }
        }
      },
      "UnprocessableEntityError": {
        "required": [
          "code",
          "title"
        ],
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^\\d{4}"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "type": "string",
                "format": "json-pointer"
              },
              "parameter": {
                "description": "Indicates which query parameter caused the error.",
                "type": "string"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "UpdateAuthenticationProviderRequest": {
        "type": "object",
        "title": "Update Authentication Provider Request",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "short_name": {
            "$ref": "#/components/schemas/short_name"
          },
          "active": {
            "$ref": "#/components/schemas/active"
          },
          "settings": {
            "$ref": "#/components/schemas/settings"
          },
          "settings_url": {
            "$ref": "#/components/schemas/settings_url"
          }
        },
        "example": {
          "name": "Okta",
          "short_name": "myorg",
          "active": true,
          "settings": {
            "idp_entity_id": "https://myorg.myidp.com/saml/metadata",
            "idp_sso_target_url": "https://myorg.myidp.com/trust/saml2/http-post/sso",
            "idp_cert_fingerprint": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7",
            "idp_cert_fingerprint_algorithm": "sha1"
          }
        }
      },
      "UpdateBillingGroup": {
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the billing group"
          }
        },
        "example": {
          "name": "string"
        }
      },
      "UpdateCallControlApplicationRequest": {
        "type": "object",
        "title": "Update Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "enum": [
              "\"Latency\"",
              "\"Chicago, IL\"",
              "\"Ashburn, VA\"",
              "\"San Jose, CA\""
            ],
            "example": "\"Amsterdam, Netherlands\"",
            "default": "\"Latency\""
          },
          "dtmf_type": {
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "example": "Inband",
            "default": "RFC 2833"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "example": true,
            "default": false
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "example": 10,
            "default": 30
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25
        }
      },
      "UpdateConferenceRequest": {
        "required": [
          "call_control_id",
          "supervisor_role"
        ],
        "type": "object",
        "title": "Update Conference Request",
        "properties": {
          "call_control_id": {
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "type": "string"
          },
          "command_id": {
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901",
            "type": "string"
          },
          "supervisor_role": {
            "description": "Sets the participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper",
            "type": "string",
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ]
          },
          "whisper_call_control_ids": {
            "description": "Array of unique call_control_ids the supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.",
            "example": [
              "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
              "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ]
        }
      },
      "UpdateCredentialConnectionRequest": {
        "type": "object",
        "title": "Update Credential Connection Request",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "sip_uri_calling_preference": {
            "type": "string",
            "default": "disabled",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).",
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ]
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "active": true,
          "password": "my123secure456password789",
          "user_name": "myusername123",
          "anchorsite_override": "Latency",
          "connection_name": "my name",
          "sip_uri_calling_preference": " disabled",
          "default_on_hold_comfort_noise_enabled": false,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": "G722",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "US",
            "t38_reinvite_source": "telnyx",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateFaxApplicationRequest": {
        "type": "object",
        "title": "Update Fax Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "properties": {
          "application_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "$ref": "#/components/schemas/WebhookEventUrl"
          },
          "webhook_event_failover_url": {
            "$ref": "#/components/schemas/WebhookEventFailoverUrl"
          },
          "webhook_timeout_secs": {
            "$ref": "#/components/schemas/WebhookTimeoutSecs"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          }
        },
        "example": {
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateFqdnConnectionRequest": {
        "title": "Update FQDN Connection Request",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10
          }
        }
      },
      "UpdateFqdnRequest": {
        "title": "Update FQDN Request",
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this IP should be attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "example": 5060,
            "nullable": true
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          }
        },
        "example": {
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 8080,
          "dns_record_type": "a"
        }
      },
      "UpdateIpConnectionRequest": {
        "title": "Update Ip Connection Request",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "transport_protocol": {
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP",
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ]
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings."
          },
          "webhook_event_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "format": "uri",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "example": "https://failover.example.com",
            "nullable": true,
            "default": ""
          },
          "webhook_api_version": {
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "enum": [
              "1",
              "2"
            ],
            "example": "1",
            "default": "1"
          },
          "webhook_timeout_secs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "example": 25,
            "default": null,
            "nullable": true
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundIp"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": false,
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound:": {
            "ani_number_format": "+E.164",
            "dns_number_format": "+e164",
            "codecs": "G722",
            "default_primary_ip_id": "192.168.0.0",
            "default_tertiary_ip_id": "192.168.0.0",
            "default_secondary_ip_id": "192.168.0.0",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "privacy_zone_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "test",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "telnyx",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateIpRequest": {
        "title": "Update Ip Request",
        "type": "object",
        "required": [
          "ip_address"
        ],
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          }
        },
        "example": {
          "connection_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "ip_address": "192.168.0.0",
          "port": 5060
        }
      },
      "UpdateMediaMultipartRequest": {
        "type": "object",
        "title": "Upload media multipart request",
        "properties": {
          "media": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "type": "string",
            "format": "binary"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days.",
            "type": "integer",
            "example": 86400
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400
        }
      },
      "UpdateMediaRequest": {
        "type": "object",
        "title": "Upload media request",
        "properties": {
          "media_url": {
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "type": "string",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days.",
            "type": "integer",
            "example": 86400
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400
        }
      },
      "UpdateMessagingProfileRequest": {
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "messaging_profile"
            ],
            "readOnly": true
          },
          "id": {
            "description": "Identifies the type of resource.",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "A user friendly name for the messaging profile.",
            "type": "string"
          },
          "enabled": {
            "description": "Specifies whether the messaging profile is enabled or not.",
            "type": "boolean"
          },
          "webhook_url": {
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "webhook_failover_url": {
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "webhook_api_version": {
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "type": "string",
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ]
          },
          "whitelisted_destinations": {
            "description": "Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `[\"*\"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.",
            "type": "array",
            "nullable": true,
            "items": {
              "description": "ISO 3166-1 alpha-2 country code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            }
          },
          "created_at": {
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "description": "Secret used to authenticate with v1 endpoints.",
            "type": "string"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          }
        },
        "example": {
          "name": "Updated Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c"
        }
      },
      "UpdateNumberOrderDocumentRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "387d1e31-a218-4375-8151-103f2d5e2d2c",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order_document",
            "readOnly": true
          },
          "file_id": {
            "type": "string",
            "description": "The id of the file to associate as a number order document.",
            "example": "1e3c5822-0362-4702-8e46-5a129f0d3976"
          },
          "requirements_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "example": "36aaf27d-986b-493c-bd1b-de16af2e4292"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "requirement_type": {
            "type": "string",
            "enum": [
              "address_proof",
              "identification",
              "reg_form"
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order document was uploaded.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          }
        },
        "example": {
          "id": "387d1e31-a218-4375-8151-103f2d5e2d2c",
          "record_type": "number_order_document",
          "file_id": "1e3c5822-0362-4702-8e46-5a129f0d3976",
          "requirements_id": "36aaf27d-986b-493c-bd1b-de16af2e4292",
          "customer_reference": "MY REF 001",
          "requirement_type": "address_proof",
          "created_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "UpdateNumberOrderRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "readOnly": true
          },
          "record_type": {
            "type": "string",
            "example": "number_order",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "writeOnly": true
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "example": 1,
            "readOnly": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "example": "2018-01-01T00:00:00.000000Z",
            "readOnly": true
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "example": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "phone_numbers": [
            {
              "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "record_type": "number_order_phone_number",
              "phone_number": "+19705555098",
              "regulatory_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
              "regulatory_requirements": [
                {
                  "record_type": "phone_number_regulatory_requirement",
                  "requirement_id": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576",
                  "field_value": "45f45a04-b4be-4592-95b1-9306b9db2b21",
                  "field_type": "address_id"
                }
              ],
              "requirements_met": true,
              "status": "success"
            }
          ],
          "record_type": "number_order",
          "phone_numbers_count": 1,
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "requirements_met": true
        }
      },
      "UpdateOutboundVoiceProfileRequest": {
        "type": "object",
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "example": {
          "name": "office",
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office",
            "minLength": 3
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "example": 10,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "example": true,
            "default": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "office-profile"
            ]
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "example": [
              "US",
              "BR",
              "AU"
            ],
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "example": true,
            "default": false
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
            "default": null,
            "nullable": true
          }
        }
      },
      "UpdatePhoneNumberMessagingSettingsRequest": {
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "messaging_product": {
            "type": "string",
            "description": "The requested messaging product the number should be on",
            "example": "P2P"
          }
        },
        "example": {
          "messaging_profile_id": "dd50eba1-a0c0-4563-9925-b25e842a7cb6",
          "messaging_product": "P2P"
        }
      },
      "UpdatePhoneNumberRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "description": "A list of user-assigned tags to help organize phone numbers.",
            "items": {
              "type": "string"
            }
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          }
        },
        "example": {
          "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "tags": [
            "tag"
          ],
          "address_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "external_pin": "1234",
          "customer_reference": "customer-reference",
          "connection_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "billing_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494"
        }
      },
      "UpdatePhoneNumberVoiceSettingsRequest": {
        "type": "object",
        "properties": {
          "tech_prefix_enabled": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether a tech prefix is enabled for this phone number."
          },
          "translated_number": {
            "type": "string",
            "description": "This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed."
          },
          "call_forwarding": {
            "$ref": "#/components/schemas/CallForwarding"
          },
          "cnam_listing": {
            "$ref": "#/components/schemas/CnamListing"
          },
          "usage_payment_method": {
            "type": "string",
            "enum": [
              "pay-per-minute",
              "channel"
            ],
            "default": "pay-per-minute",
            "description": "Controls whether a number is billed per minute or uses your concurrent channels."
          },
          "media_features": {
            "$ref": "#/components/schemas/MediaFeatures"
          },
          "call_recording": {
            "$ref": "#/components/schemas/CallRecording"
          }
        },
        "example": {
          "tech_prefix_enabled": true,
          "translated_number": "+13035559999",
          "call_forwarding": {
            "call_forwarding_enabled": true,
            "forwards_to": "+13035559123",
            "forwarding_type": "always"
          },
          "cnam_listing": {
            "cnam_listing_enabled": true,
            "cnam_listing_details": "example"
          },
          "usage_payment_method": "pay-per-minute",
          "media_features": {
            "rtp_auto_adjust_enabled": true,
            "media_handling_mode": "default",
            "accept_any_rtp_packets_enabled": true,
            "t38_fax_gateway_enabled": true
          },
          "call_recording": {
            "inbound_call_recording_enabled": true,
            "inbound_call_recording_format": "wav",
            "inbound_call_recording_channels": "single"
          }
        }
      },
      "UpdatePortingOrder": {
        "type": "object",
        "title": "UpdatePortingOrder",
        "properties": {
          "misc": {
            "$ref": "#/components/schemas/PortingOrderMisc"
          },
          "end_user": {
            "$ref": "#/components/schemas/PortingEndUser"
          },
          "activation_settings": {
            "type": "object",
            "properties": {
              "foc_datetime_requested": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 formatted Date/Time requested for the FOC date",
                "example": "2021-03-19T10:07:15.527Z"
              }
            }
          },
          "phone_number_configuration": {
            "$ref": "#/components/schemas/PortingOrderPhoneNumberConfiguration"
          },
          "documents": {
            "$ref": "#/components/schemas/PortingOrderDocuments"
          },
          "user_feedback": {
            "$ref": "#/components/schemas/PortingOrderUserFeedback"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "customer_reference": {
            "type": "string"
          }
        }
      },
      "UpdateShortCodeRequest": {
        "type": "object",
        "required": [
          "messaging_profile_id"
        ],
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          }
        },
        "example": {
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000"
        }
      },
      "UpdateTexmlApplicationRequest": {
        "type": "object",
        "title": "Update Texml Application Request",
        "required": [
          "friendly_name",
          "voice_url"
        ],
        "properties": {
          "friendly_name": {
            "$ref": "#/components/schemas/ApplicationName"
          },
          "active": {
            "$ref": "#/components/schemas/ConnectionActive"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "$ref": "#/components/schemas/FirstCommandTimeout"
          },
          "first_command_timeout_secs": {
            "$ref": "#/components/schemas/FirstCommandTimeoutSecs"
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "uri",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "default": null,
            "format": "uri",
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "default": null,
            "format": "uri",
            "example": "https://example.com"
          },
          "status_callback_method": {
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "enum": [
              "get",
              "post"
            ],
            "default": "post",
            "example": "get"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "$ref": "#/components/schemas/OutboundVoiceProfileId"
              }
            }
          }
        },
        "example": {
          "friendly_name": "call-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateUserRequest": {
        "title": "UpdateUserRequest",
        "required": [
          "webhook_url"
        ],
        "type": "object",
        "properties": {
          "webhook_url": {
            "title": "Webhook Url",
            "type": "string",
            "description": "The desired URL to set for your WhatsApp webhook endpoint.",
            "example": "https://mywebhook.com/example/endpoint"
          }
        }
      },
      "UpdateVerifyProfileCallRequest": {
        "title": "UpdateVerifyProfileCallRequest",
        "type": "object",
        "properties": {
          "speech_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "default_call_timeout_secs": {
            "type": "integer",
            "example": 30,
            "default": 45,
            "description": "Must be less than default_verification_timeout_secs"
          }
        }
      },
      "UpdateVerifyProfileFlashcallRequest": {
        "title": "UpdateVerifyProfileFlashcallRequest",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "UpdateVerifyProfilePSD2Request": {
        "title": "UpdateVerifyProfilePSD2Request",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "UpdateVerifyProfileSMSRequest": {
        "title": "UpdateVerifyProfileSMSRequest",
        "type": "object",
        "properties": {
          "messaging_enabled": {
            "example": true,
            "description": "Enables SMS text messaging for the Verify profile.",
            "type": "boolean"
          },
          "rcs_enabled": {
            "example": true,
            "description": "Enables RCS messaging for the Verify profile.",
            "type": "boolean"
          },
          "messaging_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "vsms_enabled": {
            "example": true,
            "description": "Enables VSMS for the Verify profile.",
            "type": "boolean"
          }
        }
      },
      "UpdateVerifyProfileWhatsappRequest": {
        "title": "UpdateVerifyProfileWhatsappRequest",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "app_name": {
            "example": "Example Secure App",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "type": "string"
          }
        }
      },
      "UpdatedAt": {
        "title": "Updated At",
        "type": "string",
        "description": "ISO 8601 formatted date indicating when the resource was updated.",
        "example": "2020-02-03T22:25:27.521Z"
      },
      "UplinkData": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Uplink data",
            "example": 1
          },
          "unit": {
            "description": "Transmission unit",
            "type": "string",
            "enum": [
              "B",
              "KB",
              "MB"
            ],
            "default": "MB"
          }
        }
      },
      "UploadFileMessagingHostedNumberOrderRequest": {
        "type": "object",
        "example": {
          "loa": "example loa",
          "bill": "bill example"
        },
        "properties": {
          "loa": {
            "type": "string",
            "format": "binary",
            "description": "Must be a signed LOA for the numbers in the order in PDF format."
          },
          "bill": {
            "type": "string",
            "format": "binary",
            "description": "Must be the last month's bill with proof of ownership of all of the numbers in the order in PDF format."
          }
        }
      },
      "UploadMedia": {
        "title": "Upload Media",
        "description": "",
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "whatsapp_media_id"
            ],
            "readOnly": true
          },
          "id": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "whatsapp_media_id",
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
        }
      },
      "UploadMediaMultipartRequest": {
        "type": "object",
        "title": "Upload media multipart request",
        "required": [
          "media"
        ],
        "properties": {
          "media": {
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "type": "string",
            "format": "binary"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days.",
            "type": "integer",
            "example": 86400
          },
          "media_name": {
            "description": "The unique identifier of a file.",
            "type": "string",
            "example": "my_file"
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "UploadMediaRequest": {
        "type": "object",
        "title": "Upload media request",
        "required": [
          "media_url"
        ],
        "properties": {
          "media_url": {
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "type": "string",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days.",
            "type": "integer",
            "example": 86400
          },
          "media_name": {
            "description": "The unique identifier of a file.",
            "type": "string",
            "example": "my_file"
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "Url": {
        "title": "Root Type for Url",
        "description": "Standard Values: HOME, WORK",
        "type": "object",
        "properties": {
          "url": {
            "description": "URL",
            "type": "string"
          },
          "type": {
            "description": "Standard Values: HOME, WORK",
            "type": "string"
          }
        },
        "example": {
          "url": "https://www.facebook.com",
          "type": "WORK"
        }
      },
      "UrlShortenerSettings": {
        "type": "object",
        "nullable": true,
        "required": [
          "domain"
        ],
        "description": "The URL shortener feature allows automatic replacement of URLs that were generated using\na public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,\nis.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with\nwith links generated by Telnyx. The use of custom links can improve branding and message\ndeliverability.\n\nTo disable this feature, set the object field to `null`.\n",
        "properties": {
          "domain": {
            "type": "string",
            "example": "acct.fyi",
            "description": "One of the domains provided by the Telnyx URL shortener service.\n"
          },
          "prefix": {
            "type": "string",
            "example": "",
            "description": "Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.\n"
          },
          "replace_blacklist_only": {
            "type": "boolean",
            "example": true,
            "description": "Use the link replacement tool only for links that are specifically blacklisted by Telnyx.\n"
          },
          "send_webhooks": {
            "type": "boolean",
            "example": false,
            "description": "Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.\n"
          }
        },
        "example": {
          "domain": "example.ex",
          "prefix": "",
          "replace_blacklist_only": true,
          "send_webhooks": false
        }
      },
      "UsagePaymentMethod": {
        "type": "string",
        "description": "Setting for how costs for outbound profile are calculated.",
        "enum": [
          "tariff",
          "rate-deck"
        ],
        "example": "tariff",
        "default": "rate-deck"
      },
      "UserBalance": {
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "balance",
            "enum": [
              "balance"
            ],
            "description": "Identifies the type of the resource."
          },
          "balance": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "The account's current balance.",
            "example": "300.00"
          },
          "credit_limit": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "The account's credit limit.",
            "example": "100.00"
          },
          "available_credit": {
            "type": "string",
            "pattern": "^d{3}.d{2}",
            "description": "Available amount to spend (balance + credit limit)",
            "example": "400.00"
          },
          "currency": {
            "type": "string",
            "enum": [
              "USD"
            ],
            "description": "The ISO 4217 currency identifier.",
            "example": "USD"
          }
        },
        "example": {
          "record_type": "balance",
          "balance": "300.00",
          "credit_limit": "100.00",
          "available_credit": "400.00",
          "currency": "USD"
        }
      },
      "ValidateAddress": {
        "type": "object",
        "properties": {
          "street_address": {
            "$ref": "#/components/schemas/street_address"
          },
          "extended_address": {
            "$ref": "#/components/schemas/extended_address"
          },
          "locality": {
            "$ref": "#/components/schemas/locality"
          },
          "administrative_area": {
            "$ref": "#/components/schemas/administrative_area"
          },
          "postal_code": {
            "$ref": "#/components/schemas/postal_code"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          }
        }
      },
      "ValidateAddressRequest": {
        "type": "object",
        "required": [
          "country_code",
          "street_address",
          "postal_code"
        ],
        "properties": {
          "street_address": {
            "$ref": "#/components/schemas/street_address"
          },
          "extended_address": {
            "$ref": "#/components/schemas/extended_address"
          },
          "locality": {
            "$ref": "#/components/schemas/locality"
          },
          "administrative_area": {
            "$ref": "#/components/schemas/administrative_area"
          },
          "postal_code": {
            "$ref": "#/components/schemas/postal_code"
          },
          "country_code": {
            "$ref": "#/components/schemas/country_code"
          }
        }
      },
      "ValidateAddressResult": {
        "type": "object",
        "title": "Validate address action result",
        "properties": {
          "result": {
            "type": "string",
            "description": "Indicates whether an address is valid or invalid.",
            "enum": [
              "valid",
              "invalid"
            ],
            "example": "valid"
          },
          "suggested": {
            "type": "object",
            "description": "Provides normalized address when available.",
            "$ref": "#/components/schemas/ValidateAddress"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "address_validation"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "required": [
          "result",
          "suggested"
        ]
      },
      "Verification": {
        "title": "Verification",
        "type": "object",
        "properties": {
          "id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "format": "uuid",
            "type": "string"
          },
          "verification_type": {
            "$ref": "#/components/schemas/VerificationType"
          },
          "record_type": {
            "$ref": "#/components/schemas/VerificationRecordType"
          },
          "phone_number": {
            "example": "+13035551234",
            "type": "string",
            "description": "+E164 formatted phone number."
          },
          "verify_profile_id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the associated Verify profile."
          },
          "timeout_secs": {
            "example": 300,
            "type": "integer",
            "description": "This is the number of seconds before the code of the request is expired. Once this request has expired, the code will no longer verify the user. Note: this will override the `default_verification_timeout_secs` on the Verify profile."
          },
          "call_timeout_secs": {
            "example": 299,
            "type": "integer",
            "description": "This is the number of seconds before the call ends, if the verification makes a call. Note: this will override the `default_call_timeout_secs` on the Verify profile."
          },
          "status": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "created_at": {
            "example": "2020-09-14T17:03:32.965812",
            "type": "string"
          },
          "updated_at": {
            "example": "2020-09-14T17:03:32.965812",
            "type": "string"
          }
        }
      },
      "VerificationProfileRecordType": {
        "title": "VerificationProfileRecordType",
        "enum": [
          "verification_profile"
        ],
        "type": "string",
        "example": "verification_profile",
        "description": "The possible verification profile record types."
      },
      "VerificationRecordType": {
        "title": "VerificationRecordType",
        "enum": [
          "verification"
        ],
        "type": "string",
        "example": "verification",
        "description": "The possible verification record types."
      },
      "VerificationStatus": {
        "title": "VerificationStatus",
        "enum": [
          "pending",
          "sms_delivery_failed",
          "accepted",
          "expired",
          "not_enough_credit",
          "network_error",
          "number_unreachable",
          "internal_error",
          "invalid_destination",
          "timed_out"
        ],
        "type": "string",
        "example": "accepted",
        "description": "The possible statuses of the verification request."
      },
      "VerificationType": {
        "title": "VerificationType",
        "enum": [
          "sms_verification",
          "psd2_verification",
          "whatsapp_verification",
          "call_verification",
          "flashcall_verification"
        ],
        "type": "string",
        "example": "sms_verification",
        "description": "The possible types of verification."
      },
      "VerifyProfileCallResponse": {
        "title": "VerifyProfileCallResponse",
        "type": "object",
        "properties": {
          "speech_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "default_call_timeout_secs": {
            "type": "integer",
            "example": 30,
            "default": 45,
            "description": "Must be less than default_verification_timeout_secs"
          }
        }
      },
      "VerifyProfileFlashcallResponse": {
        "title": "VerifyProfileFlashcallResponse",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "VerifyProfilePSD2Response": {
        "title": "VerifyProfilePSD2Response",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          }
        }
      },
      "VerifyProfileResponse": {
        "title": "VerifyProfileResponse",
        "type": "object",
        "properties": {
          "id": {
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "example": "Test Profile",
            "type": "string"
          },
          "webhook_url": {
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "webhook_failover_url": {
            "type": "string",
            "example": "http://example.com/webhook/failover"
          },
          "record_type": {
            "$ref": "#/components/schemas/VerificationProfileRecordType"
          },
          "created_at": {
            "example": "2020-09-14T17:03:32.965812",
            "type": "string"
          },
          "updated_at": {
            "example": "2020-09-14T17:03:32.965812",
            "type": "string"
          },
          "sms": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfileSMSResponse"
          },
          "psd2": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfilePSD2Response"
          },
          "whatsapp": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfileWhatsappResponse"
          },
          "call": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfileCallResponse"
          },
          "flashcall": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfileFlashcallResponse"
          },
          "language": {
            "type": "string",
            "example": "en-US"
          }
        }
      },
      "VerifyProfileResponseDataWrapper": {
        "title": "VerifyProfileResponseDataWrapper",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/VerifyProfileResponse"
          }
        }
      },
      "VerifyProfileSMSResponse": {
        "title": "VerifyProfileSMSResponse",
        "type": "object",
        "properties": {
          "messaging_enabled": {
            "example": true,
            "description": "Enables SMS text messaging for the Verify profile.",
            "type": "boolean"
          },
          "rcs_enabled": {
            "example": true,
            "description": "Enables RCS messaging for the Verify profile.",
            "type": "boolean"
          },
          "messaging_template": {
            "example": "Hello, this is the Acme Inc verification code you requested: {code}.",
            "type": "string",
            "description": "Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code."
          },
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "vsms_enabled": {
            "example": true,
            "description": "Enables VSMS for the Verify profile.",
            "type": "boolean"
          }
        }
      },
      "VerifyProfileWhatsappResponse": {
        "title": "VerifyProfileWhatsappResponse",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "example": 300,
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "type": "integer"
          },
          "app_name": {
            "example": "Example Secure App",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "type": "string"
          }
        }
      },
      "VerifyVerificationCodeRequest": {
        "title": "VerifyVerificationCodeRequest",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "example": "17686",
            "type": "string",
            "description": "This is the code the user submits for verification."
          }
        }
      },
      "VerifyVerificationCodeResponse": {
        "title": "VerifyVerificationCodeResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "phone_number",
              "response_code"
            ],
            "type": "object",
            "properties": {
              "phone_number": {
                "example": "+13035551234",
                "type": "string",
                "description": "+E164 formatted phone number."
              },
              "response_code": {
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "type": "string",
                "example": "accepted",
                "description": "Identifies if the verification code has been accepted or rejected."
              }
            }
          }
        }
      },
      "Video": {
        "title": "Video",
        "description": "The media object containing a video",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The media object ID returned when the media is successfully uploaded to the media endpoint.",
            "example": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68"
          },
          "link": {
            "type": "string",
            "description": "The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.",
            "example": "http://www.example.com/file"
          },
          "caption": {
            "type": "string",
            "description": "Describes the specified media.",
            "example": "My cool media!"
          }
        },
        "example": {
          "id": "f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68",
          "caption": "My cool media!"
        }
      },
      "WdrReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "detail_records_report"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "start_time": {
            "description": "ISO 8601 formatted date-time indicating the start time.",
            "type": "string",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "end_time": {
            "description": "ISO 8601 formatted date-time indicating the end time.",
            "type": "string",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "status": {
            "description": "Indicates the status of the report, which is updated asynchronously.",
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed",
              "deleted"
            ],
            "example": "pending"
          },
          "report_url": {
            "description": "The URL where the report content, when generated, will be published to.",
            "type": "string",
            "example": "http://example.com"
          }
        }
      },
      "WdrReportRequest": {
        "type": "object",
        "properties": {
          "start_time": {
            "description": "ISO 8601 formatted date-time indicating the start time.",
            "type": "string",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "end_time": {
            "description": "ISO 8601 formatted date-time indicating the end time.",
            "type": "string",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "start_time": "2018-02-02T22:25:27.521Z",
          "end_time": "2018-02-02T22:25:27.521Z"
        }
      },
      "WebhookApiVersion": {
        "title": "Webhook API Version",
        "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
        "type": "string",
        "enum": [
          "1",
          "2"
        ],
        "default": "1",
        "example": "1"
      },
      "WebhookEventFailoverUrl": {
        "title": "Webhook Event Failover URL",
        "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        "type": "string",
        "format": "uri",
        "default": "",
        "nullable": true,
        "example": "https://failover.example.com"
      },
      "WebhookEventUrl": {
        "title": "Webhook Event URL",
        "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        "type": "string",
        "format": "uri",
        "example": "https://example.com"
      },
      "WebhookTimeoutSecs": {
        "title": "Webhook Timeout Secs",
        "type": "integer",
        "description": "Specifies how many seconds to wait before timing out a webhook.",
        "minimum": 0,
        "maximum": 30,
        "nullable": true,
        "default": null,
        "example": 25
      },
      "WhatsAppContactAddress": {
        "title": "Address",
        "required": [
          "city",
          "country",
          "country_code",
          "state",
          "street",
          "type",
          "zip"
        ],
        "type": "object",
        "properties": {
          "city": {
            "description": "City name",
            "type": "string"
          },
          "country": {
            "description": "Full country name",
            "type": "string"
          },
          "country_code": {
            "description": "Two-letter country abbreviation",
            "type": "string"
          },
          "state": {
            "description": "State abbreviation",
            "type": "string"
          },
          "street": {
            "description": "Street number and name",
            "type": "string"
          },
          "type": {
            "description": "Standard Values: HOME, WORK",
            "type": "string"
          },
          "zip": {
            "description": "ZIP code",
            "type": "string"
          }
        },
        "example": {
          "city": "Menlo Park",
          "country": "United States",
          "country_code": "us",
          "state": "CA",
          "street": "1 Hacker Way",
          "type": "HOME",
          "zip": "94025"
        }
      },
      "WhatsAppDetailRecordReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ab76c3b6-80cd-11eb-9439-0242ac130002"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-01T00:00:00-06:00"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-01T00:00:00-06:00"
          },
          "download_link": {
            "type": "string",
            "example": "https://portal-cdrs-usage.s3.amazonaws.com"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ]
          },
          "record_type": {
            "type": "string",
            "example": "whatsapp_detail_record_report"
          }
        }
      },
      "WhatsAppDetailReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WhatsAppDetailRecordReport"
          }
        }
      },
      "WhatsAppGetAllDetailReportResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhatsAppDetailRecordReport"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "WhatsAppReportsReq": {
        "required": [
          "end_date",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2021-05-01T00:00:00-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2021-05-01T00:00:00-06:00"
          }
        }
      },
      "WhatsAppUsageAggregation": {
        "type": "object",
        "properties": {
          "message_type": {
            "type": "string",
            "example": "template"
          },
          "direction": {
            "type": "string",
            "example": "inbound"
          },
          "status": {
            "type": "string",
            "example": "delivered"
          },
          "recipient_country_code": {
            "type": "string",
            "example": "1"
          },
          "whatsapp_fee": {
            "$ref": "#/components/schemas/Money"
          },
          "telnyx_fee": {
            "$ref": "#/components/schemas/Money"
          },
          "cost": {
            "$ref": "#/components/schemas/Money"
          },
          "count": {
            "type": "string",
            "example": "3"
          },
          "record_type": {
            "type": "string",
            "example": "whatsapp_usage_aggregation"
          }
        }
      },
      "WhatsAppUsageAggregationsResponseContainer": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhatsAppUsageAggregation"
            }
          }
        }
      },
      "WhatsAppUser": {
        "title": "WhatsApp User",
        "description": "The WhatsApp user object",
        "type": "object",
        "properties": {
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "enum": [
              "whatsapp_user"
            ],
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The WhatsApp User ID, usually a phone number.",
            "example": "15125551212"
          },
          "webhook_url": {
            "title": "Webhook Url",
            "type": "string",
            "description": "The URL that WhatsApp webhooks are sent to.",
            "example": "https://mywebhook.com/example/endpoint"
          }
        },
        "example": {
          "record_type": "whatsapp_user",
          "id": "15125551212",
          "webhook_url": "https://mywebhook.com/example/endpoint"
        }
      },
      "WirelessConnectivityLog": {
        "type": "object",
        "title": "WirelessConnectivityLog",
        "description": "This object represents a wireless connectivity session log that happened through a SIM card. It aids in finding out potential problems when the SIM is not able to attach properly.",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "wireless_connectivity_log",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "example": 137509451,
            "description": "Uniquely identifies the session.",
            "readOnly": true
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identification UUID of the related SIM card resource.",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "log_type": {
            "type": "string",
            "enum": [
              "registration",
              "data"
            ],
            "example": "registration",
            "description": "The type of the session, 'registration' being the initial authentication session and 'data' the actual data transfer sessions.",
            "readOnly": true
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "imei": {
            "type": "string",
            "description": "The International Mobile Equipment Identity (or IMEI) is a number, usually unique, that identifies the device currently being used connect to the network.",
            "readOnly": true,
            "example": "490154203237518"
          },
          "mobile_country_code": {
            "type": "string",
            "description": "It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "310"
          },
          "mobile_network_code": {
            "type": "string",
            "description": "It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "410"
          },
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the session started.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "stop_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the session ended.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "apn": {
            "type": "string",
            "description": "The Access Point Name (APN) identifies the packet data network that a mobile data user wants to communicate with.",
            "readOnly": true,
            "example": "data00.telnyx"
          },
          "ipv4": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "192.168.0.0"
          },
          "ipv6": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "2001:cdba:0000:0000:0000:0000:3257:9652"
          },
          "radio_access_technology": {
            "type": "string",
            "description": "The radio technology the SIM card used during the session.",
            "readOnly": true,
            "example": "LTE"
          },
          "state": {
            "type": "string",
            "description": "The state of the SIM card after when the session happened.",
            "readOnly": true,
            "example": "provisioned"
          }
        }
      },
      "WirelessCost": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Final cost. Cost is calculated as rate * unit",
            "example": 0.1
          },
          "currency": {
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD",
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ]
          }
        }
      },
      "WirelessRate": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Rate from which cost is calculated",
            "example": 0.1
          },
          "currency": {
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD",
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ]
          }
        }
      },
      "10dlc_alt_business_id": {
        "description": "Alternate business identifier such as DUNS, LEI, or GIIN (optional)",
          "enum": [
            ""
          ],
          "example": "",
          "type": "string"
         },
      "10dlc_alt_business_id_type": {
        "description": "enumeration of alternate business identifiers (optional)",
        "enum": [
          ""
        ],
        "example": "",
        "type": "string"
      },
      "10dlc_brand_id": {
        "description": "unique id for brand",
        "format": "uuid",
        "type": "string"
      },
      "10dlc_brand_relationship": {
        "description": "Brand relationsihp to the CSP",
        "enum": [
          "BASIC_ACCOUNT",
          "SMALL_ACCOUNT",
          "MEDIUM_ACCOUNT",
          "LARGE_ACCOUNT",
          "KEY_ACCOUNT"
        ],
        "example": "BASIC_ACCOUNT",
        "type": "string"
      },
      "10dlc_company_name": {
        "description": "Legal company name",
        "enum": [
          "Company A Inc",
          "Company B Inc",
          "Company C Inc"
        ],
        "example": "Example Company Inc.",
        "type": "string"
      },
      "10dlc_csp_id": {
        "description": "unique id for csp",
        "format": "uuid",
        "type": "string"
      },
      "10dlc_display_name": {
        "description": "Display or marketing name of the brand",
        "enum": [
          "Company A",
          "Company B",
          "Company C"
        ],
        "example": "Example Company",
        "type": "string"
      },
      "10dlc_ein": {
        "description": "Government assigned corporate tax ID EIN is 9 digits in U.S.",
        "pattern": "^\\d{9}$",
        "example": 123456789,
        "type": "string"
      },
      "10dlc_evp_id": {
        "description": "External vetting provider id for the brand",
        "format": "uuid",
        "type": "string"
      },
      "10dlc_email": {
        "description": "Valid email address of brand support contact.",
        "format": "email",
        "type": "string"
      },
      "10dlc_entity_type": {
        "description": "Entity type behind the brand. This is the form of business establishment.",
        "enum": [
          "PRIVATE_PROFIT",
          "PUBLIC_PROFIT",
          "NON_PROFIT",
          "SOLE_PROPRIETOR"
        ],
        "example": "PRIVATE_PROFIT",
        "type": "string"
      },
      "10dlc_ip_address": {
        "description": "IP address of the browser requesting to create brand identity",
        "format": "ipv4",
        "example": "127.0.0.1",
        "type": "string"
      },
      "10dlc_stock_symbol": {
        "description": "stock symbol",
        "enum": [
          "ABC",
          "DEF",
          "GHI"
        ],
        "example": "ABC",
        "type": "string"
      },
      "10dlc_stock_exchange": {
        "description": "stock exchange",
          "enum": [
              "NONE",
              "NASDAQ",
              "NYSE",
              "AMEX",
              "AMX",
              "ASX",
              "B3",
              "BME",
              "BSE",
              "FRA",
              "ICEX",
              "JPX",
              "JSE",
              "KRX",
              "LON",
              "NSE",
              "OMX",
              "SEHK",
              "SSE",
              "STO",
              "SWX",
              "SZSE",
              "TSX",
              "TWSE",
              "VSE"
          ],
        "example": "NASDAQ",
        "type": "string"
       },
      "10dlc_vertical": {
        "description": "Vertical or industry segment of the brand or campaign",
        "enum": [
            "REAL_ESTATE",
            "HEALTHCARE",
            "ENERGY",
            "ENTERTAINMENT",
            "RETAIL",
            "AGRICULTURE",
            "INSURANCE",
            "EDUCATION",
            "HOSPITALITY",
            "FINANCIAL",
            "GAMBLING",
            "CONSTRUCTION",
            "NGO",
            "MANUFACTURING",
            "GOVERNMENT",
            "TECHNOLOGY",
            "COMMUNICATION"
        ],
        "example": "REAL_ESTATE",
        "type": "string"
      },
      "10dlc_vetting_class": {
        "description": "Identifies the vetting classification",
        "type": "string",
        "minLength": 10,
        "maxLength": 10
      },
      "10dlc_website": {
        "description": "Brand website URL",
        "format": "uri",
        "type": "string"
      },
      "10dlc_universal_ein": {
        "description": "Universal EIN of Brand, read only (optional)",
        "enum": [
          ""
        ],
        "example": "",
        "type": "string"
      },
      "active": {
        "type": "boolean",
        "description": "The active status of the authentication provider",
        "example": true,
        "default": true
      },
      "address_book": {
        "type": "boolean",
        "description": "Indicates whether or not the address should be considered part of your list of addresses that appear for regular use.",
        "example": false,
        "default": true
      },
      "administrative_area": {
        "type": "string",
        "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
        "example": "IL"
      },
      "attempt": {
        "description": "Webhook delivery attempt details.",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "delivered",
              "failed"
            ]
          },
          "started_at": {
            "description": "ISO 8601 timestamp indicating when the attempt was initiated.",
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "description": "ISO 8601 timestamp indicating when the attempt has finished.",
            "type": "string",
            "format": "date-time"
          },
          "http": {
            "$ref": "#/components/schemas/http"
          },
          "errors": {
            "description": "Webhook delivery errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "example": [
          {
            "status": "delivered",
            "started_at": "2020-08-10T14:00:05.364Z",
            "finished_at": "2020-08-10T14:00:05.595Z",
            "http": {
              "request": {
                "url": "https://fallback.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "response": {
                "status": 200,
                "headers": [
                  "Content-Type: text/html"
                ],
                "body": "All good."
              }
            }
          },
          {
            "status": "failed",
            "started_at": "2020-08-10T14:00:05.004Z",
            "finished_at": "2020-08-10T14:00:05.360Z",
            "http": {
              "request": {
                "url": "https://typo.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "response": {
                "status": 404,
                "headers": [
                  "Content-Type: text/html",
                  "Pragma: no-cache"
                ],
                "body": "Oops. Not found."
              }
            },
            "errors": [
              {
                "code": "75499",
                "title": "Webhook host returned HTTP 4XX",
                "detail": "The server returned another HTTP 4XX error"
              }
            ]
          },
          {
            "status": "failed",
            "started_at": "2020-08-10T14:00:00.000Z",
            "finished_at": "2020-08-10T14:00:05.000Z",
            "http": {
              "request": {
                "url": "https://slow.example.com/webhooks",
                "headers": [
                  "Accept: */*"
                ]
              },
              "reponse": null
            },
            "errors": [
              {
                "code": "75001",
                "title": "Could not resolve name",
                "detail": "Unable to resolve the webhook URL domain name"
              }
            ]
          }
        ]
      },
      "borough": {
        "type": "string",
        "description": "The borough of the address. This field is not used for addresses in the US but is used for some international addresses.",
        "example": "Guadalajara"
      },
      "business_name": {
        "type": "string",
        "description": "The business name associated with the address. An address must have either a first last name or a business name.",
        "example": "Toy-O'Kon"
      },
      "city": {
        "description": "The city of the address",
        "enum": [
          "Fakeville",
          "Mocktown",
          "Imaginopolis"
        ],
        "example": "Fakeville",
        "type": "string"
      },
      "country_code": {
        "type": "string",
        "enum": [
          "US"
        ],
        "description": "The two-c/haracter (ISO 3166-1 alpha-2) country code of the address.",
        "example": "US"
      },
      "customer_reference": {
        "type": "string",
        "description": "A customer reference string for customer look ups.",
        "example": "MY REF 001"
      },
      "error": {
        "properties": {
          "code": {
            "type": "string",
            "pattern": "^\\d{4}"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        }
      },
      "extended_address": {
        "type": "string",
        "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
        "example": "#504"
      },
      "first_name": {
        "type": "string",
        "description": "The first name associated with the address. An address must have either a first last name or a business name.",
        "example": "Alfred"
      },
      "http": {
        "description": "HTTP request and response information.",
        "properties": {
          "request": {
            "description": "Request details.",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://example.com/webhooks"
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              }
            }
          },
          "response": {
            "description": "Response details, optional.",
            "nullable": true,
            "properties": {
              "status": {
                "type": "integer",
                "example": 200
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              },
              "body": {
                "description": "Raw response body, limited to 10kB.",
                "type": "string"
              }
            }
          }
        }
      },
      "http_headers": {
        "description": "List of headers, limited to 10kB.",
        "type": "array",
        "items": {
          "type": "string",
          "example": "Header-Name: header value"
        }
      },
      "last_name": {
        "type": "string",
        "description": "The last name associated with the address. An address must have either a first last name or a business name.",
        "example": "Foster"
      },
      "locality": {
        "type": "string",
        "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
        "example": "Chicago"
      },
      "name": {
        "type": "string",
        "description": "The name associated with the authentication provider.",
        "example": "Okta"
      },
      "neighborhood": {
        "type": "string",
        "description": "The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.",
        "example": "Ciudad de los deportes"
      },
      "organization_id": {
        "type": "string",
        "format": "uuid",
        "description": "The id from the Organization the authentication provider belongs to.",
        "example": "24b4a4bb-c4df-46ad-bbcb-23fc741c5ad7"
      },
      "phone_number": {
        "type": "string",
        "pattern": "^\\+1\\d{10}",
        "description": "The phone number associated with the address.",
        "example": "+12125559000"
      },
      "postal_code": {
        "type": "string",
        "pattern": "^\\d{5}",
        "description": "The postal code of the address.",
        "example": "60654"
      },
      "settings": {
        "type": "object",
        "description": "The settings associated with the authentication provider.",
        "required": [
          "idp_entity_id",
          "idp_sso_target_url",
          "idp_cert_fingerprint"
        ],
        "properties": {
          "idp_entity_id": {
            "type": "string",
            "description": "The Entity ID for the identity provider (IdP).",
            "example": "https://myorg.myidp.com/saml/metadata"
          },
          "idp_sso_target_url": {
            "type": "string",
            "description": "The SSO target url for the identity provider (IdP).",
            "example": "https://myorg.myidp.com/trust/saml2/http-post/sso"
          },
          "idp_cert_fingerprint": {
            "type": "string",
            "description": "The certificate fingerprint for the identity provider (IdP)",
            "example": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7"
          },
          "idp_cert_fingerprint_algorithm": {
            "type": "string",
            "description": "The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
            "enum": [
              "sha1",
              "sha256",
              "sha384",
              "sha512"
            ],
            "example": "sha256",
            "default": "sha1"
          }
        }
      },
      "settings_url": {
        "type": "string",
        "description": "The URL for the identity provider metadata file to populate the settings automatically. If the settings attribute is provided, that will be used instead.",
        "example": "https://myorg.myidp.com/saml/metadata"
      },
      "short_name": {
        "type": "string",
        "description": "The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.",
        "example": "myorg"
      },
      "state": {
        "description": "State associated with address",
        "enum": [
          "TX",
          "CA",
          "CO"
        ],
        "example": "TX",
        "type": "string"
      },
      "street_address": {
        "type": "string",
        "description": "The primary street address information about the address.",
        "enum": [
          "123 Fake St",
          "456 Mock Rd",
          "789 Imaginary Ln"
        ],
        "example": "311 W Superior Street"
      },
      "validate_address": {
        "type": "boolean",
        "description": "Indicates whether or not the address should be validated for emergency use upon creation or not. This should be left with the default value of `true` unless you have used the `/addresses/actions/validate` endpoint to validate the address separately prior to creation. If an address is not validated for emergency use upon creation and it is not valid, it will not be able to be used for emergency services.",
        "example": true,
        "default": true
      },
      "webhook_delivery": {
        "description": "Record of all attempts to deliver a webhook.",
        "properties": {
          "id": {
            "description": "Uniquely identifies the webhook_delivery record.",
            "type": "string",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "user_id": {
            "description": "Uniquely identifies the user that owns the webhook_delivery record.",
            "type": "string",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "description": "Identifies the type of the resource.",
            "type": "string",
            "example": "webhook_delivery"
          },
          "status": {
            "description": "Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.",
            "enum": [
              "delivered",
              "failed"
            ],
            "type": "string"
          },
          "webhook": {
            "description": "Original webhook JSON data. Payload fields vary according to event type.",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "example": "event",
                "enum": [
                  "event"
                ],
                "description": "Identifies the type of the resource."
              },
              "event_type": {
                "type": "string",
                "example": "webhook.command",
                "enum": [
                  "webhook.command"
                ],
                "description": "The type of event being delivered."
              },
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
                "description": "Identifies the type of resource."
              },
              "occurred_at": {
                "type": "string",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.521992Z",
                "description": "ISO 8601 datetime of when the event occurred."
              },
              "payload": {
                "type": "object",
                "properties": {}
              }
            },
            "example": {
              "record_type": "event",
              "id": "C9C0797E-901D-4349-A33C-C2C8F31A92C2",
              "event_type": "call_initiated",
              "occurred_at": "2020-08-10T13:02:01.000Z",
              "payload": {
                "useful": "information"
              }
            }
          },
          "started_at": {
            "description": "ISO 8601 timestamp indicating when the first request attempt was initiated.",
            "type": "string",
            "format": "date-time",
            "example": "2020-08-10T14:00:00.000Z"
          },
          "finished_at": {
            "description": "ISO 8601 timestamp indicating when the last webhook response has been received.",
            "type": "string",
            "format": "date-time",
            "example": "2020-08-10T14:00:05.595Z"
          },
          "attempts": {
            "description": "Detailed delivery attempts, ordered by most recent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attempt"
            },
            "example": [
              {
                "status": "delivered",
                "started_at": "2020-08-10T14:00:05.364Z",
                "finished_at": "2020-08-10T14:00:05.595Z",
                "http": {
                  "request": {
                    "url": "https://fallback.example.com/webhooks",
                    "headers": [
                      "Accept: */*"
                    ]
                  },
                  "response": {
                    "status": 200,
                    "headers": [
                      "Content-Type: text/html"
                    ],
                    "body": "All good."
                  }
                }
              },
              {
                "status": "failed",
                "started_at": "2020-08-10T14:00:05.004Z",
                "finished_at": "2020-08-10T14:00:05.360Z",
                "http": {
                  "request": {
                    "url": "https://typo.example.com/webhooks",
                    "headers": [
                      "Accept: */*"
                    ]
                  },
                  "response": {
                    "status": 404,
                    "headers": [
                      "Content-Type: text/html",
                      "Pragma: no-cache"
                    ],
                    "body": "Oops. Not found."
                  }
                },
                "errors": [
                  {
                    "code": "75499",
                    "title": "Webhook host returned HTTP 4XX",
                    "detail": "The server returned another HTTP 4XX error"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
